{
  "swagger": "2.0",
  "info": {
    "description": "webMethods API Gateway is the core run time component in webMethods API Management platform and it enables organizations to secure, manage and monitor their API programs.",
    "version": "10.15",
    "title": "API Gateway"
  },
  "host": "localhost:5555",
  "basePath": "/rest/apigateway",
  "schemes": [
    "http"
  ],
  "consumes": [
    "plain/text"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apitransactions": {
      "get": {
        "description": "The GET method is used to download the api transactions of the specified type. Data to be downloaded is filtered based on the input parameters. The user must either be a part of API-Gateway-Administrators group or must have the 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "downloadAPITransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "duration",
            "in": "query",
            "description": "All the api transactions of the specified type that are older than the value specified are downloaded. Ex: duration='2d'. Possible types are d(days),M(months),y(years), For Example a) 2d means 2days   b) 1M  means 1 month   c) 1y means 1 year. Either one of (startDate&endDate) or duration is a mandatory parameter",
            "required": false,
            "type": "string",
            "x-example": "duration=2d"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "This is a date parameter. All the api transactions of the specified type which satisfies the startDate and endDate criteria are downloaded. Ex: startDate=2017-12-18 00:00:00 and endDate=2017-12-19 00:00:00. Either one of (startDate and endDate) or duration is a mandatory parameter",
            "required": true,
            "type": "string",
            "x-example": "startDate=2017-10-10 00:00:00"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "This is a date parameter. All the api transactions of the specified type which satisfies the startDate and endDate criteria are downloaded. Ex: startDate=2017-12-18 00:00:00 and endDate=2017-12-19 00:00:00. Either one of (startDate and endDate) or duration is a mandatory parameter",
            "required": true,
            "type": "string",
            "x-example": "endtDate=2017-10-10 00:00:00"
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "This parameter is used to specify the event type to be downloaded. Specify eventType=ALL to download all the events. To download events of a specific type, specify the required event type Ex: eventType=transactionalEvents. The available event types are as follows 1.transactionalEvents 2.monitorEvents 3.errorEvents 4.performanceMetrics 5.threatProtectionEvents 6.lifecycleEvents 7.policyViolationEvents 8.auditlogs 9.applicationlogs 10.mediatorTraceSpan 11.serverLogTraceSpan",
            "required": true,
            "type": "string",
            "x-example": "eventType=policyViolationEvents"
          }
        ],
        "responses": {
          "200": {
            "description": "This response indicates that the api transactions zip file is downloaded successfully.",
            "examples": {
              "application/zip": "attachment; filename=\"auditlogs.zip\""
            }
          },
          "400": {
            "description": "This status code indicates that the request URL is invalid."
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided in the request."
          },
          "500": {
            "description": "This response indicates that the server encountered an error while downloading the api transactions. "
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "The DELETE method is used to purge the api transactions of the specified type. Data to be purged is filtered based on the input parameters. This method returns a job id as response and this job id is used to track the job status. See /apitransactions/jobs/{jobId} for more details. The user must either be a part of API-Gateway-Administrators group or must have the 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "purgeAPITransactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "This is an optional query parameter. Sometimes itâ€™s better to take backup before purging the data . If you specify the action value as \"archiveAndPurge\", API Gateway performs an archive before purging the data.",
            "required": false,
            "type": "string",
            "x-example": "action=archiveAndPurge"
          },
          {
            "name": "from",
            "in": "query",
            "description": "This is a date parameter. All the api transactions of the specified type, from the given date, are purged. Ex: from=2017-12-18 00:00:00. Either one of from or duration is a mandatory parameter",
            "required": true,
            "type": "string",
            "x-example": "from=2017-10-10 00:00:00"
          },
          {
            "name": "until",
            "in": "query",
            "description": "This is a date parameter. All the api transactions of the specified type, until the given date, are purged. Ex: until=2017-12-18 00:00:00. Either one of until or duration is a mandatory parameter",
            "required": true,
            "type": "string",
            "x-example": "until=2017-10-10 00:00:00"
          },
          {
            "name": "olderThan",
            "in": "query",
            "description": "All the api transactions of the specified type, that are older than the value specified, are purged. Ex: olderThan='2d'. Possible types are d(days),M(months),y(years), For Example a) 2d means 2days   b) 1M  means 1 month   c) 1y means 1 year",
            "required": false,
            "type": "string",
            "x-example": "olderThan=2d"
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "This parameter is used to specify the event type to be purged. Specify eventType=ALL to purge all the events. To purge a specific event type, specify the required event type. Ex: eventType=transactionalEvents. Ex: eventType=transactionalEvents. The available event types are as follows 1.transactionalEvents 2.monitorEvents 3.errorEvents 4.performanceMetrics 5.threatProtectionEvents 6.lifecycleEvents 7.policyViolationEvents 8.auditlogs 9.applicationlogs 10.mediatorTraceSpan 11.serverLogTraceSpan",
            "required": true,
            "type": "string",
            "x-example": "eventType=ALL"
          }
        ],
        "responses": {
          "202": {
            "description": "This response indicates that the purge process has started and returns a jobId to track the status.",
            "examples": {
              "application/json": "{\r\n    \"jobId\": \"1504177213671\"\r\n}"
            }
          },
          "400": {
            "description": "This status code indicates that the request URL is invalid."
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided in the request."
          },
          "500": {
            "description": "This response indicates that the server encountered an error while purging the api transactions. "
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/apitransactions/archives": {
      "get": {
        "description": "This GET method is used to fetch the details of existing archive files and response of this method is the list of archive file names. Select a filename from the list of archive file names returned by this method and use the POST method /apitransactions/archives/{fileName} to restore.The user must either be a part of API-Gateway-Administrators group or must have 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "listAllArchives",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "ALL"
          }
        ],
        "responses": {
          "200": {
            "description": "This response indicates that the list of archive file names is returned successfully. The response body is the list of archive file names.",
            "examples": {
              "application/json": "{\r\n    \"archiveFiles\": [\r\n        \"default-2017-08-29-1504011306456\",\r\n        \"default-2017-08-29-1504012415981\"\r\n    ]\r\n}"
            }
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided in the request."
          },
          "500": {
            "description": "This response indicates that the server encountered an error while returning the list of archive file names"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "This method is used to archive the runtime events and metrics. Data to be archived is filtered based on the input parameters. This method returns the job id as the response which is used to know the job status. \n\nUse GET /apitransactions/jobs/{jobId} method to know the status and file name, use POST /apitransactions/archives/{fileName} method to restore. The user must either be a part of the API-Gateway-Administrators group or must have the 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "apiTransactionsArchiveBasedOnDuration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "This is a date parameter. All the api transactions of specified type, from the given date, are archived. Ex: from=2017-12-18 00:00:00. Either one of from or duration is a mandatory parameter",
            "required": true,
            "type": "string",
            "x-example": "from=2017-10-10 00:00:00"
          },
          {
            "name": "until",
            "in": "query",
            "description": "This is a date parameter. All the api transactions of specified type, until the given date, are archived. Ex: until=2017-12-18 00:00:00. Either one of until or duration is a mandatory parameter",
            "required": true,
            "type": "string",
            "x-example": "until=2017-10-10 00:00:00"
          },
          {
            "name": "olderThan",
            "in": "query",
            "description": "All the api transactions of specified type that are older than the value specified are archived. Ex: olderThan='2d'. Possible types are d(days),M(months),y(years), For Example a) 2d means 2days b) 1M means 1 month c) 1y means 1 year",
            "required": false,
            "type": "string",
            "x-example": "olderThan=2d"
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "This parameter is used to specify the api transaction type.Specify eventType=ALL to archive all the events. To archive a specific event type, specify the required event type. Ex: eventType=transactionalEvents. The available event types are as follows 1.transactionalEvents 2.monitorEvents 3.errorEvents 4.performanceMetrics 5.threatProtectionEvents 6.lifecycleEvents 7.policyViolationEvents 8.auditlogs 9.applicationlogs 10.mediatorTraceSpan 11.serverLogTraceSpan",
            "required": true,
            "type": "string",
            "x-example": "eventType=ALL"
          }
        ],
        "responses": {
          "202": {
            "description": "This response indicates that the archive process has started and returns a jobId to track the status.",
            "examples": {
              "application/json": "{\r\n    \"jobId\": \"1504177213671\"\r\n}"
            }
          },
          "400": {
            "description": "This status code indicates that the request URL is invalid."
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided in the request."
          },
          "500": {
            "description": "This response indicates that the server encountered an error while archiving the api transactions. "
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/apitransactions/archives/{fileName}": {
      "post": {
        "description": "This method is used to restore the runtime data by specifying the archive file name.For more details see GET /apitransactions/archives/ to know how to get the existing archive file names. This method returns a job id as a response to track the status. The user must either be a part of API-Gateway-Administrators group or must have the 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "restoreData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "This parameter indicates the file name to be restored. Ex: fileName=default-2017-08-29-1504011306456.",
            "required": true,
            "type": "string",
            "x-example": "default-2017-02-09-1486644396751"
          }
        ],
        "responses": {
          "202": {
            "description": "This response indicates that the restore process has started and returns a jobId to track the status.",
            "examples": {
              "application/json": "{\r\n    \"jobId\": \"1504177213671\"\r\n}"
            }
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided in the request."
          },
          "500": {
            "description": "This response indicates that the server encountered an error while restoring the archive file. "
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/apitransactions/jobs": {
      "get": {
        "description": "This method returns a list of pending jobs. Every time you initiate archive, restore, or purge operation you get a job id as a response. You can use the specific job id to query the status of the initiated operation. The user must either be part of the API-Gateway-Administrators group or must have 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "listAllPendingJobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "restore"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "ALL"
          }
        ],
        "responses": {
          "200": {
            "description": "This response indicates that the list of in progress job ids has been returned to the requester.",
            "examples": {
              "application/json": "{\r\n    \"pendingJobs\": [124234,3312312]\r\n}"
            }
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided in the request."
          },
          "500": {
            "description": "This response indicates that the server encountered an error while returning the list of in progress job ids. "
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/apitransactions/jobs/{jobId}": {
      "get": {
        "description": "Use this method to know the status of a specific job. This method returns the status and file name (in case of archive process) as a response. The user must either be a part of the API-Gateway-Administrators group or must have the 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "trackJobStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "This parameter indicates the job Id. Job Id is required to identify and track the status of a job which has been initiated. Ex: jobId=1504011632215",
            "required": true,
            "type": "string",
            "x-example": "1234432412312"
          }
        ],
        "responses": {
          "200": {
            "description": "This response indicates that the status of the job is returned to the requester.",
            "examples": {
              "application/json": "{\r\n    \"status\": \"Completed\",\r\n    \"Filename\": \"default-2017-08-31-1504177207377\"\r\n}"
            }
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided in the request."
          },
          "500": {
            "description": "This response indicates that the server encountered an error while returning the status of the job. "
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/apitransactions/typedefinitions": {
      "get": {
        "description": "Returns the list of runtime event types. The available event types are as follows 1.transactionalEvents 2.monitorEvents 3.errorEvents 4.performanceMetrics 5.threatProtectionEvents 6.lifecycleEvents 7.policyViolationEvents 8.auditlogs 9.applicationlogs. You can use these eventType to scope the archive/purge operation.  The user should be part of API-Gateway-Administrators group or else should have 'Manage purge and restore runtime events' privilege to perform this operation.",
        "operationId": "getMappings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This response indicates that the list of type definitions has been returned to the requestor.",
            "examples": {
              "application/json": "{\r\n    \"Mappings\": [\r\n        \"performanceMetrics\",\r\n        \"monitorEvents\",\r\n        \"transactionalEvents\",\r\n        \"policyViolationEvents\",\r\n        \"errorEvents\",\r\n        \"threatProtectionEvents\",\r\n        \"lifecycleEvents\",\r\n        \"auditLogs\"\r\n,\r\n        \"applicationlogs\"\r\n     ]\r\n}"
            }
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided for the request."
          },
          "500": {
            "description": "This response indicates that the server has encountered an error while returning the list of type definitions. "
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/assets/owner": {
      "post": {
        "description": "This resource is used to change the owner of APIGateway asset",
        "operationId": "changeOwner",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOwnerRequest"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"assetType\":\"*\",\r\n\t\"newOwner\": \"user1\",\r\n\t\"currentOwner\": \"Administrator\"\r\n}\r\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the ownership has been changed for the displayed assets",
            "examples": {
              "application/json": "{\r\n\t\"message\":\"Assets have been changed to user1\",\r\n\t\"apis\": [\"apiId1\", \"apiId2\"]\r\n\t\"application\": [\"appId1\", \"appId2\"]\r\n}\r\n"
            },
            "schema": {
              "$ref": "#/definitions/ChangeOwnerResponse"
            }
          },
          "400": {
            "description": "Given payload is invalid"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/assets/team": {
      "post": {
        "description": "This resource is used to change the team of APIGateway asset",
        "operationId": "changeTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOwnerRequest"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"assetType\":\"API\",\r\n\t\"assetIds\":[\"3e60f075-9415-4974-b9d8-f4a2180a3a44\"],\r\n\t\r\n\t\"newTeams\":[\"API-Gateway-Providers\"]\r\n}\r\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the team has been changed for the displayed assets",
            "examples": {
              "application/json": "{\r\n\t\"message\":\"The assets have been assigned to the following teams : [Administrators, API-Gateway-Providers]\",\r\n\t\"api\":\"[3e60f075-9415-4974-b9d8-f4a2180a3a44]\"}\r\n"
            },
            "schema": {
              "$ref": "#/definitions/ChangeOwnerResponse"
            }
          },
          "400": {
            "description": "Given payload is invalid"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/accountLockSettings": {
      "get": {
        "description": "Retrieves the account lock settings configured in API Gateway",
        "operationId": "getAccountLockSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"blockDuration\": \"15\",\r\n  \"isEnabled\": \"true\",\r\n  \"timeIntervalUnit\": \"Minutes\",\r\n  \"timeInterval\": \"100\",\r\n  \"maximumLoginAttempts\": \"2\",\r\n  \"blockDurationUnit\": \"Minutes\",\r\n  \"appliesToUsers\": \"allUsersExceptPredefinedUsers\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/AccountLockSettings"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "Saves the account lock settings in API Gateway",
        "operationId": "saveAccountLockSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountLockSettings"
            },
            "x-examples": {
              "application/json": "{\r\n  \"blockDuration\": \"15\",\r\n  \"isEnabled\": \"true\",\r\n  \"timeIntervalUnit\": \"Minutes\",\r\n  \"timeInterval\": \"100\",\r\n  \"maximumLoginAttempts\": \"2\",\r\n  \"blockDurationUnit\": \"Minutes\",\r\n  \"appliesToUsers\": \"allUsersExceptPredefinedUsers\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"blockDuration\": \"15\",\r\n  \"isEnabled\": \"true\",\r\n  \"timeIntervalUnit\": \"Minutes\",\r\n  \"timeInterval\": \"100\",\r\n  \"maximumLoginAttempts\": \"2\",\r\n  \"blockDurationUnit\": \"Minutes\",\r\n  \"appliesToUsers\": \"allUsersExceptPredefinedUsers\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/AccountLockSettings"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/analyticsDataStoreDestinationConfig": {
      "get": {
        "operationId": "getAnalyticsDataStoreAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnalyticsDataStoreDestination"
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "operationId": "saveAnalyticsDataStoreAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyticsDataStoreDestination"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AnalyticsDataStoreDestination"
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "405": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/apiCallBackSettings": {
      "get": {
        "description": "This method retrieves the API callback processor settings from API Gateway.",
        "operationId": "getAPICallbackProcessorSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the API callback processor settings is successfully retrieved from API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"configuration\": {\r\n        \"processCallbackRequests\": true,\r\n        \"allowCallBackRequestsHTTPsAccessOnly\": true,\r\n        \"allowCallbackRequestAccessToAllowedIPs\": false,\r\n        \"allowedIPs\": []\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CallbackProcessorSettings"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: apiCallBackSettings.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user did not provide any user credential or the user is not authorized to retrieve API callback processor settings."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This method updates or creates API callback processor settings in API Gateway. The user should have Manage general administration configurations privilege to update the API callback processor settings.",
        "operationId": "saveAPICallbackProcessorSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallbackProcessorSettings"
            },
            "x-examples": {
              "application/json": "{\r\n    \"configuration\": {\r\n        \"processCallbackRequests\": true,\r\n        \"allowCallBackRequestsHTTPsAccessOnly\": true,\r\n        \"allowCallbackRequestAccessToAllowedIPs\": false,\r\n        \"allowedIPs\": []\r\n    }\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the API callback processor settings has been successfully updated in API Gateway, and the updated list of API callback processor settings is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"configuration\": {\r\n        \"processCallbackRequests\": true,\r\n        \"allowCallBackRequestsHTTPsAccessOnly\": true,\r\n        \"allowCallbackRequestAccessToAllowedIPs\": false,\r\n        \"allowedIPs\": []\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CallbackProcessorSettings"
            }
          },
          "400": {
            "description": "This status code indicates that the the user sends an empty or invalid JSON payload."
          },
          "401": {
            "description": "This status code indicates that the user did not provide any user credential or the user is not authorized to update API callback processor settings."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/apiPortalDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the API Portal destination configurations. API Gateway can publish events and performance metrics data. By default, error events, lifecycle events, policy violation event, and performance data are published to API Portal.",
        "operationId": "getAPIPortalAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the API Portal destination configurations are retrieved successfully.",
            "examples": {
              "application/json": "{\r\n\t\"sendPolicyViolationEvent\": \"true\",\r\n\t\"metricsPublishInterval\": \"10\",\r\n\t\"sendErrorEvent\": \"true\",\r\n\t\"sendPerformanceMetrics\": \"true\",\r\n\t\"sendLifecycleEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid."
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the API Portal destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the API Portal destination in API Gateway.",
        "operationId": "saveAPIPortalAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Destination"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"sendPolicyViolationEvent\": \"true\",\r\n\t\"metricsPublishInterval\": \"10\",\r\n\t\"sendErrorEvent\": \"true\",\r\n\t\"sendPerformanceMetrics\": \"true\",\r\n\t\"sendLifecycleEvent\": \"true\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the API Portal destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n\t\"configId\": \"apiPortalDestinationConfig\",\r\n\t\"sendPolicyViolationEvent\": \"true\",\r\n\t\"metricsPublishInterval\": \"10\",\r\n\t\"sendErrorEvent\": \"true\",\r\n\t\"sendPerformanceMetrics\": \"true\",\r\n\t\"sendLifecycleEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/auditlogDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the Transaction Logger destination in API Gateway. Transaction Logger captures the API runtime invocations performed in API Gateway. The transaction logger data is written to a file or a database based on the configurations. Transactions events are written to the transaction logger only when the Transaction Logger is selected as a destination in Log Invocation Policy.",
        "operationId": "getAuditLogAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the Transaction Logger destination configurations are retrieved successfully.",
            "examples": {
              "application/json": "{\r\n    \"name\": \"API Gateway Transaction Logger\",\r\n    \"enabled\": \"false\",\r\n    \"mode\": \"synchronous\",\r\n    \"guaranteed\": \"false\",\r\n    \"destination\": \"file\",\r\n    \"maximumQueueSize\": \"100000\",\r\n    \"maximumRetries\": \"3\",\r\n    \"waitBetweenRetries\": \"5\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/AuditLogDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: auditlogDestinationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the Transaction Logger destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the Transaction Logger destination in API Gateway.",
        "operationId": "saveAuditLogAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditLogDestination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"name\": \"API Gateway Transaction Logger\",\r\n    \"enabled\": \"false\",\r\n    \"mode\": \"synchronous\",\r\n    \"guaranteed\": \"false\",\r\n    \"destination\": \"file\",\r\n    \"maximumQueueSize\": \"100000\",\r\n    \"maximumRetries\": \"3\",\r\n    \"waitBetweenRetries\": \"5\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the Transaction Logger destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"name\": \"API Gateway Transaction Logger\",\r\n    \"enabled\": \"false\",\r\n    \"mode\": \"synchronous\",\r\n    \"guaranteed\": \"false\",\r\n    \"destination\": \"file\",\r\n    \"maximumQueueSize\": \"100000\",\r\n    \"maximumRetries\": \"3\",\r\n    \"waitBetweenRetries\": \"5\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/AuditLogDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for Audit Log destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: auditlogDestinationConfig\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/cache": {
      "get": {
        "operationId": "getCacheConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the cache configurations are successfully retrieved",
            "schema": {
              "$ref": "#/definitions/GatewayCacheConfig"
            }
          },
          "400": {
            "description": "This status code indicates that the user generated an invalid request"
          },
          "401": {
            "description": "This status code indicates that the user passed invalid credentials"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "operationId": "updateCacheConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the cache configurations are updated successfully.",
            "schema": {
              "$ref": "#/definitions/GatewayCacheConfig"
            }
          },
          "400": {
            "description": "This status code indicates that the cache configuratoins payload is incorrect."
          },
          "401": {
            "description": "This status code indicates that the user did not provide the correct credentials to update the cache configuration"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/centraSiteDestinationCommunicationConfig": {
      "get": {
        "description": "The method retrieves the communication details of the CentraSite destination in API Gateway. API Gateway can publish events and metrics to the configured CentraSite destination.",
        "operationId": "getCentraSiteCommunicationAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the Communication details for the CentraSite destination configurations are retrieved successfully.",
            "examples": {
              "application/json": "{\r\n    \"protocol\": \"tcp\",\r\n    \"hostName\": \"localhost\",\r\n    \"targetName\": \"cstarget\",\r\n    \"UDDIPort\": \"53307\",\r\n    \"userName\": \"Admin\",\r\n    \"password\": \"***\",\r\n    \"gatewayAssetId\": \"334-3443-sd34\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CSCommunicationDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: centraSiteDestinationCommunicationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the Communication details for the CentraSite destination."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the Communication details of the CentraSite destination in API Gateway.",
        "operationId": "saveCentraSiteCommunicationAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CSCommunicationDestination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"protocol\": \"tcp\",\r\n    \"hostName\": \"localhost\",\r\n    \"targetName\": \"cstarget\",\r\n    \"UDDIPort\": \"53307\",\r\n    \"userName\": \"Admin\",\r\n    \"password\": \"***\",\r\n    \"gatewayAssetId\": \"334-3443-sd34\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the CentraSite Communication destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"protocol\": \"tcp\",\r\n    \"hostName\": \"localhost\",\r\n    \"targetName\": \"cstarget\",\r\n    \"UDDIPort\": \"53307\",\r\n    \"userName\": \"Admin\",\r\n    \"password\": \"***\",\r\n    \"gatewayAssetId\": \"334-3443-sd34\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CSCommunicationDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for Audit Log destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: centraSiteDestinationCommunicationConfigg\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/centraSiteDestinationSNMPConfig": {
      "get": {
        "description": "The method retrieves the SNMP details of the CentraSite destination in API Gateway. API Gateway can publish events and metrics to the configured CentraSite destination.",
        "operationId": "getCentraSiteSNMPAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the CentraSite SNMP destination configurations are retrieved successfully.",
            "examples": {
              "application/json": "{\r\n    \"sendTRAPsToCentrasite\": \"false\",\r\n    \"hostName\": \"localhost\",\r\n    \"port\": \"8181\",\r\n    \"transport\": \"tcp\",\r\n    \"userName\": \"Administrator\",\r\n    \"authorizationPassword\": \"*****\",\r\n    \"authorizationProtocol\": \"MD5\",\r\n    \"privacyPassword\": \"*****\",\r\n    \"privacyProtocol\": \"DES\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CSSNMPDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: centraSiteDestinationSNMPConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the CentraSite SNMP destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the CentraSite SNMP destination in API Gateway.",
        "operationId": "saveCentraSiteSNMPAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CSSNMPDestination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"sendTRAPsToCentrasite\": \"false\",\r\n    \"hostName\": \"localhost\",\r\n    \"port\": \"8181\",\r\n    \"transport\": \"tcp\",\r\n    \"userName\": \"Administrator\",\r\n    \"authorizationPassword\": \"*****\",\r\n    \"authorizationProtocol\": \"MD5\",\r\n    \"privacyPassword\": \"*****\",\r\n    \"privacyProtocol\": \"DES\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the CentraSite SNMP destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"sendTRAPsToCentrasite\": \"false\",\r\n    \"hostName\": \"localhost\",\r\n    \"port\": \"8181\",\r\n    \"transport\": \"tcp\",\r\n    \"userName\": \"Administrator\",\r\n    \"authorizationPassword\": \"*****\",\r\n    \"authorizationProtocol\": \"MD5\",\r\n    \"privacyPassword\": \"*****\",\r\n    \"privacyProtocol\": \"DES\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CSSNMPDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for Audit Log destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: centraSiteDestinationSNMPConfigg\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/customContentTypes": {
      "get": {
        "description": "This REST method is used to get the configured custom content types in API Gateway. Custom content types can be defined for base types XML,JSON and Text.These Custom types can be then used for payload processing in policies like Content based routing,Identify and access and Conditional error processing",
        "operationId": "getCustomContentTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This response returns all the configured custom content types in API Gateway. The response is a set of key/value pair where key indicates the custom content type and value indicates the base type. The value can be application/xml or application/json or text/xml",
            "examples": {
              "application/json": "{\r\n   \"application/myorg+json\": \"application/json\",\r\n   \"application/myorg+xml\" : \"application/xml\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CustomContentType"
            }
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided for the request."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This REST method is used to update the custom content types for API Gateway.The response is a set of key/value pair where key indicates the custom content type and value indicates the base type. The value can be application/xml or application/json or text/xml",
        "operationId": "saveCustomContentTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomContentType"
            },
            "x-examples": {
              "application/json": "{\r\n    \"application/myorg+json\": \"application/json\", \r\n   \"application/myorg+xml\" : \"application/xml\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response returns all the configured custom content types in API Gateway. The response is a set of key/value pair where key indicates the custom content type and value indicates the base type. The value can be application/xml or application/json or text/xml",
            "examples": {
              "application/json": "{\r\n    \"application/myorg+json\": \"application/json\", \r\n   \"application/myorg+xml\" : \"application/xml\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/CustomContentType"
            }
          },
          "400": {
            "description": "This status code indicates that the user did not provide proper values for the base content type. The only allowed values are application/xml,application/json,text/xml"
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided for the request."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/denyByIPForFailedAuthConfig": {
      "get": {
        "description": "Retrieves the configuration of gloabal IP access setting for authentication based restrictions in API Gateway",
        "operationId": "getDenyByIPForFailedAuthConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n \"whenLimitExceeds\": \"BLOCK\",\r\n  \"maximumFailedAuthRequests\": \"6\",\r\n  \"maximumFailedAuthRequestsDuration\": \"60\",\r\n  \"deniedIPList\":[\"10.2.3.4\",\"11.2.3.4\"],\r\n  \"isEnabled\": \"true\",\r\n  \"blockIntervalInSeconds\": \"1\"}"
            },
            "schema": {
              "$ref": "#/definitions/DenyByIPForFailedAuthConfig"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "Saves the global IP access setting for authentication based restriction settings in API Gateway",
        "operationId": "saveDenyByIPForFailedAuthConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DenyByIPForFailedAuthConfig"
            },
            "x-examples": {
              "application/json": "{\r\n \"whenLimitExceeds\": \"BLOCK\",\r\n  \"maximumFailedAuthRequests\": \"6\",\r\n  \"maximumFailedAuthRequestsDuration\": \"60\",\r\n  \"deniedIPList\":[\"10.2.3.4\",\"11.2.3.4\"],\r\n  \"isEnabled\": \"true\",\r\n  \"blockIntervalInSeconds\": \"1\"}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n \"whenLimitExceeds\": \"BLOCK\",\r\n  \"maximumFailedAuthRequests\": \"6\",\r\n  \"maximumFailedAuthRequestsDuration\": \"60\",\r\n  \"deniedIPList\":[\"10.2.3.4\",\"11.2.3.4\"],\r\n  \"isEnabled\": \"true\",\r\n  \"blockIntervalInSeconds\": \"1\"}"
            },
            "schema": {
              "$ref": "#/definitions/DenyByIPForFailedAuthConfig"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/desDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the Digital Events destination in API Gateway. Digital Event Services (DES) enables API Gateway to communicate by exchanging digital events. API Gateway can publish runtime events(example: policy violation,log invocation, error events etc), design time events (example: audit log events) and metrics to the configured DES destination.",
        "operationId": "getDigitalEventsAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the DES destination configurations are retrieved successfully. SendErrorEvent indicates whether API Gateway has to send error events to API Gateway destination. SendLifecycleEvent indicates whether API Gateway has to send lifecycle events to API Gateway destination. SendPolicyViolationEvent indicates whether API Gateway has to send policy violation events to API Gateway destination. SendPerformanceMetrics indicates whether API Gateway has to send performance metrics to API Gateway destination. MetricsPublishInterval indicates the interval at which the performance metrics will be published (value has to be between 1-60), default being 60. sendAuditlogAliasManagementEvent indicates whether API Gateway has to send Alias Management related audit logs to API Gateway destination. sendAuditlogPackageManagementEvent indicates whether API Gateway has to send Package Management related audit logs to API Gateway destination. sendAuditlogRuntimeDataManagementEvent indicates whether API Gateway has to send RuntimeData Management related audit logs to API Gateway destination. sendAuditlogPolicyManagementEvent indicates whether API Gateway has to send Policy Management related audit logs to API Gateway destination. sendAuditlogPlanManagementEvent indicates whether API Gateway has to send Plan Management related audit logs to API Gateway destination.  sendAuditlogApprovalManagementEvent indicates whether API Gateway has to send Approval Management related audit logs to API Gateway destination. sendAuditlogUserManagementEvent indicates whether API Gateway has to send User Management related audit logs to API Gateway destination. sendAuditlogApplicationManagementEvent indicates whether API Gateway has to send Application Management related audit logs to API Gateway destination. sendAuditlogAdministrationEvent indicates whether API Gateway has to send Administration related audit logs to API Gateway destination. sendAuditlogGroupManagementEvent indicates whether API Gateway has to send Group Management related audit logs to API Gateway destination. sendAuditlogAccessProfileManagementEvent indicates whether API Gateway has to send Team Management related audit logs to API Gateway destination. sendAuditlogAPIManagementEvent indicates whether API Gateway has to send API Management related audit logs to API Gateway destination. sendAuditlogPromotionManagementEvent indicates whether API Gateway has to send Promotion Management related audit logs to API Gateway destination.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: desDestinationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the Digital Events destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the Digital Events destination in API Gateway.",
        "operationId": "saveDigitalEventsAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Destination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the Digital Events destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for Digital Events destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: desDestinationConfig\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/elasticsearchDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the Elasticsearch destination in API Gateway. API Gateway can publish runtime events(example: policy violation, log invocation, error events etc), design time events (example: audit log events) and metrics to the configured Elasticsearch destination.",
        "operationId": "getElasticsearchAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the Elastic search destination configurations are retrieved successfully. SendErrorEvent indicates whether API Gateway has to send error events to API Gateway destination. SendLifecycleEvent indicates whether API Gateway has to send lifecycle events to API Gateway destination. SendPolicyViolationEvent indicates whether API Gateway has to send policy violation events to API Gateway destination. SendPerformanceMetrics indicates whether API Gateway has to send performance metrics to API Gateway destination. MetricsPublishInterval indicates the interval at which the performance metrics will be published (value has to be between 1-60), default being 60. sendAuditlogAliasManagementEvent indicates whether API Gateway has to send Alias Management related audit logs to API Gateway destination. sendAuditlogPackageManagementEvent indicates whether API Gateway has to send Package Management related audit logs to API Gateway destination. sendAuditlogRuntimeDataManagementEvent indicates whether API Gateway has to send RuntimeData Management related audit logs to API Gateway destination. sendAuditlogPolicyManagementEvent indicates whether API Gateway has to send Policy Management related audit logs to API Gateway destination. sendAuditlogPlanManagementEvent indicates whether API Gateway has to send Plan Management related audit logs to API Gateway destination.  sendAuditlogApprovalManagementEvent indicates whether API Gateway has to send Approval Management related audit logs to API Gateway destination. sendAuditlogUserManagementEvent indicates whether API Gateway has to send User Management related audit logs to API Gateway destination. sendAuditlogApplicationManagementEvent indicates whether API Gateway has to send Application Management related audit logs to API Gateway destination. sendAuditlogAdministrationEvent indicates whether API Gateway has to send Administration related audit logs to API Gateway destination. sendAuditlogGroupManagementEvent indicates whether API Gateway has to send Group Management related audit logs to API Gateway destination. sendAuditlogAccessProfileManagementEvent indicates whether API Gateway has to send Team Management related audit logs to API Gateway destination. sendAuditlogAPIManagementEvent indicates whether API Gateway has to send API Management related audit logs to API Gateway destination. sendAuditlogPromotionManagementEvent indicates whether API Gateway has to send Promotion Management related audit logs to API Gateway destination.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ElasticsearchDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: elasticsearchdestinationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the Elasticsearch destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the Elasticsearch destination in API Gateway.",
        "operationId": "saveElasticsearchAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ElasticsearchDestination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the Elasticsearch destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ElasticsearchDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for Elasticsearch destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: elasticsearchDestinationConfigg\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/emailDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the Email destination in API Gateway. API Gateway can send alerts to the email ID specified either in the Log Invocation, Monitor Service Performance, Monitor Service Level Agreement, (or) Throttling Traffic Optimization policies through the configured Email destination.",
        "operationId": "getEmailAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the Email destination configurations are retrieved successfully.",
            "examples": {
              "application/json": "{\r\n    \"smtpServer\": \"mailhost\",\r\n    \"port\": \"26\",\r\n    \"userName\": \"\",\r\n    \"password\": \"\",\r\n    \"tls\": \"\",\r\n    \"truststoreAlias\": \"\",\r\n    \"internalEmail\": \"\",\r\n    \"serviceEmail\": \"\",\r\n    \"fromEmail\": \"a@example.com\",\r\n    \"defaultEmailCharset\": \"\",\r\n    \"testRecipient\": \"b@example.com\",\r\n    \"logInvocationSubject\": \"Log Invocation mail\",\r\n    \"logInvocationContent\": \"The transaction event\",\r\n    \"monitorSPSubject\": \"Monitor Service Performance mail\",\r\n    \"monitorSPContent\": \"The monitoring event\",\r\n    \"monitorSLASubject\": \"Monitor SLA mail\",\r\n    \"monitorSLAContent\": \"The monitoring event\",\r\n    \"throttlingSubject\": \"Throttling mail\",\r\n    \"throttlingContent\": \"The Throttling event\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/EmailDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: emailDestinationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user retrieving the Email destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the Email destination in API Gateway.",
        "operationId": "saveEmailAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailDestination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"smtpServer\": \"mailhost\",\r\n    \"port\": \"26\",\r\n    \"userName\": \"\",\r\n    \"password\": \"\",\r\n    \"tls\": \"\",\r\n    \"truststoreAlias\": \"\",\r\n    \"internalEmail\": \"\",\r\n    \"serviceEmail\": \"\",\r\n    \"fromEmail\": \"a@example.com\",\r\n    \"defaultEmailCharset\": \"\",\r\n    \"testRecipient\": \"b@example.com\",\r\n    \"logInvocationSubject\": \"Log Invocation mail\",\r\n    \"logInvocationContent\": \"The transaction event\",\r\n    \"monitorSPSubject\": \"Monitor Service Performance mail\",\r\n    \"monitorSPContent\": \"The monitoring event\",\r\n    \"monitorSLASubject\": \"Monitor SLA mail\",\r\n    \"monitorSLAContent\": \"The monitoring event\",\r\n    \"throttlingSubject\": \"Throttling mail\",\r\n    \"throttlingContent\": \"The Throttling event\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the Email destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"smtpServer\": \"mailhost\",\r\n    \"port\": \"26\",\r\n    \"userName\": \"\",\r\n    \"password\": \"\",\r\n    \"tls\": \"\",\r\n    \"truststoreAlias\": \"\",\r\n    \"internalEmail\": \"\",\r\n    \"serviceEmail\": \"\",\r\n    \"fromEmail\": \"a@example.com\",\r\n    \"defaultEmailCharset\": \"\",\r\n    \"testRecipient\": \"b@example.com\",\r\n    \"logInvocationSubject\": \"Log Invocation mail\",\r\n    \"logInvocationContent\": \"The transaction event\",\r\n    \"monitorSPSubject\": \"Monitor Service Performance mail\",\r\n    \"monitorSPContent\": \"The monitoring event\",\r\n    \"monitorSLASubject\": \"Monitor SLA mail\",\r\n    \"monitorSLAContent\": \"The monitoring event\",\r\n    \"throttlingSubject\": \"Throttling mail\",\r\n    \"throttlingContent\": \"The Throttling event\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/EmailDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for Email destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: emailDestinationConfig\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/errorProcessing": {
      "get": {
        "description": "This REST method is used to get the configured error template and the value of the property - sendNativeProviderFault,which enables the server to forward the native error as it is.",
        "operationId": "getErrorProcessingDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This response returns the current fault message templates and the native fault configuration",
            "examples": {
              "application/json": "{\r\n    \"sendNativeProviderFault\": \"false\",\r\n    \"defaultErrorMessage\": \"API Gateway encountered an error. Error Message: $ERROR_MESSAGE. Request Details: Service - $SERVICE, Operation - $OPERATION, Invocation Time:$TIME, Date:$DATE,  Client IP - $CLIENT_IP, User - $USER and Application:$CONSUMER_APPLICATION.\",\r\n    \"fallbackErrorMessage\": \"API Gateway encountered an error. Error Message: $ERROR_MESSAGE. Request Details: Service - $SERVICE, Operation - $OPERATION, Invocation Time:$TIME, Date:$DATE,  Client IP - $CLIENT_IP, User - $USER and Application:$CONSUMER_APPLICATION\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ErrorProcessing"
            }
          },
          "400": {
            "description": "This status code indicates the request payload is not correct and corresponding error details can be seen in the response body"
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided for the request."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This REST method is used to update the default error template with any custom templates and the value of the property - sendNativeProviderFault.",
        "operationId": "saveErrorProcessingDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorProcessing"
            },
            "x-examples": {
              "application/json": "{\r\n    \"sendNativeProviderFault\": \"false\",\r\n    \"defaultErrorMessage\": \"API Gateway encountered an error. Error Message: $ERROR_MESSAGE. Request Details: Service - $SERVICE, Operation - $OPERATION, Invocation Time:$TIME, Date:$DATE,  Client IP - $CLIENT_IP, User - $USER and Application:$CONSUMER_APPLICATION.\",\r\n    \"fallbackErrorMessage\": \"API Gateway encountered an error. Error Message: $ERROR_MESSAGE. Request Details: Service - $SERVICE, Operation - $OPERATION, Invocation Time:$TIME, Date:$DATE,  Client IP - $CLIENT_IP, User - $USER and Application:$CONSUMER_APPLICATION\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that API Gateway has successfully updated the API Fault template and the updated template can be found in the response body",
            "examples": {
              "application/json": "{\r\n    \"sendNativeProviderFault\": \"false\",\r\n    \"defaultErrorMessage\": \"API Gateway encountered an error. Error Message: $ERROR_MESSAGE. Request Details: Service - $SERVICE, Operation - $OPERATION, Invocation Time:$TIME, Date:$DATE,  Client IP - $CLIENT_IP, User - $USER and Application:$CONSUMER_APPLICATION.\",\r\n    \"fallbackErrorMessage\": \"API Gateway encountered an error. Error Message: $ERROR_MESSAGE. Request Details: Service - $SERVICE, Operation - $OPERATION, Invocation Time:$TIME, Date:$DATE,  Client IP - $CLIENT_IP, User - $USER and Application:$CONSUMER_APPLICATION\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ErrorProcessing"
            }
          },
          "400": {
            "description": "This status code indicates the request payload is not correct and corresponding error details can be seen in the response body"
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided for the request."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/gatewayDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the API Gateway destination. API Gateway can publish runtime events(example: policy violation, log invocation, error events etc), design time events (example: audit log events) and metrics data. By default, error events, lifecycle events, policy violation event, audit logs and performance data are published to API Gateway.",
        "operationId": "getGatewayAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the API Gateway destination configurations are retrieved successfully. SendErrorEvent indicates whether API Gateway has to send error events to API Gateway destination. SendLifecycleEvent indicates whether API Gateway has to send lifecycle events to API Gateway destination. SendPolicyViolationEvent indicates whether API Gateway has to send policy violation events to API Gateway destination. SendPerformanceMetrics indicates whether API Gateway has to send performance metrics to API Gateway destination. MetricsPublishInterval indicates the interval at which the performance metrics will be published (value has to be between 1-60), default being 60. sendAuditlogAliasManagementEvent indicates whether API Gateway has to send Alias Management related audit logs to API Gateway destination. sendAuditlogPackageManagementEvent indicates whether API Gateway has to send Package Management related audit logs to API Gateway destination. sendAuditlogRuntimeDataManagementEvent indicates whether API Gateway has to send RuntimeData Management related audit logs to API Gateway destination. sendAuditlogPolicyManagementEvent indicates whether API Gateway has to send Policy Management related audit logs to API Gateway destination. sendAuditlogPlanManagementEvent indicates whether API Gateway has to send Plan Management related audit logs to API Gateway destination.  sendAuditlogApprovalManagementEvent indicates whether API Gateway has to send Approval Management related audit logs to API Gateway destination. sendAuditlogUserManagementEvent indicates whether API Gateway has to send User Management related audit logs to API Gateway destination. sendAuditlogApplicationManagementEvent indicates whether API Gateway has to send Application Management related audit logs to API Gateway destination. sendAuditlogAdministrationEvent indicates whether API Gateway has to send Administration related audit logs to API Gateway destination. sendAuditlogGroupManagementEvent indicates whether API Gateway has to send Group Management related audit logs to API Gateway destination. sendAuditlogAccessProfileManagementEvent indicates whether API Gateway has to send Team Management related audit logs to API Gateway destination. sendAuditlogAPIManagementEvent indicates whether API Gateway has to send API Management related audit logs to API Gateway destination. sendAuditlogPromotionManagementEvent indicates whether API Gateway has to send Promotion Management related audit logs to API Gateway destination.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: gatewayDestinationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the API Gateway destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the API Gateway destination in API Gateway.",
        "operationId": "saveGatewayAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Destination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the API Gateway destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for API Gateway destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: gatewayDestinationConfig\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/jdbcDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the Database destination in API Gateway. API Gateway can publish runtime events(example: policy violation, log invocation, error events etc), design time events (example: audit log events) and metrics to the configured Database destination.",
        "operationId": "getDatabaseAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the JDBC destination configurations are retrieved successfully. SendErrorEvent indicates whether API Gateway has to send error events to API Gateway destination. SendLifecycleEvent indicates whether API Gateway has to send lifecycle events to API Gateway destination. SendPolicyViolationEvent indicates whether API Gateway has to send policy violation events to API Gateway destination. SendPerformanceMetrics indicates whether API Gateway has to send performance metrics to API Gateway destination. MetricsPublishInterval indicates the interval at which the performance metrics will be published (value has to be between 1-60), default being 60. sendAuditlogAliasManagementEvent indicates whether API Gateway has to send Alias Management related audit logs to API Gateway destination. sendAuditlogPackageManagementEvent indicates whether API Gateway has to send Package Management related audit logs to API Gateway destination. sendAuditlogRuntimeDataManagementEvent indicates whether API Gateway has to send RuntimeData Management related audit logs to API Gateway destination. sendAuditlogPolicyManagementEvent indicates whether API Gateway has to send Policy Management related audit logs to API Gateway destination. sendAuditlogPlanManagementEvent indicates whether API Gateway has to send Plan Management related audit logs to API Gateway destination.  sendAuditlogApprovalManagementEvent indicates whether API Gateway has to send Approval Management related audit logs to API Gateway destination. sendAuditlogUserManagementEvent indicates whether API Gateway has to send User Management related audit logs to API Gateway destination. sendAuditlogApplicationManagementEvent indicates whether API Gateway has to send Application Management related audit logs to API Gateway destination. sendAuditlogAdministrationEvent indicates whether API Gateway has to send Administration related audit logs to API Gateway destination. sendAuditlogGroupManagementEvent indicates whether API Gateway has to send Group Management related audit logs to API Gateway destination. sendAuditlogAccessProfileManagementEvent indicates whether API Gateway has to send Team Management related audit logs to API Gateway destination. sendAuditlogAPIManagementEvent indicates whether API Gateway has to send API Management related audit logs to API Gateway destination. sendAuditlogPromotionManagementEvent indicates whether API Gateway has to send Promotion Management related audit logs to API Gateway destination.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: jdbcDestinationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the Database destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the Database destination in API Gateway.",
        "operationId": "saveDatabaseAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Destination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the Database destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"sendAuditlogAliasManagementEvent\": \"true\",\r\n    \"sendLifecycleEvent\": \"true\",\r\n    \"sendAuditlogPackageManagementEvent\": \"true\",\r\n    \"sendAuditlogRuntimeDataManagementEvent\": \"true\",\r\n    \"sendAuditlogPolicyManagementEvent\": \"true\",\r\n    \"sendAuditlogPlanManagementEvent\": \"true\",\r\n    \"sendAuditlogApprovalManagementEvent\": \"true\",\r\n    \"sendAuditlogUserManagementEvent\": \"true\",\r\n    \"sendPerformanceMetrics\": \"true\",\r\n    \"sendAuditlogApplicationManagementEvent\": \"true\",\r\n    \"sendAuditlogAdministrationEvent\": \"true\",\r\n    \"sendPolicyViolationEvent\": \"true\",\r\n    \"sendErrorEvent\": \"true\",\r\n    \"sendAuditlogGroupManagementEvent\": \"true\",\r\n    \"metricsPublishInterval\": \"60\",\r\n    \"sendAuditlogAccessProfileManagementEvent\": \"true\",\r\n    \"sendAuditlogAPIManagementEvent\": \"true\",\r\n    \"sendAuditlogPromotionManagementEvent\": \"true\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Destination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for Database destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: jdbcDestinationConfig\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/keystore": {
      "get": {
        "description": "The method retrieves the details of the default keystore, truststore and alias settings in API Gateway. You might want to configure API Gateway to refer to a default keystore, truststore, or both, before deploying any SOAP message flows that require signature, encryption, X.509 authentication, and so on, as configured in the Inbound Authentication - Message policy. The default keystore and truststore are that you want API Gateway to use for the incoming secured messages",
        "operationId": "getKeyStoreTrustore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the default keystore, truststore and alias configurations are retrieved successfully. ",
            "examples": {
              "application/json": "{\r\n\t\"keystoreName\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"signingAlias\": \"ssos\",\r\n\t\"truststoreName\": \"DEFAULT_IS_TRUSTSTORE\",\r\n\t\"outboundKeystoreName\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"outboundKeyAlias\": \"ssos\",\r\n\t\"outboundTruststoreName\": \"DEFAULT_IS_TRUSTSTORE\"}"
            },
            "schema": {
              "$ref": "#/definitions/KeystoreTruststore"
            }
          },
          "400": {
            "description": "This status code indicates that the keystore not mentioned in API access uri path.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \"Missing mandatory field configId in request.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving this configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the default keystore, truststore and alias configuration in API Gateway.",
        "operationId": "saveKeystoreTruststore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeystoreTruststore"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"keystoreName\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"signingAlias\": \"ssos\",\r\n\t\"truststoreName\": \"DEFAULT_IS_TRUSTSTORE\",\r\n\t\"outboundKeystoreName\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"outboundKeyAlias\": \"ssos\",\r\n\t\"outboundTruststoreName\": \"DEFAULT_IS_TRUSTSTORE\"}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the default keystore, truststore and alias configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"configId\": \"keystore\",\r\n    \"keystoreName\": \"DEFAULT_IS_KEYSTORE\",\r\n    \"signingAlias\": \"ssos\",\r\n    \"truststoreName\": \"DEFAULT_IS_TRUSTSTORE\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/KeystoreTruststore"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage security configurations\" functional privilege to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/ldapConfig": {
      "get": {
        "description": "Retrieves the LDAP configuration settings configured in the API Gateway",
        "operationId": "getLdapConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"ldapConfig\": {\r\n    \"cacheSize\": \"10\",\r\n    \"cacheTTL\": \"60\",\r\n    \"provider\": \"LDAP\",\r\n    \"ldapDirectoryList\": [\r\n      {\r\n        \"url\": \"ldap://abc.xyz.org:3128\",\r\n        \"principal\": \"CN=alias, OU=User,DC=xyz,DC=org\",\r\n        \"password\": \"cGFzc3dvcmQ=\",\r\n        \"timeout\": \"5\",\r\n        \"poolMin\": \"0\",\r\n        \"poolMax\": \"10\",\r\n        \"useaf\": false,\r\n        \"dnPrefix\": null,\r\n        \"dnSuffix\": null,\r\n        \"uidProp\": \"uidAccountName\",\r\n        \"userRootDn\": \"OU=User,DC=xyz,DC=org\",\r\n        \"group\": \"Administrators\",\r\n        \"memberAttribute\": \"member\",\r\n        \"groupIdProperty\": \"gidAccountName\",\r\n        \"groupRootDN\": \"OU=Groups,DC=xyz,DC=org\",\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/InputLdapConfiguration"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "Saves the LDAP configuration settings in the API Gateway",
        "operationId": "saveLdapConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputLdapConfiguration"
            },
            "x-examples": {
              "application/json": "{\r\n  \"ldapConfig\": {\r\n    \"cacheSize\": \"10\",\r\n    \"cacheTTL\": \"60\",\r\n    \"provider\": \"LDAP\",\r\n    \"ldapDirectoryList\": [\r\n      {\r\n        \"url\": \"ldap://abc.xyz.org:3128\",\r\n        \"principal\": \"CN=alias, OU=User,DC=xyz,DC=org\",\r\n        \"password\": \"cGFzc3dvcmQ\",\r\n        \"timeout\": \"5\",\r\n        \"poolMin\": \"0\",\r\n        \"poolMax\": \"10\",\r\n        \"useaf\": false,\r\n        \"dnPrefix\": null,\r\n        \"dnSuffix\": null,\r\n        \"uidProp\": \"uidAccountName\",\r\n        \"userRootDn\": \"OU=User,DC=xyz,DC=org\",\r\n        \"group\": \"Administrators\",\r\n        \"memberAttribute\": \"member\",\r\n        \"groupIdProperty\": \"gidAccountName\",\r\n        \"groupRootDN\": \"OU=Groups,DC=xyz,DC=org\",\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"ldapConfig\": {\r\n    \"cacheSize\": \"10\",\r\n    \"cacheTTL\": \"60\",\r\n    \"provider\": \"LDAP\",\r\n    \"ldapDirectoryList\": [\r\n      {\r\n        \"url\": \"ldap://abc.xyz.org:3128\",\r\n        \"principal\": \"CN=alias, OU=User,DC=xyz,DC=org\",\r\n        \"password\": \"cGFzc3dvcmQ\",\r\n        \"timeout\": \"5\",\r\n        \"poolMin\": \"0\",\r\n        \"poolMax\": \"10\",\r\n        \"useaf\": false,\r\n        \"dnPrefix\": null,\r\n        \"dnSuffix\": null,\r\n        \"uidProp\": \"uidAccountName\",\r\n        \"userRootDn\": \"OU=User,DC=xyz,DC=org\",\r\n        \"group\": \"Administrators\",\r\n        \"memberAttribute\": \"member\",\r\n        \"groupIdProperty\": \"gidAccountName\",\r\n        \"groupRootDN\": \"OU=Groups,DC=xyz,DC=org\",\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/InputLdapConfiguration"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/loadBalancer": {
      "get": {
        "description": "The method retrieves the details of the Load Balancer configuration in API Gateway.",
        "operationId": "getLoadBalancers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the Load Balancer configurations are retrieved successfully. ",
            "examples": {
              "application/json": "{\r\n    \"webAppUrl\": \"\",\r\n    \"httpUrls\": [\r\n        \"http://localhost:8080\"\r\n    ],\r\n    \"httpsUrls\": [\r\n        \"https://localhost:443\"\r\n    ],\r\n    \"websocketUrls\": []\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          },
          "400": {
            "description": "This status code indicates that the loadBalancer not mentioned in API access uri path.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \"Missing mandatory field configId in request.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the Load Balancer configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the load Balancer configuration in API Gateway.",
        "operationId": "saveLoadBalancers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            },
            "x-examples": {
              "application/json": "{\r\n    \"webAppUrl\": \"\",\r\n    \"httpUrls\": [\r\n        \"http://localhost:8080\"\r\n    ],\r\n    \"httpsUrls\": [\r\n        \"https://localhost:443\"\r\n    ],\r\n    \"websocketUrls\": []\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the Load Balancer configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"webAppUrl\": \"\",\r\n    \"httpUrls\": [\r\n        \"http://localhost:8080\"\r\n    ],\r\n    \"httpsUrls\": [\r\n        \"https://localhost:443\"\r\n    ],\r\n    \"websocketUrls\": []\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage General Administration\" functional privilege to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/logConfig": {
      "get": {
        "description": "APIGateway has log files from different components.This method is used to retrieve the log settings of various components used by APIGateway.",
        "operationId": "getLogConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the external log configuration is retrieved successfully.",
            "examples": {
              "application/json": "{\"apigatewayLogger\": \"trace\",\"elasticSearchLogger\": \"info\",\"kibanaLogger\": \"verbose\",\"enableSessionLogger\": \"false\",\"enableSecurityLogger\": \"true\",\"sagOsgiLogger\": \"debug\",\"enableLogAggregation\": \"true\",\"logDestination\": \"INTERNAL\"}"
            },
            "schema": {
              "$ref": "#/definitions/LogConfiguration"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the log configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the log configuration in API Gateway.",
        "operationId": "saveLogConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the log configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\"apigatewayLogger\": \"trace\",\"elasticSearchLogger\": \"info\",\"kibanaLogger\": \"verbose\",\"enableSessionLogger\": \"false\",\"enableSecurityLogger\": \"true\",\"sagOsgiLogger\": \"debug\",\"enableLogAggregation\": \"true\",\"logDestination\": \"INTERNAL\"}"
            },
            "schema": {
              "$ref": "#/definitions/LogConfiguration"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Administration\" functional privilege to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/passwordExpiry": {
      "get": {
        "description": "Retrieves the password expiry settings configured in API Gateway",
        "operationId": "getPasswordExpirySettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"expirationInterval\": \"90\",\r\n  \"emailIds\": \"fa@abc.xyz\\nfa1@abc.xyz\",\r\n  \"applicableUsers\": \"user1;user2\",\r\n  \"expiryEmailBefore\": \"3\",\r\n  \"isEnabled\": \"true\",\r\n  \"remainingUsers\": \"user3;user4\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PasswordExpirySettings"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "Saves the password expiry settings in API Gateway",
        "operationId": "savePasswordExpirySettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordExpirySettings"
            },
            "x-examples": {
              "application/json": "{\r\n  \"expirationInterval\": \"90\",\r\n  \"emailIds\": \"fa@abc.xyz\\nfa1@abc.xyz\",\r\n  \"applicableUsers\": \"user1;user2\",\r\n  \"expiryEmailBefore\": \"3\",\r\n  \"isEnabled\": \"true\",\r\n  \"remainingUsers\": \"user3;user4\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"expirationInterval\": \"90\",\r\n  \"emailIds\": \"fa@abc.xyz\\nfa1@abc.xyz\",\r\n  \"applicableUsers\": \"user1;user2\",\r\n  \"expiryEmailBefore\": \"3\",\r\n  \"isEnabled\": \"true\",\r\n  \"remainingUsers\": \"user3;user4\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PasswordExpirySettings"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/passwordRestrictions": {
      "get": {
        "description": "Retrieves the password restrictions settings configured in API Gateway",
        "operationId": "getPasswordRestrictions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"mode\": \"lax\",\r\n  \"minLowerChars\": \"10\",\r\n  \"minDigits\": \"10\",\r\n  \"minLength\": \"10\",\r\n  \"enablePasswordChange\": \"true\",\r\n  \"historyLength\": \"3\",\r\n  \"maxIdenticalCharsInARow\": \"10\",\r\n  \"minSpecialChars\": \"10\",\r\n  \"minUpperChars\": \"10\",\r\n  \"maxLength\": \"20\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PasswordRestrictions"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "Saves the password restrictions settings in API Gateway",
        "operationId": "savePasswordRestrictions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordRestrictions"
            },
            "x-examples": {
              "application/json": "{\r\n  \"mode\": \"lax\",\r\n  \"minLowerChars\": \"10\",\r\n  \"minDigits\": \"10\",\r\n  \"minLength\": \"10\",\r\n  \"enablePasswordChange\": \"true\",\r\n  \"historyLength\": \"3\",\r\n  \"maxIdenticalCharsInARow\": \"10\",\r\n  \"minSpecialChars\": \"10\",\r\n  \"minUpperChars\": \"10\",\r\n  \"maxLength\": \"20\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": "{\r\n  \"mode\": \"lax\",\r\n  \"minLowerChars\": \"10\",\r\n  \"minDigits\": \"10\",\r\n  \"minLength\": \"10\",\r\n  \"enablePasswordChange\": \"true\",\r\n  \"historyLength\": \"3\",\r\n  \"maxIdenticalCharsInARow\": \"10\",\r\n  \"minSpecialChars\": \"10\",\r\n  \"minUpperChars\": \"10\",\r\n  \"maxLength\": \"20\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PasswordRestrictions"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/samlsso": {
      "get": {
        "description": "Retrieves the SSO configuration in API Gateway",
        "operationId": "getSSOConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the SSO configuration is retrieved successfully.",
            "examples": {
              "application/json": "{\r\n    \"saml_redirect\": \"https://localhost:9073/apigatewayui/saml/SSO\",\r\n    \"saml_assertion_signed\": \"true\",\r\n    \"saml_enabled\": \"true\",\r\n    \"saml_authreq_signed\": \"false\",\r\n    \"useSSOLoginByDefault\": \"false\",\r\n    \"saml_sp_id\": \"https://localhost:9073/apigatewayui/saml/SSO\",\r\n    \"keystoreAlias\": \"ssoKeystore\",\r\n    \"saml_signkey_alias\":\"signKey\",\r\n    \"saml_encrypkey_alias\":\"encryptKey\",\r\n    \"groupMapping\": {\r\n        \"groupAttributes\": [\r\n            \"http://schemas.xmlsoap.org/claims/Group\"\r\n        ],\r\n        \"attributeToGroupMap\": {\r\n            \"idpGroup1\": \"gwGroup1\"\r\n        }\r\n    },\r\n    \"userProfileMapping\":{\r\n        \"firstName\": \"fname\",\r\n        \"lastName\": \"lname\",\r\n        \"emailAddresses\": \"mail\"\r\n    },\r\n    \"idpUrl\":\"https://holiday.com/federationmetadata/2007-06/federationmetadata.xml\"\r\n\t}"
            },
            "schema": {
              "$ref": "#/definitions/SSOConfiguration"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the SSO configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the SSO configuration in API Gateway.",
        "operationId": "saveSSOConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSOConfiguration"
            },
            "x-examples": {
              "application/json": "{\r\n    \"saml_redirect\": \"https://localhost:9073/apigatewayui/saml/SSO\",\r\n    \"saml_assertion_signed\": \"true\",\r\n    \"saml_enabled\": \"true\",\r\n    \"saml_authreq_signed\": \"false\",\r\n    \"useSSOLoginByDefault\": \"false\",\r\n    \"saml_sp_id\": \"https://localhost:9073/apigatewayui/saml/SSO\",\r\n    \"keystoreAlias\": \"ssoKeystore\",\r\n    \"saml_signkey_alias\":\"signKey\",\r\n    \"saml_encrypkey_alias\":\"encryptKey\",\r\n    \"groupMapping\": {\r\n        \"groupAttributes\": [\r\n            \"http://schemas.xmlsoap.org/claims/Group\"\r\n        ],\r\n        \"attributeToGroupMap\": {\r\n            \"idpGroup1\": \"gwGroup1\"\r\n        }\r\n    },\r\n    \"userProfileMapping\":{\r\n        \"firstName\": \"fname\",\r\n        \"lastName\": \"lname\",\r\n        \"emailAddresses\": \"mail\"\r\n    },\r\n    \"idpUrl\":\"https://holiday.com/federationmetadata/2007-06/federationmetadata.xml\"\r\n\t}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the SSO configuration has been successfully updated in API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"saml_redirect\": \"https://localhost:9073/apigatewayui/saml/SSO\",\r\n    \"saml_assertion_signed\": \"true\",\r\n    \"saml_enabled\": \"true\",\r\n    \"saml_authreq_signed\": \"false\",\r\n    \"useSSOLoginByDefault\": \"false\",\r\n    \"saml_sp_id\": \"https://localhost:9073/apigatewayui/saml/SSO\",\r\n    \"keystoreAlias\": \"ssoKeystore\",\r\n    \"saml_signkey_alias\":\"signKey\",\r\n    \"saml_encrypkey_alias\":\"encryptKey\",\r\n    \"groupMapping\": {\r\n        \"groupAttributes\": [\r\n            \"http://schemas.xmlsoap.org/claims/Group\"\r\n        ],\r\n        \"attributeToGroupMap\": {\r\n            \"idpGroup1\": \"gwGroup1\"\r\n        }\r\n    },\r\n    \"userProfileMapping\":{\r\n        \"firstName\": \"fname\",\r\n        \"lastName\": \"lname\",\r\n        \"emailAddresses\": \"mail\"\r\n    },\r\n    \"idpUrl\":\"https://holiday.com/federationmetadata/2007-06/federationmetadata.xml\"\r\n\t}"
            },
            "schema": {
              "$ref": "#/definitions/SSOConfiguration"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Administration\" functional privilege to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/settings": {
      "get": {
        "description": "This method retrieves the list of extended settings and watt properties from API Gateway.",
        "operationId": "getSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of extended settings and watt properties are successfully retrieved from API Gateway.",
            "examples": {
              "application/json": "{\r\n  \"preferredSettings\": {\r\n    \"wattKeys\": {},\r\n    \"extendedKeys\": {\r\n      \"allowExceedMaxWindowSize\": \"true\"\r\n    }\r\n  },\r\n  \"allSettings\": {\r\n    \"wattKeys\": {\r\n      \"watt.server.http.allowOptions\": \"true\",\r\n      \"watt.server.coder.responseAsXML\": \"false\",\r\n      \"watt.server.SoapRPC.checkHeaders\": \"true\",\r\n      \"watt.server.ws.responseTNS.from.request\": \"false\",\r\n      \"watt.server.brokerTransport.dur\": \"60\"\r\n    },\r\n    \"extendedKeys\": {\r\n      \"allowExceedMaxWindowSize\": \"true\",\r\n      \"saveAuditlogsWithPayload\": \"true\",\r\n      \"apig_schemaValidationPoolSize\": \"10\",\r\n      \"apig_MENConfiguration_tickInterval\": \"60\",\r\n      \"pg_JWT_isHTTPS\": \"true\"\r\n\t}\r\n  }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ExtendedSettingsOutput"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid."
          },
          "401": {
            "description": "This status code indicates that the user did not provide any user credential or the user is not authorized to retrieve extended and watt settings."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This method updates or creates a list of extended settings and watt properties in API Gateway. The user should have an API Gateway administrator access to update thse settings. The user needs to send only the modified settings i.e, 'preferredSettings', in the payload.",
        "operationId": "saveSettings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedSettingsInput"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"preferredSettings\": {\r\n\t\t\"wattKeys\": {\r\n\t\t\"watt.net.timeout\": \"300\",\r\n\t\t\"watt.server.oauth.authCode.expirySeconds\": \"600\"\r\n\t},\r\n\t\"extendedKeys\": {\r\n\t\t\"pg_oauth2_isHTTPS\": \"false\"\r\n\t}\r\n\t}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of extended settings and watt properties has been successfully updated in API Gateway.",
            "examples": {
              "application/json": "{\r\n  \"preferredSettings\": {\r\n    \"wattKeys\": {},\r\n    \"extendedKeys\": {\r\n      \"allowExceedMaxWindowSize\": \"true\"\r\n    }\r\n  },\r\n  \"allSettings\": {\r\n    \"wattKeys\": {\r\n      \"watt.server.http.allowOptions\": \"true\",\r\n      \"watt.server.coder.responseAsXML\": \"false\",\r\n      \"watt.server.SoapRPC.checkHeaders\": \"true\",\r\n      \"watt.server.ws.responseTNS.from.request\": \"false\",\r\n      \"watt.server.brokerTransport.dur\": \"60\"\r\n    },\r\n    \"extendedKeys\": {\r\n      \"allowExceedMaxWindowSize\": \"true\",\r\n      \"saveAuditlogsWithPayload\": \"true\",\r\n      \"apig_schemaValidationPoolSize\": \"10\",\r\n      \"apig_MENConfiguration_tickInterval\": \"60\",\r\n      \"pg_JWT_isHTTPS\": \"true\"\r\n\t}\r\n  }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ExtendedSettingsOutput"
            }
          },
          "400": {
            "description": "This status code indicates that the the user sends an empty or invalid JSON payload."
          },
          "401": {
            "description": "This status code indicates that the user did not provide any user credential or the user is not authorized to update extended and watt settings."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/snmpDestinationConfig": {
      "get": {
        "description": "The method retrieves the details of the SNMP destination in API Gateway. API Gateway can publish events and performance metrics data to the configured 3rd party SNMP server.",
        "operationId": "getSNMPAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the SNMP destination configurations are retrieved successfully. SendErrorEvent indicates whether API Gateway has to send error events to SNMP destination. SendLifecycleEvent indicates whether API Gateway has to send lifecycle events to SNMP destination. SendPolicyViolationEvent indicates whether API Gateway has to send policy violation events to SNMP destination. SendPerformanceMetrics indicates whether API Gateway has to send performance metrics to SNMP destination. MetricsPublishInterval indicates the interval at which the performance metrics will be published (value has to be between 1-60), default being 60.",
            "examples": {
              "application/json": "{\r\n    \"sendTRAPs\": \"false\",\r\n    \"snmpTargetType\": \"user\",\r\n    \"hostName\": \"localhost\",\r\n    \"port\": \"8081\",\r\n    \"transport\": \"tcp\",\r\n    \"userName\": \"Admin\",\r\n    \"useAuth\": \"false\",\r\n    \"authPassword\": \"\",\r\n    \"authProtocol\": \"MD5\",\r\n    \"usePrivacy\": \"false\",\r\n    \"privacyPassword\": \"\",\r\n    \"privacyProtocol\": \"DES\",\r\n    \"communityName\": \"\",\r\n    \"sendErrorEvent\": \"false\",\r\n    \"sendLifecycleEvent\": \"false\",\r\n    \"sendPolicyViolationEvent\": \"false\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/SNMPDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the provided configuration id is invalid.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Invalid configId value in request. configId: snmpDestinationConfigg.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the SNMP destination configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the SNMP destination in API Gateway.",
        "operationId": "saveSNMPAsDestination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SNMPDestination"
            },
            "x-examples": {
              "application/json": "{\r\n    \"sendTRAPs\": \"false\",\r\n    \"snmpTargetType\": \"user\",\r\n    \"hostName\": \"localhost\",\r\n    \"port\": \"8081\",\r\n    \"transport\": \"tcp\",\r\n    \"userName\": \"Admin\",\r\n    \"useAuth\": \"false\",\r\n    \"authPassword\": \"\",\r\n    \"authProtocol\": \"MD5\",\r\n    \"usePrivacy\": \"false\",\r\n    \"privacyPassword\": \"\",\r\n    \"privacyProtocol\": \"DES\",\r\n    \"communityName\": \"\",\r\n    \"sendErrorEvent\": \"false\",\r\n    \"sendLifecycleEvent\": \"false\",\r\n    \"sendPolicyViolationEvent\": \"false\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the SNMP destination configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"sendTRAPs\": \"false\",\r\n    \"snmpTargetType\": \"user\",\r\n    \"hostName\": \"localhost\",\r\n    \"port\": \"8081\",\r\n    \"transport\": \"tcp\",\r\n    \"userName\": \"Admin\",\r\n    \"useAuth\": \"false\",\r\n    \"authPassword\": \"\",\r\n    \"authProtocol\": \"MD5\",\r\n    \"usePrivacy\": \"false\",\r\n    \"privacyPassword\": \"\",\r\n    \"privacyProtocol\": \"DES\",\r\n    \"communityName\": \"\",\r\n    \"sendErrorEvent\": \"false\",\r\n    \"sendLifecycleEvent\": \"false\",\r\n    \"sendPolicyViolationEvent\": \"false\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/SNMPDestination"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid.",
            "examples": {
              "application/json": "{\r\n\"errorDetails\": \" Invalid property key found in request payload.\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage Destination Administration\" functional privilege to access this API."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested destination configuration in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"errorDetails\": \" Unable to process the PUT request for SNMP destination configuration. Error occurred while processing the payload. Error Message: Method: PUT is not allowed on resource: snmpDestinationConfig\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/configurations/whiteListingIPs": {
      "get": {
        "description": "The method retrieves the details of the whitelisting IPs configuration in API Gateway.",
        "operationId": "getWhiteListedIPs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the whitelistingIPs configurations are retrieved successfully.",
            "examples": {
              "application/json": "{\r\n    \"privateIPs\": [\r\n        \"127.0.0.1\",\r\n        \"10.0.0.0-10.255.255.255\",\r\n        \"172.16.0.0-172.31.255.255 \",\r\n        \"192.168.0.0-192.168.255.255\"\r\n    ]\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/WhiteListedIPs"
            }
          },
          "401": {
            "description": "This status code indicates that the user is not a valid API Gateway user for retrieving the whitelistingIPs configuration."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method is used to update the details of the whitelisting IPs configuration in API Gateway.",
        "operationId": "saveWhitelistedIPs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WhiteListedIPs"
            },
            "x-examples": {
              "application/json": "{\r\n    \"privateIPs\": [\r\n        \"127.0.0.1\",\r\n        \"10.0.0.0-10.255.255.255\",\r\n        \"172.16.0.0-172.31.255.255 \",\r\n        \"192.168.0.0-192.168.255.255\"\r\n    ]\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the whitelisting IPs configuration has been successfully updated in API Gateway, and the updated configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"privateIPs\": [\r\n        \"127.0.0.1\",\r\n        \"10.0.0.0-10.255.255.255\",\r\n        \"172.16.0.0-172.31.255.255 \",\r\n        \"192.168.0.0-192.168.255.255\"\r\n    ]\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/WhiteListedIPs"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have \"Manage General Administration\" functional privilege to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/cluster": {
      "get": {
        "description": "Retrieves the configured cluster settings from API Gateway.",
        "operationId": "getClusterSetting",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the cluster setting has been successfully retrieved from API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"clusterAware\":true,\r\n\t\"pendingRestart\":false,\r\n\t\"currentlyClustered\":false,\r\n\t\"clusterSessTimeout\":\"60\",\r\n\t\"clusterName\":\"devCluster\",\r\n\t\"actionOnStartupError\":\"standalone\",\r\n\t\"tsaURLs\":\"bluebird:9510\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ClusterInfo"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while fetching the configured cluster settings from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "Updates the cluster settings in API Gateway.",
        "operationId": "updateCluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request payload for cluster settings in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterInfo"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"clusterAware\":true,\r\n\t\"pendingRestart\":false,\r\n\t\"currentlyClustered\":false,\r\n\t\"clusterSessTimeout\":\"60\",\r\n\t\"clusterName\":\"devCluster\",\r\n\t\"actionOnStartupError\":\"standalone\",\r\n\t\"tsaURLs\":\"bluebird:9510\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the configured cluster settings have been successfully persisted in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"clusterAware\":true,\r\n\t\"pendingRestart\":false,\r\n\t\"currentlyClustered\":false,\r\n\t\"clusterSessTimeout\":\"60\",\r\n\t\"clusterName\":\"devCluster\",\r\n\t\"actionOnStartupError\":\"standalone\",\r\n\t\"tsaURLs\":\"bluebird:9510\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/ClusterInfo"
            }
          },
          "400": {
            "description": "This status code indicates that the the user sends an empty or invalid JSON payload."
          },
          "401": {
            "description": "This status code indicates that the user did not provide any user credential or the user is not authorized to update extended and watt settings."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the cluster settings in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsConnections": {
      "get": {
        "description": "The method retrieves list of all the JMS connections in API Gateway.",
        "operationId": "getAllJMSConnections",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of JMS connections is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"jmsList\": [\r\n      {\r\n            \"id\": \"JMSConn1\",\r\n            \"aliasName\": \"JMSConn1\",\r\n            \"enabled\": \"false\",\r\n            \"description\": \"adasd\",\r\n            \"transactionType\": \"0\",\r\n            \"clientID\": \"clientID\",\r\n            \"user\": \"user\",\r\n            \"password\": \"pwd\",\r\n            \"associationType\": \"0\",\r\n            \"jndi_jndiAliasName\": \"JNDI_AMQP\",\r\n            \"jndi_connectionFactoryLookupName\": \"qpidConnectionFactory\",\r\n            \"jndi_automaticallyCreateUMAdminObjects\": \"false\",\r\n            \"jndi_enableFollowTheMaster\": \"true\",\r\n            \"jndi_connectionFactoryUpdateType\": \"NONE\",\r\n            \"jndi_connectionFactoryPollingInterval\": \"0\",\r\n            \"classLoader\": \"INTEGRATION_SERVER\",\r\n            \"csqSize\": \"-1\",\r\n            \"csqDrainInOrder\": \"true\",\r\n            \"optTempQueueCreate\": \"true\",\r\n            \"allowReplyToConsumer\": \"false\",\r\n            \"manageDestinations\": \"true\",\r\n            \"allowNewConnectionPerTrigger\": \"true\",\r\n            \"producerCachingMode\": \"0\",\r\n            \"producerSessionPoolMinSize\": \"0\",\r\n            \"producerSessionPoolSize\": \"0\",\r\n            \"cacheProducersPoolMinSize\": \"0\",\r\n            \"cacheProducersPoolSize\": \"0\",\r\n            \"poolTimeout\": \"6000\",\r\n            \"cacheProducersQueueList\": \"\",\r\n            \"producerMaxRetryAttempts\": \"0\",\r\n            \"producerRetryInterval\": \"1000\",\r\n            \"um_loggingOutput\": \"0\",\r\n            \"um_producerMessageTracking\": \"false\",\r\n            \"um_producerIncludedStrings\": \"1000\",\r\n            \"um_consumerMessageTracking\": \"false\",\r\n            \"um_consumerIncludedStrings\": \"1000\"\r\n        },\r\n        {\r\n            \"id\": \"JMSConn 002\",\r\n            \"aliasName\": \"JMSConn 002\",\r\n            \"enabled\": \"false\",\r\n            \"description\": \"sailesh2\",\r\n            \"transactionType\": \"0\",\r\n            \"clientID\": \"clientID\",\r\n            \"user\": \"user\",\r\n            \"password\": \"pwd\",\r\n            \"associationType\": \"0\",\r\n            \"jndi_jndiAliasName\": \"JNDI_AMQP\",\r\n            \"jndi_connectionFactoryLookupName\": \"qpidConnectionFactory\",\r\n            \"jndi_automaticallyCreateUMAdminObjects\": \"false\",\r\n            \"jndi_enableFollowTheMaster\": \"true\",\r\n            \"jndi_connectionFactoryUpdateType\": \"NONE\",\r\n            \"jndi_connectionFactoryPollingInterval\": \"0\",\r\n            \"classLoader\": \"INTEGRATION_SERVER\",\r\n            \"csqSize\": \"-1\",\r\n            \"csqDrainInOrder\": \"true\",\r\n            \"optTempQueueCreate\": \"true\",\r\n            \"allowReplyToConsumer\": \"false\",\r\n            \"manageDestinations\": \"true\",\r\n            \"allowNewConnectionPerTrigger\": \"true\",\r\n            \"producerCachingMode\": \"0\",\r\n            \"producerSessionPoolMinSize\": \"0\",\r\n            \"producerSessionPoolSize\": \"0\",\r\n            \"cacheProducersPoolMinSize\": \"0\",\r\n            \"cacheProducersPoolSize\": \"0\",\r\n            \"poolTimeout\": \"6000\",\r\n            \"cacheProducersQueueList\": \"\",\r\n            \"producerMaxRetryAttempts\": \"0\",\r\n            \"producerRetryInterval\": \"1000\",\r\n            \"um_loggingOutput\": \"0\",\r\n            \"um_producerMessageTracking\": \"false\",\r\n            \"um_producerIncludedStrings\": \"1000\",\r\n            \"um_consumerMessageTracking\": \"1000\",\r\n            \"um_consumerIncludedStrings\": \"1000\"\r\n        }\r\n    ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "The method creates a JMS connection in API Gateway. The API request body must contain the payload for the JMS connection",
        "operationId": "createJMSConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JMSConnectionAlias"
            },
            "x-examples": {
              "application/json": "{\"aliasName\":\"JMSConn1\",\"enabled\":\"false\",\"description\":\"adasd\",\"transactionType\":\"0\",\"clientID\":\"clientID\",\"user\":\"user\",\"password\":\"pwd\",\"associationType\":\"0\",\"jndi_jndiAliasName\":\"JNDI_AMQP\",\"jndi_connectionFactoryLookupName\":\"qpidConnectionFactory\",\"jndi_automaticallyCreateUMAdminObjects\":\"false\",\"jndi_enableFollowTheMaster\":\"true\",\"jndi_connectionFactoryUpdateType\":\"NONE\",\"jndi_connectionFactoryPollingInterval\":\"0\",\"classLoader\":\"INTEGRATION_SERVER\",\"csqSize\":\"-1\",\"csqDrainInOrder\":\"true\",\"optTempQueueCreate\":\"true\",\"allowReplyToConsumer\":\"false\",\"manageDestinations\":\"true\",\"allowNewConnectionPerTrigger\":\"true\",\"producerCachingMode\":\"0\",\"producerSessionPoolSize\":\"0\",\"producerSessionPoolMinSize\":\"0\",\"cacheProducersPoolMinSize\":\"0\",\"cacheProducersPoolSize\":\"0\",\"poolTimeout\":\"6000\",\"cacheProducersQueueList\":\"\",\"producerMaxRetryAttempts\":\"0\",\"producerRetryInterval\":\"1000\",\"um_loggingOutput\":\"0\",\"um_producerMessageTracking\":\"false\",\"um_producerIncludedStrings\":\"1000\",\"um_consumerMessageTracking\":\"false\",\"um_consumerIncludedStrings\":\"1000\"}\r\n\r\n"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the JMS connection has been successfully created in API Gateway, and the newly created JMS connection is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"jms\": {\r\n        \"id\": \"JMSConn11\",\r\n        \"aliasName\": \"JMSConn11\",\r\n        \"enabled\": \"false\",\r\n        \"description\": \"adasd\",\r\n        \"transactionType\": \"0\",\r\n        \"clientID\": \"clientID\",\r\n        \"user\": \"user\",\r\n        \"password\": \"pwd\",\r\n        \"associationType\": \"0\",\r\n        \"jndi_jndiAliasName\": \"JNDI_AMQP\",\r\n        \"jndi_connectionFactoryLookupName\": \"qpidConnectionFactory\",\r\n        \"jndi_automaticallyCreateUMAdminObjects\": \"false\",\r\n        \"jndi_enableFollowTheMaster\": \"true\",\r\n        \"jndi_connectionFactoryUpdateType\": \"NONE\",\r\n        \"jndi_connectionFactoryPollingInterval\": \"0\",\r\n        \"classLoader\": \"INTEGRATION_SERVER\",\r\n        \"csqSize\": \"-1\",\r\n        \"csqDrainInOrder\": \"true\",\r\n        \"optTempQueueCreate\": \"true\",\r\n        \"allowReplyToConsumer\": \"false\",\r\n        \"manageDestinations\": \"true\",\r\n        \"allowNewConnectionPerTrigger\": \"true\",\r\n        \"producerCachingMode\": \"0\",\r\n        \"producerSessionPoolMinSize\": \"0\",\r\n        \"producerSessionPoolSize\": \"0\",\r\n        \"cacheProducersPoolMinSize\": \"0\",\r\n        \"cacheProducersPoolSize\": \"0\",\r\n        \"poolTimeout\": \"6000\",\r\n        \"cacheProducersQueueList\": \"\",\r\n        \"producerMaxRetryAttempts\": \"0\",\r\n        \"producerRetryInterval\": \"1000\",\r\n        \"um_loggingOutput\": \"0\",\r\n        \"um_producerMessageTracking\": \"false\",\r\n        \"um_producerIncludedStrings\": \"1000\",\r\n        \"um_consumerMessageTracking\": \"false\",\r\n        \"um_consumerIncludedStrings\": \"1000\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JMSConnectionAlias"
            }
          },
          "400": {
            "description": "This status code indicates that the JMS connection with the given name already exists in API Gateway or the request body is not correct.",
            "examples": {
              "application/json": "{}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This REST service is used to update the JMS connection",
        "operationId": "updateJMSConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JMSConnectionAlias"
            },
            "x-examples": {
              "application/json": "{\r\n        \"id\": \"JMSConn11\",\r\n        \"aliasName\": \"JMSConn11\",\r\n        \"enabled\": \"false\",\r\n        \"description\": \"adasd\",\r\n        \"transactionType\": \"0\",\r\n        \"clientID\": \"clientID\",\r\n        \"user\": \"user\",\r\n        \"password\": \"pwd\",\r\n        \"associationType\": \"0\",\r\n        \"jndi_jndiAliasName\": \"JNDI_AMQP\",\r\n        \"jndi_connectionFactoryLookupName\": \"qpidConnectionFactory\",\r\n        \"jndi_automaticallyCreateUMAdminObjects\": \"false\",\r\n        \"jndi_enableFollowTheMaster\": \"true\",\r\n        \"jndi_connectionFactoryUpdateType\": \"NONE\",\r\n        \"jndi_connectionFactoryPollingInterval\": \"0\",\r\n        \"classLoader\": \"INTEGRATION_SERVER\",\r\n        \"csqSize\": \"-1\",\r\n        \"csqDrainInOrder\": \"true\",\r\n        \"optTempQueueCreate\": \"true\",\r\n        \"allowReplyToConsumer\": \"false\",\r\n        \"manageDestinations\": \"true\",\r\n        \"allowNewConnectionPerTrigger\": \"true\",\r\n        \"producerCachingMode\": \"0\",\r\n        \"producerSessionPoolMinSize\": \"0\",\r\n        \"producerSessionPoolSize\": \"0\",\r\n        \"cacheProducersPoolMinSize\": \"0\",\r\n        \"cacheProducersPoolSize\": \"0\",\r\n        \"poolTimeout\": \"6000\",\r\n        \"cacheProducersQueueList\": \"\",\r\n        \"producerMaxRetryAttempts\": \"0\",\r\n        \"producerRetryInterval\": \"1000\",\r\n        \"um_loggingOutput\": \"0\",\r\n        \"um_producerMessageTracking\": \"false\",\r\n        \"um_producerIncludedStrings\": \"1000\",\r\n        \"um_consumerMessageTracking\": \"false\",\r\n        \"um_consumerIncludedStrings\": \"1000\"\r\n    }"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that API Gateway has successfully updated the specified JMS connection and the updated JMS connection details can be found in the response body",
            "examples": {
              "application/json": "{\r\n    \"jms\": {\r\n        \"id\": \"JMSConn11\",\r\n        \"aliasName\": \"JMSConn11\",\r\n        \"enabled\": \"false\",\r\n        \"description\": \"adasd\",\r\n        \"transactionType\": \"0\",\r\n        \"clientID\": \"clientID\",\r\n        \"user\": \"user\",\r\n        \"password\": \"pwd\",\r\n        \"associationType\": \"0\",\r\n        \"jndi_jndiAliasName\": \"JNDI_AMQP\",\r\n        \"jndi_connectionFactoryLookupName\": \"qpidConnectionFactory\",\r\n        \"jndi_automaticallyCreateUMAdminObjects\": \"false\",\r\n        \"jndi_enableFollowTheMaster\": \"true\",\r\n        \"jndi_connectionFactoryUpdateType\": \"NONE\",\r\n        \"jndi_connectionFactoryPollingInterval\": \"0\",\r\n        \"classLoader\": \"INTEGRATION_SERVER\",\r\n        \"csqSize\": \"-1\",\r\n        \"csqDrainInOrder\": \"true\",\r\n        \"optTempQueueCreate\": \"true\",\r\n        \"allowReplyToConsumer\": \"false\",\r\n        \"manageDestinations\": \"true\",\r\n        \"allowNewConnectionPerTrigger\": \"true\",\r\n        \"producerCachingMode\": \"0\",\r\n        \"producerSessionPoolMinSize\": \"0\",\r\n        \"producerSessionPoolSize\": \"0\",\r\n        \"cacheProducersPoolMinSize\": \"0\",\r\n        \"cacheProducersPoolSize\": \"0\",\r\n        \"poolTimeout\": \"6000\",\r\n        \"cacheProducersQueueList\": \"\",\r\n        \"producerMaxRetryAttempts\": \"0\",\r\n        \"producerRetryInterval\": \"1000\",\r\n        \"um_loggingOutput\": \"0\",\r\n        \"um_producerMessageTracking\": \"false\",\r\n        \"um_producerIncludedStrings\": \"1000\",\r\n        \"um_consumerMessageTracking\": \"false\",\r\n        \"um_consumerIncludedStrings\": \"1000\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JMSConnectionAlias"
            }
          },
          "400": {
            "description": "Tis status code indicates the request payload is not correct and corresponding error details can be seen in the response body",
            "examples": {
              "application/json": ""
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsConnections/{jmsConnId}": {
      "get": {
        "description": "The method retrieves the specified JMS connection in API Gateway.",
        "operationId": "getJMSConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jmsConnId",
            "in": "path",
            "description": "This path parameter is used to specify the JMS connection id which JMS connection needs to be retrived.",
            "required": true,
            "type": "string",
            "x-example": "sampleJMSConn"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified JMS connections is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"jms\": {\r\n        \"id\": \"JMSConn1\",\r\n        \"aliasName\": \"JMSConn1\",\r\n        \"enabled\": \"false\",\r\n        \"description\": \"adasd\",\r\n        \"transactionType\": \"0\",\r\n        \"clientID\": \"clientID\",\r\n        \"user\": \"user\",\r\n        \"password\": \"pwd\",\r\n        \"associationType\": \"0\",\r\n        \"jndi_jndiAliasName\": \"JNDI_AMQP\",\r\n        \"jndi_connectionFactoryLookupName\": \"qpidConnectionFactory\",\r\n        \"jndi_automaticallyCreateUMAdminObjects\": \"false\",\r\n        \"jndi_enableFollowTheMaster\": \"true\",\r\n        \"jndi_connectionFactoryUpdateType\": \"NONE\",\r\n        \"jndi_connectionFactoryPollingInterval\": \"0\",\r\n        \"classLoader\": \"INTEGRATION_SERVER\",\r\n        \"csqSize\": \"-1\",\r\n        \"csqDrainInOrder\": \"true\",\r\n        \"optTempQueueCreate\": \"true\",\r\n        \"allowReplyToConsumer\": \"false\",\r\n        \"manageDestinations\": \"true\",\r\n        \"allowNewConnectionPerTrigger\": \"true\",\r\n        \"producerCachingMode\": \"0\",\r\n        \"producerSessionPoolMinSize\": \"0\",\r\n        \"producerSessionPoolSize\": \"0\",\r\n        \"cacheProducersPoolMinSize\": \"0\",\r\n        \"cacheProducersPoolSize\": \"0\",\r\n        \"poolTimeout\": \"6000\",\r\n        \"cacheProducersQueueList\": \"\",\r\n        \"producerMaxRetryAttempts\": \"0\",\r\n        \"producerRetryInterval\": \"1000\",\r\n        \"um_loggingOutput\": \"0\",\r\n        \"um_producerMessageTracking\": \"false\",\r\n        \"um_producerIncludedStrings\": \"1000\",\r\n        \"um_consumerMessageTracking\": \"false\",\r\n        \"um_consumerIncludedStrings\": \"1000\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JMSConnectionAlias"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the JMS id specified is not found in API Gateway",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Exception occured : The JMS settings object with the given ID: JMSConn11 couldn't found\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "This delete request will delete the JMS connection based on the JMS connection id which is specified in path",
        "operationId": "deleteJMSConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jmsConnId",
            "in": "path",
            "description": "This path parameter is used to specify the JMS connection id for which JMS connection needs to deleted.",
            "required": true,
            "type": "string",
            "x-example": "sampleJMSConn"
          }
        ],
        "responses": {
          "204": {
            "description": "This status code indicates that the specified JMS connection is successfully deleted"
          },
          "401": {
            "description": "This status code indicates either user didn't provide any user credential or user doesn't have API Gateway Administrator or API Gateway provider access to delete the assertion."
          },
          "404": {
            "description": "This status code indicates that the corresponding JMS connection id does not exist",
            "examples": {
              "application/json": "{\r\n  \"errorDetails\": \" Unable to find the resource: 685e99ee-0e1b-4afa-8ff3-4322cf2965661\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsConnections/{jmsConnId}/disable": {
      "put": {
        "description": "The method disables the specified JMS connections in API Gateway.",
        "operationId": "disableJMSConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jmsConnId",
            "in": "path",
            "description": "This path parameter is used to specify the JMS connection id which JMS connection needs to be disabled.",
            "required": true,
            "type": "string",
            "x-example": "sampleJMSConn"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified JMS connections is successfully disabled.",
            "examples": {
              "application/json": "{\r\n    \"status\": \"JMS Connection Alias \\\"JMSConn11\\\" set to disabled.\",\r\n    \"result\": true\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsConnections/{jmsConnId}/enable": {
      "put": {
        "description": "The method enables the specified JMS connections in API Gateway.",
        "operationId": "enableJMSConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jmsConnId",
            "in": "path",
            "description": "This path parameter is used to specify the JMS connection id which JMS connection needs to be enabled.",
            "required": true,
            "type": "string",
            "x-example": "sampleJMSConn"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified JMS connections is successfully enabled.",
            "examples": {
              "application/json": "{\r\n    \"status\": \"JMS Connection Alias \\\"JMSConn11\\\" set to enabled.\",\r\n    \"result\": true\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsTriggers": {
      "get": {
        "description": "The method retrieves list of all JMS triggers in API Gateway.",
        "operationId": "getAllJMSTriggers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of JMS triggers is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"jmsTriggerList\": [\r\n        {\r\n            \"id\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n            \"triggerName\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n            \"aliasName\": \"DEFAULT_IS_JMS_CONNECTION\",\r\n            \"destinationName\": \"wseQueue_AMQP_PROVIDER_ALIAS\",\r\n            \"enabled\": \"false\",\r\n            \"isConcurrent\": \"false\",\r\n            \"maxExecutionThreads\": \"1\",\r\n            \"connectionCount\": \"1\",\r\n            \"currentThreads\": \"-1\",\r\n            \"state\": \"Disabled\",\r\n            \"destinationType\": \"Queue\",\r\n            \"jmsMessageSelector\": \"N/A\",\r\n            \"durableSubscribeName\": \"N/A\",\r\n            \"ignoreLocalPublished\": \"N/A\",\r\n            \"status\": \"Not Running (trigger disabled)\"\r\n        }\r\n    ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This REST service is used to update the JMS trigger",
        "operationId": "updateJMSTrigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JMSTrigger"
            },
            "x-examples": {
              "application/json": "\"jmsTrigger\": {\r\n        \"id\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n        \"triggerName\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n        \"aliasName\": \"DEFAULT_IS_JMS_CONNECTION\",\r\n        \"destinationName\": \"wseQueue_AMQP_PROVIDER_ALIAS\",\r\n        \"enabled\": \"false\",\r\n        \"isConcurrent\": \"false\",\r\n        \"maxExecutionThreads\": \"1\",\r\n        \"connectionCount\": \"1\",\r\n        \"currentThreads\": \"-1\",\r\n        \"state\": \"Disabled\",\r\n        \"destinationType\": \"Queue\",\r\n        \"jmsMessageSelector\": \"N/A\",\r\n        \"durableSubscribeName\": \"N/A\",\r\n        \"ignoreLocalPublished\": \"N/A\",\r\n        \"status\": \"Not Running (trigger disabled)\"\r\n    }"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that API Gateway has successfully updated the specified JMS trigger and the updated JMS trigger details can be found in the response body",
            "examples": {
              "application/json": "{\r\n    \"jmsTrigger\": {\r\n        \"id\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n        \"triggerName\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n        \"aliasName\": \"DEFAULT_IS_JMS_CONNECTION\",\r\n        \"destinationName\": \"wseQueue_AMQP_PROVIDER_ALIAS\",\r\n        \"enabled\": \"false\",\r\n        \"isConcurrent\": \"false\",\r\n        \"maxExecutionThreads\": \"1\",\r\n        \"connectionCount\": \"1\",\r\n        \"currentThreads\": \"-1\",\r\n        \"state\": \"Disabled\",\r\n        \"destinationType\": \"Queue\",\r\n        \"jmsMessageSelector\": \"N/A\",\r\n        \"durableSubscribeName\": \"N/A\",\r\n        \"ignoreLocalPublished\": \"N/A\",\r\n        \"status\": \"Not Running (trigger disabled)\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JMSTrigger"
            }
          },
          "400": {
            "description": "Tis status code indicates the request payload is not correct and corresponding error details can be seen in the response body",
            "examples": {
              "application/json": ""
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsTriggers/{jmsTriggerId}": {
      "get": {
        "description": "The method retrieves the specified JMS trigger in API Gateway.",
        "operationId": "getJMSTrigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jmsTriggerId",
            "in": "path",
            "description": "This path parameter is used to specify the JMS trigger id which JMS trigger needs to be retrieved.",
            "required": true,
            "type": "string",
            "x-example": "sampleJmsTrigger"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified JMS trigger is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"jmsTrigger\": {\r\n        \"id\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n        \"triggerName\": \"wm.namespace.ws:wseTrigger_AMQP_PROVIDER_ALIAS\",\r\n        \"aliasName\": \"DEFAULT_IS_JMS_CONNECTION\",\r\n        \"destinationName\": \"wseQueue_AMQP_PROVIDER_ALIAS\",\r\n        \"enabled\": \"false\",\r\n        \"isConcurrent\": \"false\",\r\n        \"maxExecutionThreads\": \"1\",\r\n        \"connectionCount\": \"1\",\r\n        \"currentThreads\": \"-1\",\r\n        \"state\": \"Disabled\",\r\n        \"destinationType\": \"Queue\",\r\n        \"jmsMessageSelector\": \"N/A\",\r\n        \"durableSubscribeName\": \"N/A\",\r\n        \"ignoreLocalPublished\": \"N/A\",\r\n        \"status\": \"Not Running (trigger disabled)\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JMSTrigger"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the JMS trigger id specified is not found in API Gateway",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Exception occured : The JMS trigger object with the given ID: JMSTrigger11 couldn't found\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsTriggers/{jmsTriggerId}/disable": {
      "put": {
        "description": "The method disables the specified JMS trigger in API Gateway.",
        "operationId": "disableJMSTrigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jmsTriggerId",
            "in": "path",
            "description": "This path parameter is used to specify the JMS trigger id which JMS trigger needs to be disabled.",
            "required": true,
            "type": "string",
            "x-example": "sampleJMSConn"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified JMS trigger is successfully disabled.",
            "examples": {
              "application/json": "{\r\n    \"status\": \"JMS Trigger(s) disabled.\",\r\n    \"result\": true\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jmsTriggers/{jmsTriggerId}/enable": {
      "put": {
        "description": "The method enables the specified JMS trigger in API Gateway.",
        "operationId": "enableJMSTrigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jmsTriggerId",
            "in": "path",
            "description": "This path parameter is used to specify the JMS trigger id which JMS trigger needs to be enabled.",
            "required": true,
            "type": "string",
            "x-example": "sampleJMSConn"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified JMS trigger is successfully enabled.",
            "examples": {
              "application/json": "{\r\n    \"status\": \"JMS Trigger(s) enabled.\",\r\n    \"result\": true\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jndi": {
      "get": {
        "description": "The method retrieves list of all JNDI configurations in API Gateway.",
        "operationId": "listAllJNDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of JNDI configurations is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"jndiList\": [\r\n        {\r\n            \"id\": \"JNDI_AMQP\",\r\n            \"jndiAliasName\": \"JNDI_AMQP\",\r\n            \"description\": \"JNDI_AMQP\",\r\n            \"initialContextFactory\": \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\",\r\n            \"providerURL\": \"C:\\\\APIGateway1\\\\IntegrationServer\\\\lib\\\\jars\\\\AMQP.properties\"\r\n        },\r\n        {\r\n            \"id\": \"JNDI_AMQP2\",\r\n            \"jndiAliasName\": \"JNDI_AMQP2\",\r\n            \"description\": \"JNDI_AMQP\",\r\n            \"initialContextFactory\": \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\",\r\n            \"providerURL\": \"C:\\\\APIGateway1\\\\IntegrationServer\\\\lib\\\\jars\\\\AMQP.properties\"\r\n        }\r\n    ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "The method creates a JNDI configuration in API Gateway. The API request body must contain the payload for the JNDI configuration",
        "operationId": "createJNDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JNDIProviderAlias"
            },
            "x-examples": {
              "application/json": "{\"jndiAliasName\":\"JNDIALIAS22\",\"description\":\"new des\",\"initialContextFactory\":\"org.apache.qpid.jms.jndi.JmsInitialContextFactory\",\"providerURL\": \"C:\\\\APIGateway1\\\\IntegrationServer\\\\lib\\\\jars\\\\AMQP.properties\"}"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the JNDI configuration has been successfully created in API Gateway, and the newly created JNDI configuration is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"jndi\": {\r\n        \"id\": \"JNDI_AMQPSample\",\r\n        \"jndiAliasName\": \"JNDI_AMQPSample\",\r\n        \"description\": \"JNDI_AMQP\",\r\n        \"initialContextFactory\": \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\",\r\n        \"providerURL\": \"C:\\\\APIGateway1\\\\IntegrationServer\\\\lib\\\\jars\\\\AMQP.properties\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JNDIProviderAlias"
            }
          },
          "400": {
            "description": "This status code indicates that the JNDI configuration with the given name already exists in API Gateway or the request body is not correct.",
            "examples": {
              "application/json": "{}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This REST service is used to update the JNDI configuration",
        "operationId": "updateJNDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JNDIProviderAlias"
            },
            "x-examples": {
              "application/json": "{\r\n        \"id\": \"JNDI_AMQP\",\r\n        \"jndiAliasName\": \"JNDI_AMQP\",\r\n        \"description\": \"JNDI_AMQP\",\r\n        \"initialContextFactory\": \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\",\r\n        \"providerURL\": \"C:\\\\APIGateway1\\\\IntegrationServer\\\\lib\\\\jars\\\\AMQP.properties\"\r\n    }"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that API Gateway has successfully updated the specified JNDI configuration and the updated JNDI configuration details can be found in the response body",
            "examples": {
              "application/json": "{\r\n    \"jndi\": {\r\n        \"id\": \"JNDI_AMQP\",\r\n        \"jndiAliasName\": \"JNDI_AMQP\",\r\n        \"description\": \"JNDI_AMQP\",\r\n        \"initialContextFactory\": \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\",\r\n        \"providerURL\": \"C:\\\\APIGateway1\\\\IntegrationServer\\\\lib\\\\jars\\\\AMQP.properties\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JNDIProviderAlias"
            }
          },
          "400": {
            "description": "Tis status code indicates the request payload is not correct and corresponding error details can be seen in the response body",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \"Unable to create or update JNDI settings. providerURL should not be null\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jndi/template": {
      "get": {
        "description": "The method retrieves list of all JNDI templates in API Gateway.",
        "operationId": "fetchJNDITemplates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of JNDI templates is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"jndiTemplates\": [\r\n        {\r\n            \"name\": \"Broker\",\r\n            \"context\": \"com.webmethods.jms.naming.WmJmsNamingCtxFactory\",\r\n            \"url\": \"wmjmsnaming://<name>@<host>:6849\",\r\n            \"otherProps\": \"com.webmethods.jms.naming.clientgroup=admin\"\r\n        },\r\n        {\r\n            \"name\": \"UM\",\r\n            \"context\": \"com.pcbsys.nirvana.nSpace.NirvanaContextFactory\",\r\n            \"url\": \"nsp://<host>:9000/\",\r\n            \"otherProps\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"file system\",\r\n            \"context\": \"com.sun.jndi.fscontext.RefFSContextFactory\",\r\n            \"url\": \"file:/<filepath>\",\r\n            \"otherProps\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"LDAP\",\r\n            \"context\": \"com.sun.jndi.ldap.LdapCtxFactory\",\r\n            \"url\": \"ldap://<host>:389\",\r\n            \"otherProps\": \"\"\r\n        },\r\n        {\r\n            \"name\": \"JBoss\",\r\n            \"context\": \"org.jnp.interfaces.NamingContextFactory\",\r\n            \"url\": \"jnp://<host>:1099\",\r\n            \"otherProps\": \"java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces\"\r\n        },\r\n        {\r\n            \"name\": \"WebLogic\",\r\n            \"context\": \"weblogic.jndi.WLInitialContextFactory\",\r\n            \"url\": \"t3://<host>:7001\",\r\n            \"otherProps\": \"\"\r\n        }\r\n    ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jndi/{jndiId}": {
      "get": {
        "description": "The method retrieves the specified JNDI configuration in API Gateway.",
        "operationId": "listJNDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jndiId",
            "in": "path",
            "description": "This path parameter is used to specify the JNDI configuration id which JNDI configuration needs to be retrived.",
            "required": true,
            "type": "string",
            "x-example": "sampleJNDI"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified JNDI configuration is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"jndi\": {\r\n        \"id\": \"JNDI_AMQP\",\r\n        \"jndiAliasName\": \"JNDI_AMQP\",\r\n        \"description\": \"JNDI_AMQP\",\r\n        \"initialContextFactory\": \"org.apache.qpid.jms.jndi.JmsInitialContextFactory\",\r\n        \"providerURL\": \"C:\\\\APIGateway1\\\\IntegrationServer\\\\lib\\\\jars\\\\AMQP.properties\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/JNDIProviderAlias"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "This delete request will delete the JNDI configuration based on the JNDI id which is specified in path",
        "operationId": "deleteJNDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jndiId",
            "in": "path",
            "description": "This path parameter is used to specify the JNDI id for which JNDI configuration needs to deleted.",
            "required": true,
            "type": "string",
            "x-example": "sampleJNDI"
          }
        ],
        "responses": {
          "204": {
            "description": "This status code indicates that the specified JNDI configuration is successfully deleted"
          },
          "401": {
            "description": "This status code indicates either user didn't provide any user credential or user doesn't have API Gateway Administrator or API Gateway provider access to delete the assertion."
          },
          "404": {
            "description": "This status code indicates that the corresponding JNDI id does not exist",
            "examples": {
              "application/json": "{\r\n  \"errorDetails\": \" Unable to find the resource: 685e99ee-0e1b-4afa-8ff3-4322cf2965661\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/jndi/{jndiId}/test": {
      "get": {
        "description": "The method is to test the given JNDI configuration in API Gateway.",
        "operationId": "testJNDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jndiId",
            "in": "path",
            "required": true,
            "type": "string",
            "x-example": "sampleJNDI"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that test result of the given JNDI configuration is successfully returned.",
            "examples": {
              "application/json": "{\r\n    \"jndiTest\": {\r\n        \"jndiAliasName\": \"JNDI_AMQP\",\r\n        \"messages\": \"Test lookup successful\",\r\n        \"test\": \"success\",\r\n        \"jndiLookupData\": [\r\n            \"dynamicQueues: org.apache.qpid.jms.jndi.JmsInitialContextFactory$1\",\r\n            \"dynamicTopics: org.apache.qpid.jms.jndi.JmsInitialContextFactory$2\",\r\n            \"qpidConnectionFactory: org.apache.qpid.jms.JmsConnectionFactory\"\r\n        ]\r\n    }\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/kerberos": {
      "get": {
        "description": "Retrieves the configured Kerberos settings from API Gateway.",
        "operationId": "getKerberosSetting",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the kerberos setting has been successfully retrieved from API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"kerberosRealm\": \"krbRelam\",\r\n\t\"kerberosKDC\": \"krbDistCenter\",\r\n\t\"useSubjectCreds\": false,\r\n\t\"kerberosConfigContents\": \"\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/KerberosSettings"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while fetching the configured Kerberos settings from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "operationId": "updateKerberos",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request payload for Kerberos settings in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KerberosSettings"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"kerberosRealm\": \"krbRelam\",\r\n\t\"kerberosKDC\": \"krbDistCenter\",\r\n\t\"useSubjectCreds\": false,\r\n\t\"kerberosConfigContents\": \"\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the configured Kerberos settings have been successfully persisted in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the Kerberos settings in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/keystore": {
      "get": {
        "description": "The method gets all keystores available in API Gateway.",
        "operationId": "getKeystores",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that all keystores have been successfully fetched from API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"keystores\": [{\r\n\t\t\"keyStoreName\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyStoreDescription\": \"Default keystore alias for Integration Server.\",\r\n\t\t\"keyStoreType\": \"JKS\",\r\n\t\t\"keyStoreProvider\": \"SUN\",\r\n\t\t\"keyStorePassword\": \"wm.security.keystore.DEFAULT_IS_KEYSTORE\",\r\n\t\t\"pkAliasesList\": \"ssos\",\r\n\t\t\"pkPasswordsList\": \"wm.security.keystore.DEFAULT_IS_KEYSTORE.ssos\",\r\n\t\t\"nullPKpasswds\": \"false\",\r\n\t\t\"bitarray\": \"1\",\r\n\t\t\"isWarning\": false,\r\n\t\t\"isLoaded\": true,\r\n\t\t\"message\": null,\r\n\t\t\"fileContent\": \"/u3+7QAAAAIAAAABAAAAAQAEc3NvcwAAAU3jFrE/AAAFAzCCBP8wDgYKKwYBBAEqAhEBAQUABIIE6/2CimpqOXAELQb47VWbZx5vQionU7882vDKQywXT2726dYXQK/YBtK3ufezdzTg82EEWyqw75YuqMcaa5zS8FiGEovvf2DsdCcHWkAso24Ya1l56j+FgF5TsaOrFcKu3HjuyzhqgDiD/U7NfIcFud4kaBxNI23/ouvB7O7+JOww8xzE2pyxtvGyyvzqMDHFE8+h0X+dSgVVCioL794mP7gj2ujg2EKS9lI1KhFjrZfOn6kLnDAsd1QUfAdJxrooLXPP97auAApX2C5aD+lIdS+yPs0eC7h0R3QBYBiPuCEBPmna0C2iZtukqmCNH/W0VPbdIswz0KcCATFH8LuC3Mg3IbTqdXFj4bzUPACqutmyObyGwFKEzNdicTV2f6UJDBfUnl7ip1f4vb/a18PM+FuKsHigW6+PHWAo4hc85ntFjXoQBKgSpeneuiRIQbvmcWlp68FVuebJjMsmYKsvhIfCTUWYmf3iS6sQUILD3IKvbZJqFIZ8iwdiHljW7wN8Cbu1Wrv8vj1pV38I8C1bmsUv7mCwEmOtAcCfBoduxG+iy/LsgQW4vCj3gCm98Fv/AKD7pe+IhVkVEY8m37W6wNgdDgDKHg9txgrckBY1gOEm4Z1bhlBFFLkfJBUN1hdQu425HK9EgOO0EsjDTi1jqUPuCIZ+1XqlN7W/5pmD9NH7Oo2pji9rFoPMBibs6h5dWGkjxGft3aGBkCuhPOSHbgJbSM/yNowVMlj9PNutJvNiqkVBT9aw1f8ANN7r1+X4JusVZAshesN6R6K3v/UlgOxIB9C41M4P57LCq\",\r\n\t\t\"uploadFileName\": \"keystore.jks\"\r\n\t},\r\n\t{\r\n\t\t\"keyStoreName\": \"SampleCustomKeystore\",\r\n\t\t\"keyStoreDescription\": \"Sample description for the keystore.\",\r\n\t\t\"keyStoreType\": \"JKS\",\r\n\t\t\"keyStoreProvider\": \"SUN\",\r\n\t\t\"keyStorePassword\": \"wm.security.keystore.SampleCustomKeystore\",\r\n\t\t\"pkAliasesList\": \"alias1.example.com,alias2.example.com,alias3.example.com\",\r\n\t\t\"pkPasswordsList\": \"wm.security.keystore.SampleCustomKeystore.alias1.example.com, ,wm.security.keystore.SampleCustomKeystore.alias3.example.com\",\r\n\t\t\"nullPKpasswds\": \"false,true,false\",\r\n\t\t\"bitarray\": \"1,1,1\",\r\n\t\t\"isWarning\": true,\r\n\t\t\"isLoaded\": true,\r\n\t\t\"message\": \"Keystore alias 'SampleCustomKeystore' saved successfully.\",\r\n\t\t\"fileContent\": \"/u3+7QAAAAIAAAAJAAAAAgAKZGFlaW5tcmgzMQAAAV2xXQI0AAVYLjUwOQAAA6kwggOlMIICjaADAgECAgRtzQjDMA0GCSqGSIb3DQEBBAUAMIGCMQswCQYDVQQGEwJERTEQMA4GA1UECBMHR2VybWFueTESMBAGA1UEBxMJRGFybXN0YWR0MRQwEgYDVQQKEwtTb2Z0d2FyZSBBRzEXMBUGA1UECxMOU29mdHdhcmUgQUcgQ0ExHjAcBgNVBAMTFWRhZWlubXJoMzEuZXVyLmFkLnNhZzAeFw0xNzA3MjzdGFkdDEUMBIGA1UEChMLU29mdHdhcmUgQUcxFzAVBgNVBAsTDlNvZnR3YXJlIEFHIENBMRwwGgYDVQQDExNtY2RzYW4wMi5ldXIuYWQuc2FnMB4XDTE3MDcwNDExNDkwOFoXDTI3MDcwMjExNDkwOFowgYAxCzAJBgNVBAYTAkRFMRAwDgYDVQQIEwdHZXJtYW55MRIwEAYDVQQHEwlEYXJtc3RhZHQxFDASBgNVBAoTC1NvZnR3YXJlIEFHMRcwFQYDVQQLEw5Tb2Z0d2FyZSBBRyBDVR0OBBYEFBTbx0ge90nA8/f5nj0Q3vvDHKfQMA0GCSqGSIb3DQEBBAUAA4IBAQCSmYycBUW30RT6v5dUL7OuWF1uOnTqycEJTXTs0NXsW/bpuwI2sUX/rZrivvOlWejy4hIwtjWfVIAhhE1TOeSV6CNr9MnvMgs0u9jUJ8un8dKPujmBfxPI07kzgshkMzHk0L/hacprYHkYKASOG0pjvPNXMaMULIuOJ/bo4sAUSqg6gnIhR/0K/9HK5Q6wsYKEmCefT4AbCaqo6ns74f0r7n459hh4Ur0hmWy3aEdUZ6NXJU6RngoXo2JFdjV711nmK3+vjzQfmCc+SCIe3M9gynWDt1kTamUweQH+OVBTPlEhBzUh+b0qQznvSvxRQYJd/veFAg4xbU4iTXV5O5Zi0aX/9Us0at03ku9iQ7iWupy88+w=\",\r\n\t\t\"uploadFileName\": \"keystore_file.jks\"\r\n\t}]\r\n}"
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyStore"
              }
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the available keystores from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "Creates a keystore in API Gateway.",
        "operationId": "createKeystore",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyStoreName",
            "in": "formData",
            "description": "The name of the keystore. It cannot contain spaces or special characters. The name of the key store must be unique across all the keystores created in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "SampleCustomKeystore"
          },
          {
            "name": "keyStoreDescription",
            "in": "formData",
            "description": "The description for the keystore.",
            "required": false,
            "type": "string",
            "x-example": "Sample description for the keystore."
          },
          {
            "name": "keyStoreType",
            "in": "formData",
            "description": "The certificate file format of the keystore.",
            "required": true,
            "type": "string",
            "default": "JKS",
            "x-example": "JKS",
            "enum": [
              "JKS",
              "PKCS12"
            ]
          },
          {
            "name": "keyStorePassword",
            "in": "formData",
            "description": "The keystore password that is defined at the time of keystore creation using a keystore utility.",
            "required": true,
            "type": "string",
            "x-example": "keystore_password"
          },
          {
            "name": "uploadFileName",
            "in": "formData",
            "description": "The name of the keystore file that will be used to save the keystore internally in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "keystore_file.jks"
          },
          {
            "name": "fileContent",
            "in": "formData",
            "description": "The contents of the truststore file.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pkAliasesList",
            "in": "formData",
            "description": "Comma separated list of alias names in the uploaded keystore file.",
            "required": false,
            "type": "string",
            "x-example": "alias1.example.com,alias2.example.com,alias3.example.com"
          },
          {
            "name": "pkPasswordsList",
            "in": "formData",
            "description": "Comma separated list of passwords in the same order as the aliases specified in pkAliasesList. If a particular key alias does not have a password, it is denoted by space.",
            "required": false,
            "type": "string",
            "x-example": "alias1_password, ,alias3_password"
          },
          {
            "name": "nullPKpasswds",
            "in": "formData",
            "description": "Comma separated list of boolean values (true/false) indicating whether the particular alias has a password or not in the same order as the aliases specified in pkAliasesList. For each key alias, true indicates that the key alias does not have a password and false indicates that it does have a password.",
            "required": false,
            "type": "string",
            "x-example": "false,true,false"
          },
          {
            "name": "isPwdBase64Encoded",
            "in": "formData",
            "description": "Specifies whether password is base 64 encoded.",
            "required": false,
            "type": "string",
            "x-example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the keystore has been successfully persisted in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"keyStoreName\": \"SampleCustomKeystore\",\r\n\t\"keyStoreDescription\": \"Sample description for the keystore.\",\r\n\t\"keyStoreType\": \"JKS\",\r\n\t\"keyStoreProvider\": \"SUN\",\r\n\t\"keyStorePassword\": \"wm.security.keystore.SampleCustomKeystore\",\r\n\t\"pkAliasesList\": \"alias1.example.com,alias2.example.com,alias3.example.com\",\r\n\t\"pkPasswordsList\": \" , , \",\r\n\t\"nullPKpasswds\": \"false,false,false\",\r\n\t\"bitarray\": \"0,0,0\",\r\n\t\"isWarning\": true,\r\n\t\"isLoaded\": true,\r\n\t\"message\": \"Keystore alias 'SampleCustomKeystore' saved successfully. Warning:  before using the keystore, you must create a password for at least one of its key aliases. Please edit the keystore alias configuration and add one or more valid key alias passwords.\",\r\n\t\"fileContent\": \"/u3+7QAAAAIAAAAJAAAAAgAKZGFlaW5tcmgzMQAAAV2xXQI0AAVYLjUwOQAAA6kwggOlMIICjaADAgECAgRtzQjDMA0GCSqGSIb3DQEBBAUAMIGCMQswCQYDVQQGEwJERTEQMA4GA1UECBMHR2VybWFueTESMBAGA1UEBxMJRGFybXN0YWR0MRQwEgYDVQQKEwtTb2Z0d2FyZSBBRzEXMBUGA1UECxMOU29mdHdhcmUgQUcgQ0ExHjAcBgNVBAMTFWRhZWlubXJoMzEuZXVyLmFkLnNhZzAeFw0xNzA3RFMRAwDgYDVQQIEwdHZXJtYW55MRIwEAYDVQQHEwlEYXJtc3RhZHQxFDASBgNVBAoTC1NvZnR3YXJlIEFHMRcwFQYDVQQLEw5Tb2Z0d2FyZSBBRyBDQTEcMBoGA1UEAxMTbWNkc2FuMDIuZXVyLmFkLnNhZzCCAS6RngoXo2JFdjV711nmK3+vjzQfmCc+SCIe3M9gynWDt1kTamUweQH+OVBTPlEhBzUh+b0qQznvSvxRQYJd/veFAg4xbU4iTXV5O5Zi0aX/9Us0at03ku9iQ7iWupy88+w=\",\r\n\t\"uploadFileName\": \"keystore_file.jks\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/KeyStore"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the keystore in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/keystore/{keyStoreName}": {
      "get": {
        "description": "The method gets keystore matching the name in API Gateway.",
        "operationId": "getKeystore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyStoreName",
            "in": "path",
            "description": "Keystore name to identify the corresponding Keystore",
            "required": true,
            "type": "string",
            "x-example": "DEFAULT_IS_KEYSTORE"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the requested keystore has been successfully fetched from API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"keystores\": [{\r\n\t\t\"keyStoreName\": \"SampleCustomKeystore\",\r\n\t\t\"keyStoreDescription\": \"Sample description for the keystore.\",\r\n\t\t\"keyStoreType\": \"JKS\",\r\n\t\t\"keyStoreProvider\": \"SUN\",\r\n\t\t\"keyStorePassword\": \"wm.security.keystore.SampleCustomKeystore\",\r\n\t\t\"pkAliasesList\": \"alias1.example.com,alias2.example.com,alias3.example.com\",\r\n\t\t\"pkPasswordsList\": \"wm.security.keystore.SampleCustomKeystore.alias1.example.com, ,wm.security.keystore.SampleCustomKeystore.alias3.example.com\",\r\n\t\t\"nullPKpasswds\": \"false,true,false\",\r\n\t\t\"bitarray\": \"1,1,1\",\r\n\t\t\"isWarning\": true,\r\n\t\t\"isLoaded\": true,\r\n\t\t\"message\": \"Keystore alias 'SampleCustomKeystore' saved successfully.\",\r\n\t\t\"fileContent\": \"/u3+7QAAAAIAAAAJAAAAAgAKZGFlaW5tcmgzMQAAAV2xXQI0AAVYLjUwOQAAA6kwggOlMIICjaADAgECAgRtzQjDMA0GCSqGSIb3DQEBBAUAMIGCMQswCQYDVQQGEwJERTEQMA4GA1UECBMHR2VybWFueTESMBAGA1UEBxMJRGFybXN0YWR0MRQwEgYDVQQKEwtTb2Z0d2FyZSBBRzEXMBUGA1UECxMOU29mdHdhcmUgQUcgQ0ExHjAcBgNVBAMTFWRhZWlubXJoMzEuZXVyLmFkLnNhZzAeFw0xNzA3MjzdGFkdDEUMBIGA1UEChMLU29mdHdhcmUgQUcxFzAVBgNVBAsTDlNvZnR3YXJlIEFHIENBMRwwGgYDVQQDExNtY2RzYW4wMi5ldXIuYWQuc2FnMB4XDTE3MDcwNDExNDkwOFoXDTI3MDcwMjExNDkwOFowgYAxCzAJBgNVBAYTAkRFMRAwDgYDVQQIEwdHZXJtYW55MRIwEAYDVQQHEwlEYXJtc3RhZHQxFDASBgNVBAoTC1NvZnR3YXJlIEFHMRcwFQYDVQQLEw5Tb2Z0d2FyZSBBRyBDVR0OBBYEFBTbx0ge90nA8/f5nj0Q3vvDHKfQMA0GCSqGSIb3DQEBBAUAA4IBAQCSmYycBUW30RT6v5dUL7OuWF1uOnTqycEJTXTs0NXsW/bpuwI2sUX/rZrivvOlWejy4hIwtjWfVIAhhE1TOeSV6CNr9MnvMgs0u9jUJ8un8dKPujmBfxPI07kzgshkMzHk0L/hacprYHkYKASOG0pjvPNXMaMULIuOJ/bo4sAUSqg6gnIhR/0K/9HK5Q6wsYKEmCefT4AbCaqo6ns74f0r7n459hh4Ur0hmWy3aEdUZ6NXJU6RngoXo2JFdjV711nmK3+vjzQfmCc+SCIe3M9gynWDt1kTamUweQH+OVBTPlEhBzUh+b0qQznvSvxRQYJd/veFAg4xbU4iTXV5O5Zi0aX/9Us0at03ku9iQ7iWupy88+w=\",\r\n\t\t\"uploadFileName\": \"keystore_file.jks\"\r\n\t}]\r\n}"
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyStore"
              }
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the specified keystore from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "Updates an already existing keystore in API Gateway.",
        "operationId": "UpdateKeystoreAliases",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyStoreName",
            "in": "path",
            "description": "The name of the keystore. It cannot contain spaces or special characters. The name of the key store must be unique across all the keystores created in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "SampleCustomKeystore"
          },
          {
            "name": "keyStoreDescription",
            "in": "formData",
            "description": "The description for the keystore.",
            "required": false,
            "type": "string",
            "x-example": "Sample description for the keystore."
          },
          {
            "name": "keyStoreType",
            "in": "formData",
            "description": "The certificate file format of the keystore.",
            "required": true,
            "type": "string",
            "default": "JKS",
            "x-example": "JKS",
            "enum": [
              "JKS",
              "PKCS12"
            ]
          },
          {
            "name": "keyStoreProvider",
            "in": "formData",
            "description": "The provider that is used for the keystore type. The default is SUN for JKS type and SunJSSE for PKCS12 type.",
            "required": true,
            "type": "string",
            "default": "SUN",
            "x-example": "SUN",
            "enum": [
              "SUN",
              "SunJSSE"
            ]
          },
          {
            "name": "keyStorePassword",
            "in": "formData",
            "description": "The keystore password that is defined at the time of keystore creation using a keystore utility.",
            "required": true,
            "type": "string",
            "x-example": "keystore_password"
          },
          {
            "name": "uploadFileName",
            "in": "formData",
            "description": "The name of the keystore file that will be used to save the keystore internally in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "keystore_file.jks"
          },
          {
            "name": "fileContent",
            "in": "formData",
            "description": "The contents of the keystore file.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pkAliasesList",
            "in": "formData",
            "description": "Comma separated list of alias names in the uploaded keystore file.",
            "required": false,
            "type": "string",
            "x-example": "alias1.example.com,alias2.example.com,alias3.example.com"
          },
          {
            "name": "pkPasswordsList",
            "in": "formData",
            "description": "Comma separated list of passwords in the same order as the aliases specified in pkAliasesList. If a particular key alias does not have a password, it is denoted by space.",
            "required": false,
            "type": "string",
            "x-example": "alias1_password, ,alias3_password"
          },
          {
            "name": "nullPKpasswds",
            "in": "formData",
            "description": "Comma separated list of boolean values (true/false) indicating whether the particular alias has a password or not in the same order as the aliases specified in pkAliasesList. For each key alias, true indicates that the key alias does not have a password and false indicates that it does have a password.",
            "required": false,
            "type": "string",
            "x-example": "false,true,false"
          },
          {
            "name": "isPwdBase64Encoded",
            "in": "formData",
            "description": "Specifies whether password is base 64 encoded.",
            "required": false,
            "type": "string",
            "x-example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the keystore has been successfully persisted in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"keyStoreName\": \"SampleCustomKeystore\",\r\n\t\"keyStoreDescription\": \"Sample description for the keystore.\",\r\n\t\"keyStoreType\": \"JKS\",\r\n\t\"keyStoreProvider\": \"SUN\",\r\n\t\"keyStorePassword\": \"wm.security.keystore.SampleCustomKeystore\",\r\n\t\"pkAliasesList\": \"alias1.example.com,alias2.example.com,alias3.example.com\",\r\n\t\"pkPasswordsList\": \"wm.security.keystore.SampleCustomKeystore.alias1.example.com, ,wm.security.keystore.SampleCustomKeystore.alias3.example.com\",\r\n\t\"nullPKpasswds\": \"false,true,false\",\r\n\t\"bitarray\": \"1,1,1\",\r\n\t\"isWarning\": true,\r\n\t\"isLoaded\": true,\r\n\t\"message\": \"Keystore alias 'SampleCustomKeystore' saved successfully.\",\r\n\t\"fileContent\": \"/u3+7QAAAAIAAAAJAAAAAgAKZGFlaW5tcmgzMQAAAV2xXQI0AAVYLjUwOQAAA6kwggOlMIICjaADAgECAgRtzQjDMA0GCSqGSIb3DQEBBAUAMIGCMQswCQYDVQQGEwJERTEQMA4GA1UECBMHR2VybWFueTESMBAGA1UEBxMJRGFybXN0YWR0MRQwEgYDVQQKEwtTb2Z0d2FyZSBBRzEXMBUGA1UECxMOU29mdHdhcmUgQUcgQ0ExHjAcBgNVBAMTFWRhZWlubXJoMzEuZXVyLmFkLnNhZzAeFw0xNzA3MjzdGFkdDEUMBIGA1UEChMLU29mdHdhcmUgQUcxFzAVBgNVBAsTDlNvZnR3YXJlIEFHIENBMRwwGgYDVQQDExNtY2RzYW4wMi5ldXIuYWQuc2FnMB4XDTE3MDcwNDExNDkwOFoXDTI3MDcwMjExNDkwOFowgYAxCzAJBgNVBAYTAkRFMRAwDgYDVQQIEwdHZXJtYW55MRIwEAYDVQQHEwlEYXJtc3RhZHQxFDASBgNVBAoTC1NvZnR3YXJlIEFHMRcwFQYDVQQLEw5Tb2Z0d2FyZSBBRyBDVR0OBBYEFBTbx0ge90nA8/f5nj0Q3vvDHKfQMA0GCSqGSIb3DQEBBAUAA4IBAQCSmYycBUW30RT6v5dUL7OuWF1uOnTqycEJTXTs0NXsW/bpuwI2sUX/rZrivvOlWejy4hIwtjWfVIAhhE1TOeSV6CNr9MnvMgs0u9jUJ8un8dKPujmBfxPI07kzgshkMzHk0L/hacprYHkYKASOG0pjvPNXMaMULIuOJ/bo4sAUSqg6gnIhR/0K/9HK5Q6wsYKEmCefT4AbCaqo6ns74f0r7n459hh4Ur0hmWy3aEdUZ6NXJU6RngoXo2JFdjV711nmK3+vjzQfmCc+SCIe3M9gynWDt1kTamUweQH+OVBTPlEhBzUh+b0qQznvSvxRQYJd/veFAg4xbU4iTXV5O5Zi0aX/9Us0at03ku9iQ7iWupy88+w=\",\r\n\t\"uploadFileName\": \"keystore_file.jks\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/KeyStore"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the keystore in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "Deletes keystore matching the specified name in API Gateway.",
        "operationId": "deleteKeystore",
        "parameters": [
          {
            "name": "keyStoreName",
            "in": "path",
            "description": "Keystore name to identify the corresponding Keystore",
            "required": true,
            "type": "string",
            "x-example": "DEFAULT_IS_KEYSTORE"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified keystore has been deleted successfully from API Gateway.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyStore"
              }
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while deleting the specified keystore from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/license": {
      "get": {
        "description": "Retrieves the license details from API Gateway.",
        "operationId": "getLicenseDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the license has been successfully retrieved from API Gateway.",
            "examples": {
              "application/json": "{ \r\n\t\"LicenseInfo\": { \r\n\t\t\"Clustering\": \"true\", \r\n\t\t\"Publish / Subscribe\": \"false\", \r\n\t\t\"Adapter Runtime\": \"false\", \r\n\t\t\"Remote Invoke\": \"true\", \r\n\t\t\"Guaranteed Delivery\": \"false\", \r\n\t\t\"Security Auditing\": \"true\", \r\n\t\t\"Enterprise Gateway\": \"true\", \r\n\t\t\"Distributed Cache\": \"true\", \r\n\t\t\"Microservices\": \"false\" }, \r\n\t\"LicenseDetails\": [ { \r\n\t\t\"Sales Information\": { \r\n\t\t\t\"Serial Number\": \"12323232\", \r\n\t\t\t\"License Key\": \"dddddddddddddddddd\", \r\n\t\t\t\"Customer ID\": \"LK-WIN\", \r\n\t\t\t\"Customer Name\": \"Software AG Internal\", \r\n\t\t\t\"ContractDetails\": \"1\", \r\n\t\t\t\"ContractPosNumber\": \"1\", \r\n\t\t\t\"License Type Details\": \"Internal\", \r\n\t\t\t\"AutoCallHome\": \"\" \r\n\t\t} \r\n\t}, \r\n\t{ \r\n\t\t\"Product Information\": { \r\n\t\t\t\"Expiration Date\": \"2019-12-01 23:59:59 IST\", \r\n\t\t\t\"Operating System\": \"win\", \r\n\t\t\t\"Product Code\": \"YAIAA\", \r\n\t\t\t\"Product ID\": \"\", \r\n\t\t\t\"Product Name\": \"API Gateway Advanced Edition\", \r\n\t\t\t\"Product Version\": \"10.1\", \r\n\t\t\t\"Usage\": \"1\", \r\n\t\t\t\"RenewalDate\": \"\", \r\n\t\t\t\"HigherLevPosNr\": \"\", \r\n\t\t\t\"HigherLevProdCode\": \"\", \r\n\t\t\t\"HigherLevProdName\": \"\" \r\n\t\t} \r\n\t}, \r\n\t{ \r\n\t\t\"Integration Server\": { \r\n\t\t\t\"Product Code\": \"YAI\", \r\n\t\t\t\"Product Version\": \"10.1\", \r\n\t\t\t\"Concurrent Sessions\": \"Unlimited\", \r\n\t\t\t\"Clustering\": \"yes\", \r\n\t\t\t\"Publish / Subscribe\": \"no\", \r\n\t\t\t\"Adapter Runtime\": \"no\", \r\n\t\t\t\"Remote Invoke\": \"yes\", \r\n\t\t\t\"Guaranteed Delivery\": \"no\", \r\n\t\t\t\"Security Auditing\": \"yes\", \r\n\t\t\t\"Distributed Cache\": \"yes\", \r\n\t\t\t\"Enterprise Gateway\": \"yes\" \r\n\t\t} \r\n\t}, \r\n\t{ \r\n\t\t\"License Information\": { \r\n\t\t\t\"Price Unit\": \"CoreA\", \r\n\t\t\t\"Price Quantity\": \"1\", \r\n\t\t\t\"TypeOfInstallation\": \"1\", \r\n\t\t\t\"LicenseType\": \"\", \r\n\t\t\t\"ExtendedRights\": \"\", \r\n\t\t\t\"LicenseVersion\": \"1.2\", \r\n\t\t\t\"Metering\": \"\" \r\n\t\t} \r\n\t}, \r\n\t{ \r\n\t\t\"API Gateway\": { \r\n\t\t\t\"Policy Management - Threat Protection\": \"yes\", \r\n\t\t\t\"Policy Management - Gateway\": \"yes\", \r\n\t\t\t\"Application Management\": \"yes\", \r\n\t\t\t\"APIManagement\": \"yes\" \r\n\t\t} \r\n\t} \r\n\t], \r\n\t\"TerracottaLicenseInformation\": { \r\n\t\t\"License File\": null, \r\n\t\t\"BigMemory\": \"no\", \r\n\t\t\"Expiration Date\": null \r\n\t}, \r\n\t\"LicenseSettings\": { \r\n\t\t\"LicenseKeyFile\": \"C:\\GatewayTrunk\\IntegrationServer\\instances\\default\\config\\licenseKey.xml\", \r\n\t\t\"terracottaLicenseFileSet\": null \r\n\t\t} \r\n\t}"
            },
            "schema": {
              "$ref": "#/definitions/LicenseDetail"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while fetching the configured license details from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "operationId": "updateLicenseDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request payload for updating license details in APIGateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicenseDetail"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"APIGatewayLicensePath\": \"C:\\GatewayTrunk\\IntegrationServer\\instances\\default\\config\\licenseKey.xml\", \r\n\t\"TerraCottaLicensePath\": \"C:\\Documents\\SAG License\\terracotta-license.key\" \r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the configured license details have been successfully persisted in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the license details in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/outboundproxy": {
      "get": {
        "description": "Retrieves the list of all available outbound proxy server aliases in API Gateway.",
        "operationId": "getOutboundProxies",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the outbound proxy server aliases has been successfully retireved from API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"proxyServerList\": {\r\n\t\t\"https_proxy\": {\r\n\t\t\t\"proxyAlias\": \"https_proxy\",\r\n\t\t\t\"host\": \"10.20.30.40\",\r\n\t\t\t\"port\": \"443\",\r\n\t\t\t\"username\": \"https_proxy_username\",\r\n\t\t\t\"password\": \"**********\",\r\n\t\t\t\"protocol\": \"HTTPS\",\r\n\t\t\t\"isDefault\": \"Y\",\r\n\t\t\t\"status\": \"Enabled\",\r\n\t\t\t\"ftpType\": null,\r\n\t\t\t\"socksVersion\": null,\r\n\t\t\t\"passwordHandle\": \"OutboundProxyPasswordhttps_proxy\",\r\n\t\t\t\"caller\": \"Administrator\",\r\n\t\t\t\"entityId\": \"https_proxy\"\r\n\t\t},\r\n\t\t\"ftp_proxy_alias\": {\r\n\t\t\t\"proxyAlias\": \"ftp_proxy_alias\",\r\n\t\t\t\"host\": \"ftp.proxy.server.com\",\r\n\t\t\t\"port\": \"8745\",\r\n\t\t\t\"username\": \"username\",\r\n\t\t\t\"password\": \"*****\",\r\n\t\t\t\"protocol\": \"FTP\",\r\n\t\t\t\"isDefault\": \"N\",\r\n\t\t\t\"status\": \"Enabled\",\r\n\t\t\t\"ftpType\": \"2\",\r\n\t\t\t\"socksVersion\": null,\r\n\t\t\t\"passwordHandle\": \"OutboundProxyPasswordftp_proxy_alias\",\r\n\t\t\t\"caller\": \"Administrator\",\r\n\t\t\t\"entityId\": \"ftp_proxy_alias\"\r\n\t\t},\r\n\t\t\"socks_proxy\": {\r\n\t\t\t\"proxyAlias\": \"socks_proxy\",\r\n\t\t\t\"host\": \"socks.proxy.server.com\",\r\n\t\t\t\"port\": \"447\",\r\n\t\t\t\"username\": \"\",\r\n\t\t\t\"password\": \"\",\r\n\t\t\t\"protocol\": \"SOCKS\",\r\n\t\t\t\"isDefault\": \"N\",\r\n\t\t\t\"status\": \"Disabled\",\r\n\t\t\t\"ftpType\": \"0\",\r\n\t\t\t\"socksVersion\": \"4\",\r\n\t\t\t\"passwordHandle\": null,\r\n\t\t\t\"caller\": \"Administrator\",\r\n\t\t\t\"entityId\": \"socks_proxy\"\r\n\t\t}\r\n\t}\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/OutboundProxyGetResponse"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the available outbound proxy server aliases from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "operationId": "createOutboundProxy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request payload of an outbound proxy server that is to be created in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundProxySettings"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"proxyAlias\": \"http_proxy_alias\",\r\n\t\"host\": \"proxy.http.server.com\",\r\n\t\"port\": \"80\",\r\n\t\"username\": \"proxy_user\",\r\n\t\"password\": \"proxy_password\",\r\n\t\"protocol\": \"HTTP\",\r\n\t\"isDefault\": \"N\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the outbound proxy server alias has been successfully created in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the outbound proxy server alias in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "operationId": "updateOutboundProxy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request payload of an outbound proxy server that is to be updated in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundProxySettings"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"proxyAlias\": \"http_proxy_alias\",\r\n\t\"host\": \"proxy.http.server.com\",\r\n\t\"port\": \"80\",\r\n\t\"username\": \"proxy_user\",\r\n\t\"password\": \"proxy_password_modified\",\r\n\t\"protocol\": \"HTTP\",\r\n\t\"isDefault\": \"N\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the outbound proxy server alias has been successfully updated in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the outbound proxy server alias in the API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/outboundproxy/{outboundproxyAlias}": {
      "delete": {
        "description": "Deletes the specified outbound proxy server alias from API Gateway.",
        "operationId": "deleteOutboundProxy",
        "parameters": [
          {
            "name": "outboundproxyAlias",
            "in": "path",
            "description": "The outbound proxy server alias to be deleted",
            "required": true,
            "type": "string",
            "x-example": "sample_proxy_alias"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the outbound proxy server alias has been successfully deleted from API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while deleting the specified outbound proxy server alias from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/outboundproxy{outboundproxyAlias}/disable": {
      "put": {
        "description": "Disables an already existing outbound proxy server alias in API Gateway.",
        "operationId": "disableOutboundProxy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "outboundproxyAlias",
            "in": "path",
            "description": "The outbound proxy server alias to be disabled",
            "required": true,
            "type": "string",
            "x-example": "sample_proxy_alias"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the outbound proxy server alias has been successfully disabled in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while disabling the outbound proxy server alias in the API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/outboundproxy{outboundproxyAlias}/enable": {
      "put": {
        "description": "Enables an already existing outbound proxy server alias in API Gateway.",
        "operationId": "enableOutboundProxy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "outboundproxyAlias",
            "in": "path",
            "description": "The outbound proxy server alias to be enabled",
            "required": true,
            "type": "string",
            "x-example": "sample_proxy_alias"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the outbound proxy server alias has been successfully enabled in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while enabling the outbound proxy server alias in the API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/proxyBypass": {
      "get": {
        "description": "The method retrieves a list of all hostlists for which outbound proxy servers are skipped. Note: proxyBypass Id is always proxyBypass",
        "operationId": "getProxyBypass",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the proxyBypassAddresses are successfully retrieved.",
            "examples": {
              "application/json": "{\"proxyBypassAddresses\":[\"localhost\"]}"
            },
            "schema": {
              "$ref": "#/definitions/ProxyBypass"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the available proxybypass from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "The method updates the proxyBypassAddresses to bypass the outbound proxy servers. The API request body must contain the payload. In the proxyBypassAddresses field, type the fully qualified host and domain name of each server to which you want the Integration Server to issue requests directly. Type the host name and the domain name exactly as they appear in the URLs the server uses. To enter multiple names, separate each with commas.\r\nYou can use the asterisk (*) to identify several servers with similar names. The asterisk matches any number of characters. For example, if you want to bypass requests made to localhost, www.yahoo.com, home.microsoft.com, and all hosts whose names begin with NYC, you would type:\r\nlocalhost,www.yahoo.com,home.microsoft.com, NYC*.*",
        "operationId": "saveProxyBypass",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request payload of proxybypass server that is to be saved in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyBypass"
            },
            "x-examples": {
              "application/json": "{\"proxyBypassAddresses\":[\"localhost\"]}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the proxybypass server has been successfully created in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the proxybypass  in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method updates the proxyBypassAddresses to bypass the outbound proxy servers. The API request body must contain the payload. In the proxyBypassAddresses field, type the fully qualified host and domain name of each server to which you want the Integration Server to issue requests directly. Type the host name and the domain name exactly as they appear in the URLs the server uses. To enter multiple names, separate each with commas.\r\nYou can use the asterisk (*) to identify several servers with similar names. The asterisk matches any number of characters. For example, if you want to bypass requests made to localhost, www.yahoo.com, home.microsoft.com, and all hosts whose names begin with NYC, you would type:\r\nlocalhost,www.yahoo.com,home.microsoft.com, NYC*.*",
        "operationId": "updateProxyBypass",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request payload of proxybypass that is to be updated in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyBypass"
            },
            "x-examples": {
              "application/json": "{\"proxyBypassAddresses\":[\"localhost\"]}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The method updates the proxyBypassAddresses.",
            "examples": {
              "application/json": "{\"proxyBypassAddresses\":[\"localhost\"]}"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the proxybypass in the API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/truststore": {
      "get": {
        "description": "Retrieves all available truststores from API Gateway.",
        "operationId": "getTruststores",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that all trust stores have been successfully fetched from API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"truststores\": [{\r\n\t\t\"id\": \"Truststore2\",\r\n\t\t\"keyStoreName\": \"Truststore2\",\r\n\t\t\"keyStoreDescription\": \"Some sample description for truststore.\",\r\n\t\t\"keyStoreType\": \"JKS\",\r\n\t\t\"keyStoreProvider\": \"SUN\",\r\n\t\t\"keyStorePassword\": \"wm.security.keystore.Truststore2\",\r\n\t\t\"keyStoreLocation\": null,\r\n\t\t\"certficateAliases\": [\"10.21.38.112\", \"10.60.33.18\", \"10.60.37.86\"],\r\n\t\t\"isLoaded\": true,\r\n\t\t\"fileContent\": \"/u3+7QAAAAIAAAAEAAAAAgAIbWNkc2FuMDIAAAFdsV3/PwAFWC41MDkAAAOlMIIDoTCCAomgAwIBAgIEVRJWFTANBgkqhkiG9w0BAQQFADCBgDELMAkGA1UEBhMCREUxEDAOBgNVBAgTB0dlcm1hbnkxEjAQBgNVBAcTCURlRxqzR24p9unbAbjpEAlgBgiJvUAB2KKnpkRJRhS8Ae2cOC7vgMcc6r9S/cfWNnaHYcU6wqWlat+8BWh15ZyETKCnHPwOEsBZ181YLjSznzWE7Sjl887cenULQDK55HMtyF/BEwPqQH6SGGMw4WnhbEPeyNzhMrsOpM/Y6Nbx4AJ0YjbU5jA4Igw4OPRDw4z9kXgWNrjd+nwnuQmMPwaRgwmJXQQ52NC2ccTOeZ1NeXNAsqdGNXnJ6Jzb0Ge1HYRlvQ4SDj40ZRhfLOuCdbk=\",\r\n\t\t\"uploadFileName\": \"truststore2.jks\",\r\n\t\t\"isWarning\": false,\r\n\t\t\"message\": null\r\n\t}]\r\n}"
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrustStore"
              }
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the available truststores from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "Creates a truststore in API Gateway.",
        "operationId": "createTruststore",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyStoreName",
            "in": "formData",
            "description": "The name of the truststore. It cannot contain spaces or special characters. The name of the trust store must be unique across all the truststores created in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "TruststoreSampleName"
          },
          {
            "name": "keyStoreDescription",
            "in": "formData",
            "description": "The description for the truststore.",
            "required": false,
            "type": "string",
            "x-example": "Sample description for the truststore."
          },
          {
            "name": "keyStoreType",
            "in": "formData",
            "description": "The certificate file format of the truststore.",
            "required": true,
            "type": "string",
            "default": "JKS",
            "x-example": "JKS",
            "enum": [
              "JKS"
            ]
          },
          {
            "name": "keyStorePassword",
            "in": "formData",
            "description": "The truststore password that is defined at the time of truststore creation using a keystore utility.",
            "required": true,
            "type": "string",
            "x-example": "truststore_password"
          },
          {
            "name": "uploadFileName",
            "in": "formData",
            "description": "The name of the truststore file that will be used to save the truststore internally in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "truststore_file.jks"
          },
          {
            "name": "fileContent",
            "in": "formData",
            "description": "The contents of the truststore file.",
            "required": true,
            "type": "file"
          },
          {
            "name": "isPwdBase64Encoded",
            "in": "formData",
            "description": "Specifies whether password is base 64 encoded.",
            "required": false,
            "type": "string",
            "x-example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the truststore has been successfully created in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"id\": \"Truststore2\",\r\n\t\"keyStoreName\": \"Truststore2\",\r\n\t\"keyStoreDescription\": null,\r\n\t\"keyStoreType\": \"JKS\",\r\n\t\"keyStoreProvider\": \"SUN\",\r\n\t\"keyStorePassword\": \"wm.security.keystore.Truststore2\",\r\n\t\"keyStoreLocation\": null,\r\n\t\"certficateAliases\": [\"10.21.38.112\", \"10.60.33.18\", \"10.60.37.86\"],\r\n\t\"isLoaded\": true,\r\n\t\"fileContent\": \"/u3+7QAAAAIAAAAEAAAAAgAIbWNkc2FuMDIAAAFdsV3/PwAFWC41MDkAAAOlMIIDoTCCAomgAwIBAgIEVRJWFTANBgkqhkiG9w0BAQQFADCBgDELMAkGA1UEBhMCREUxEDAOBgNVBAgTB0dlcm1hbnkxEjAQBgNVBAcTCURlRxqzR24p9unbAbjpEAlgBgiJvUAB2KKnpkRJRhS8Ae2cOC7vgMcc6r9S/cfWNnaHYcU6wqWlat+8BWh15ZyETKCnHPwOEsBZ181YLjSznzWE7Sjl887cenULQDK55HMtyF/BEwPqQH6SGGMw4WnhbEPeyNzhMrsOpM/Y6Nbx4AJ0YjbU5jA4Igw4OPRDw4z9kXgWNrjd+nwnuQmMPwaRgwmJXQQ52NC2ccTOeZ1NeXNAsqdGNXnJ6Jzb0Ge1HYRlvQ4SDj40ZRhfLOuCdbk=\",\r\n\t\"uploadFileName\": \"truststore2.jks\",\r\n\t\"isWarning\": false,\r\n\t\"message\": null\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/TrustStore"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the truststore in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/truststore/{trustStoreName}": {
      "get": {
        "description": "Retrieves an existing truststore matching the given name from API Gateway.",
        "operationId": "getTruststore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trustStoreName",
            "in": "path",
            "description": "Truststore name to identify the corresponding trust store in API Gateway",
            "required": true,
            "type": "string",
            "x-example": "DEFAULT_IS_TRUSTSTORE"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the truststore has been successfully retrieved from API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"truststores\": [{\r\n\t\t\"id\": \"Truststore2\",\r\n\t\t\"keyStoreName\": \"Truststore2\",\r\n\t\t\"keyStoreDescription\": \"Some sample description for truststore.\",\r\n\t\t\"keyStoreType\": \"JKS\",\r\n\t\t\"keyStoreProvider\": \"SUN\",\r\n\t\t\"keyStorePassword\": \"wm.security.keystore.Truststore2\",\r\n\t\t\"keyStoreLocation\": null,\r\n\t\t\"certficateAliases\": [\"10.21.38.112\", \"10.60.33.18\", \"10.60.37.86\"],\r\n\t\t\"isLoaded\": true,\r\n\t\t\"fileContent\": \"/u3+7QAAAAIAAAAEAAAAAgAIbWNkc2FuMDIAAAFdsV3/PwAFWC41MDkAAAOlMIIDoTCCAomgAwIBAgIEVRJWFTANBgkqhkiG9w0BAQQFADCBgDELMAkGA1UEBhMCREUxEDAOBgNVBAgTB0dlcm1hbnkxEjAQBgNVBAcTCURlRxqzR24p9unbAbjpEAlgBgiJvUAB2KKnpkRJRhS8Ae2cOC7vgMcc6r9S/cfWNnaHYcU6wqWlat+8BWh15ZyETKCnHPwOEsBZ181YLjSznzWE7Sjl887cenULQDK55HMtyF/BEwPqQH6SGGMw4WnhbEPeyNzhMrsOpM/Y6Nbx4AJ0YjbU5jA4Igw4OPRDw4z9kXgWNrjd+nwnuQmMPwaRgwmJXQQ52NC2ccTOeZ1NeXNAsqdGNXnJ6Jzb0Ge1HYRlvQ4SDj40ZRhfLOuCdbk=\",\r\n\t\t\"uploadFileName\": \"truststore2.jks\",\r\n\t\t\"isWarning\": false,\r\n\t\t\"message\": null\r\n\t}]\r\n}"
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrustStore"
              }
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the truststore from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "Updates an already existing truststore in API Gateway.",
        "operationId": "updateTruststore",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trustStoreName",
            "in": "path",
            "description": "The name of the truststore. It cannot contain spaces or special characters. The name of the trust store must be unique across all the truststores created in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "TruststoreSampleName"
          },
          {
            "name": "keyStoreDescription",
            "in": "formData",
            "description": "The description for the truststore.",
            "required": false,
            "type": "string",
            "x-example": "Sample description for the truststore."
          },
          {
            "name": "keyStoreType",
            "in": "formData",
            "description": "The certificate file format of the truststore.",
            "required": true,
            "type": "string",
            "default": "JKS",
            "x-example": "JKS",
            "enum": [
              "JKS"
            ]
          },
          {
            "name": "keyStoreProvider",
            "in": "formData",
            "description": "The provider that is used for the truststore type.",
            "required": true,
            "type": "string",
            "default": "SUN",
            "x-example": "SUN",
            "enum": [
              "SUN"
            ]
          },
          {
            "name": "keyStorePassword",
            "in": "formData",
            "description": "The truststore password that is defined at the time of truststore creation using a keystore utility.",
            "required": true,
            "type": "string",
            "x-example": "truststore_password"
          },
          {
            "name": "uploadFileName",
            "in": "formData",
            "description": "The name of the truststore file that will be used to save the truststore internally in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "truststore_file.jks"
          },
          {
            "name": "fileContent",
            "in": "formData",
            "description": "The contents of the truststore file.",
            "required": true,
            "type": "file"
          },
          {
            "name": "isPwdBase64Encoded",
            "in": "formData",
            "description": "Specifies whether password is base 64 encoded.",
            "required": false,
            "type": "string",
            "x-example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the truststore has been successfully updated in API Gateway.",
            "examples": {
              "application/json": "{\r\n\t\"id\": \"Truststore2\",\r\n\t\"keyStoreName\": \"Truststore2\",\r\n\t\"keyStoreDescription\": null,\r\n\t\"keyStoreType\": \"JKS\",\r\n\t\"keyStoreProvider\": \"SUN\",\r\n\t\"keyStorePassword\": \"wm.security.keystore.Truststore2\",\r\n\t\"keyStoreLocation\": null,\r\n\t\"certficateAliases\": [\"10.21.38.112\", \"10.60.33.18\", \"10.60.37.86\"],\r\n\t\"isLoaded\": true,\r\n\t\"fileContent\": \"/u3+7QAAAAIAAAAEAAAAAgAIbWNkc2FuMDIAAAFdsV3/PwAFWC41MDkAAAOlMIIDoTCCAomgAwIBAgIEVRJWFTANBgkqhkiG9w0BAQQFADCBgDELMAkGA1UEBhMCREUxEDAOBgNVBAgTB0dlcm1hbnkxEjAQBgNVBAcTCURlRxqzR24p9unbAbjpEAlgBgiJvUAB2KKnpkRJRhS8Ae2cOC7vgMcc6r9S/cfWNnaHYcU6wqWlat+8BWh15ZyETKCnHPwOEsBZ181YLjSznzWE7Sjl887cenULQDK55HMtyF/BEwPqQH6SGGMw4WnhbEPeyNzhMrsOpM/Y6Nbx4AJ0YjbU5jA4Igw4OPRDw4z9kXgWNrjd+nwnuQmMPwaRgwmJXQQ52NC2ccTOeZ1NeXNAsqdGNXnJ6Jzb0Ge1HYRlvQ4SDj40ZRhfLOuCdbk=\",\r\n\t\"uploadFileName\": \"truststore2.jks\",\r\n\t\"isWarning\": false,\r\n\t\"message\": null\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/TrustStore"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the truststore in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "Deletes an already existing truststore matching the name in API Gateway.",
        "operationId": "deleteTruststore",
        "parameters": [
          {
            "name": "trustStoreName",
            "in": "path",
            "description": "Truststore name to identify the corresponding trust store to delete in API Gateway",
            "required": true,
            "type": "string",
            "x-example": "DEFAULT_IS_TRUSTSTORE"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the trust store has been successfully deleted from API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the truststore from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/webServiceEndpoints": {
      "get": {
        "description": "The method retrieves list of all Webservice endpoints in API Gateway.",
        "operationId": "getAllWebserviceEndpoints",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of Webservice endpoints is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"WebserviceEndpointAlias\": [\r\n        {\r\n            \"id\": \"c00222\",\r\n            \"alias\": \"c00222\",\r\n            \"description\": \"des\",\r\n            \"aliasType\": \"CONSUMER\",\r\n            \"transportType\": \"JMS\",\r\n            \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n            \"keyAlias\": \"ssos\",\r\n            \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n            \"timestampPrecisionInMillis\": \"false\",\r\n            \"timestampTimeToLive\": \"123\",\r\n            \"timestampMaximumSkew\": \"1234\",\r\n            \"executeACL\": \"Default\",\r\n            \"jmsAliasType\": \"JMS\",\r\n            \"jndiProvAlias\": \"\",\r\n            \"connFactoryName\": \"qpidConnectionFactory\",\r\n            \"jmsConnAlias\": \"JMS_CONN\",\r\n            \"user\": \"user\",\r\n            \"password\": \"password\"\r\n        },\r\n        {\r\n            \"id\": \"c0022\",\r\n            \"alias\": \"c0022\",\r\n            \"description\": \"des\",\r\n            \"aliasType\": \"CONSUMER\",\r\n            \"transportType\": \"JMS\",\r\n            \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n            \"keyAlias\": \"ssos\",\r\n            \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n            \"timestampPrecisionInMillis\": \"false\",\r\n            \"timestampTimeToLive\": \"123\",\r\n            \"timestampMaximumSkew\": \"1234\",\r\n            \"executeACL\": \"Default\",\r\n            \"jmsAliasType\": \"JMS\",\r\n            \"jndiProvAlias\": \"\",\r\n            \"connFactoryName\": \"qpidConnectionFactory\",\r\n            \"jmsConnAlias\": \"JMS_CONN\",\r\n            \"user\": \"user\",\r\n            \"password\": \"password\"\r\n        },\r\n        {\r\n            \"id\": \"AMQP_PROVIDER_ALIAS\",\r\n            \"alias\": \"AMQP_PROVIDER_ALIAS\",\r\n            \"description\": \"AMQP_PROVIDER_ALIAS\",\r\n            \"aliasType\": \"PROVIDER\",\r\n            \"transportType\": \"JMS\",\r\n            \"keyStoreAlias\": \"\",\r\n            \"keyAlias\": \"\",\r\n            \"trustStoreAlias\": \"\",\r\n            \"timestampPrecisionInMillis\": \"\",\r\n            \"timestampTimeToLive\": \"\",\r\n            \"timestampMaximumSkew\": \"\",\r\n            \"jmsTriggerName\": \"wm.namespace.ws:wseTrigger_\",\r\n            \"deliveryMode\": \"\",\r\n            \"timeToLive\": 0,\r\n            \"priority\": 0,\r\n            \"replyToDestType\": \"\",\r\n            \"includeConnFactoryName\": \"true\"\r\n        },\r\n        {\r\n            \"id\": \"c0021272\",\r\n            \"alias\": \"c0021272\",\r\n            \"description\": \"des\",\r\n            \"aliasType\": \"CONSUMER\",\r\n            \"transportType\": \"JMS\",\r\n            \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n            \"keyAlias\": \"ssos\",\r\n            \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n            \"timestampPrecisionInMillis\": \"false\",\r\n            \"timestampTimeToLive\": \"123\",\r\n            \"timestampMaximumSkew\": \"1234\",\r\n            \"executeACL\": \"Default\",\r\n            \"jmsAliasType\": \"JMS\",\r\n            \"jndiProvAlias\": \"\",\r\n            \"connFactoryName\": \"qpidConnectionFactory\",\r\n            \"jmsConnAlias\": \"JMS_CONN\",\r\n            \"user\": \"user\",\r\n            \"password\": \"password\"\r\n        },\r\n        {\r\n            \"id\": \"c002\",\r\n            \"alias\": \"c002\",\r\n            \"description\": \"des\",\r\n            \"aliasType\": \"CONSUMER\",\r\n            \"transportType\": \"JMS\",\r\n            \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n            \"keyAlias\": \"ssos\",\r\n            \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n            \"timestampPrecisionInMillis\": \"false\",\r\n            \"timestampTimeToLive\": \"123\",\r\n            \"timestampMaximumSkew\": \"1234\",\r\n            \"executeACL\": \"Default\",\r\n            \"jmsAliasType\": \"JNDI\",\r\n            \"jndiProvAlias\": \"JNDI_AMQP\",\r\n            \"connFactoryName\": \"qpidConnectionFactory\",\r\n            \"jmsConnAlias\": \"\",\r\n            \"user\": \"user\",\r\n            \"password\": \"password\"\r\n        },\r\n        {\r\n            \"id\": \"c00214272\",\r\n            \"alias\": \"c00214272\",\r\n            \"description\": \"des\",\r\n            \"aliasType\": \"CONSUMER\",\r\n            \"transportType\": \"JMS\",\r\n            \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n            \"keyAlias\": \"ssos\",\r\n            \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n            \"timestampPrecisionInMillis\": \"false\",\r\n            \"timestampTimeToLive\": \"123\",\r\n            \"timestampMaximumSkew\": \"1234\",\r\n            \"executeACL\": \"Default\",\r\n            \"jmsAliasType\": \"JNDI\",\r\n            \"jndiProvAlias\": \"JNDI_AMQP\",\r\n            \"connFactoryName\": \"qpidConnectionFactory\",\r\n            \"jmsConnAlias\": \"JMS_CONN\",\r\n            \"user\": \"user\",\r\n            \"password\": \"password\"\r\n        }\r\n    ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "The method creates a Webservice endpoint in API Gateway. The API request body must contain the payload for the Webservice endpoint",
        "operationId": "createWebserviceEndpoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebserviceEndpointAlias"
            },
            "x-examples": {
              "application/json": "{\r\n           \r\n            \"alias\": \"c00222\",\r\n            \"description\": \"des\",\r\n            \"aliasType\": \"CONSUMER\",\r\n            \"transportType\": \"JMS\",\r\n            \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n            \"keyAlias\": \"ssos\",\r\n            \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n            \"timestampPrecisionInMillis\": \"false\",\r\n            \"timestampTimeToLive\": \"123\",\r\n            \"timestampMaximumSkew\": \"1234\",\r\n            \"executeACL\": \"Default\",\r\n            \"jmsAliasType\": \"JMS\",\r\n            \"jndiProvAlias\": \"\",\r\n            \"connFactoryName\": \"qpidConnectionFactory\",\r\n            \"jmsConnAlias\": \"JMS_CONN\",\r\n            \"user\": \"user\",\r\n            \"password\": \"password\"\r\n        }"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the Webservice endpoint has been successfully created in API Gateway, and the newly created Webservice endpoint is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"WebserviceEndpointAlias\": {\r\n        \"id\": \"c001\",\r\n        \"alias\": \"c001\",\r\n        \"description\": \"des\",\r\n        \"aliasType\": \"CONSUMER\",\r\n        \"transportType\": \"JMS\",\r\n        \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n        \"keyAlias\": \"ssos\",\r\n        \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n        \"timestampPrecisionInMillis\": \"false\",\r\n        \"timestampTimeToLive\": \"123\",\r\n        \"timestampMaximumSkew\": \"1234\",\r\n        \"executeACL\": \"Default\",\r\n        \"jmsAliasType\": \"JMS\",\r\n        \"jndiProvAlias\": \"\",\r\n        \"connFactoryName\": \"qpidConnectionFactory\",\r\n        \"jmsConnAlias\": \"JMS_CONN\",\r\n        \"user\": \"user\",\r\n        \"password\": \"password\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/WebserviceEndpointAlias"
            }
          },
          "400": {
            "description": "This status code indicates that the Webservice endpoint with the given name already exists in API Gateway or the request body is not correct.",
            "examples": {
              "application/json": "{}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This REST service is used to update the Webservice endpoint",
        "operationId": "updateWebserviceEndpoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebserviceEndpointAlias"
            },
            "x-examples": {
              "application/json": "{\r\n        \"id\": \"c001\",\r\n        \"alias\": \"c001\",\r\n        \"description\": \"des\",\r\n        \"aliasType\": \"CONSUMER\",\r\n        \"transportType\": \"JMS\",\r\n        \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n        \"keyAlias\": \"ssos\",\r\n        \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n        \"timestampPrecisionInMillis\": \"false\",\r\n        \"timestampTimeToLive\": \"123\",\r\n        \"timestampMaximumSkew\": \"1234\",\r\n        \"executeACL\": \"Default\",\r\n        \"jmsAliasType\": \"JMS\",\r\n        \"jndiProvAlias\": \"\",\r\n        \"connFactoryName\": \"qpidConnectionFactory\",\r\n        \"jmsConnAlias\": \"JMS_CONN\",\r\n        \"user\": \"user\",\r\n        \"password\": \"password\"\r\n    }"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that API Gateway has successfully updated the specified Webservice endpoint and the updated Webservice endpoint details can be found in the response body",
            "examples": {
              "application/json": "{\r\n    \"WebserviceEndpointAlias\": {\r\n        \"id\": \"c001\",\r\n        \"alias\": \"c001\",\r\n        \"description\": \"des\",\r\n        \"aliasType\": \"CONSUMER\",\r\n        \"transportType\": \"JMS\",\r\n        \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n        \"keyAlias\": \"ssos\",\r\n        \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n        \"timestampPrecisionInMillis\": \"false\",\r\n        \"timestampTimeToLive\": \"123\",\r\n        \"timestampMaximumSkew\": \"1234\",\r\n        \"executeACL\": \"Default\",\r\n        \"jmsAliasType\": \"JMS\",\r\n        \"jndiProvAlias\": \"\",\r\n        \"connFactoryName\": \"qpidConnectionFactory\",\r\n        \"jmsConnAlias\": \"JMS_CONN\",\r\n        \"user\": \"user\",\r\n        \"password\": \"password\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/WebserviceEndpointAlias"
            }
          },
          "400": {
            "description": "Tis status code indicates the request payload is not correct and corresponding error details can be seen in the response body",
            "examples": {
              "application/json": ""
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/is/webServiceEndpoints/{webserviceEndpointId}": {
      "get": {
        "description": "The method retrieves the specified Webservice endpoint in API Gateway.",
        "operationId": "getWebserviceEndpoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webserviceEndpointId",
            "in": "path",
            "description": "This path parameter is used to specify the Webservice endpoint id which Webservice endpoint needs to be retrived.",
            "required": true,
            "type": "string",
            "x-example": "sampleEndpoint"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the specified Webservice endpoint is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"WebserviceEndpointAlias\": {\r\n        \"id\": \"c001\",\r\n        \"alias\": \"c001\",\r\n        \"description\": \"des\",\r\n        \"aliasType\": \"CONSUMER\",\r\n        \"transportType\": \"JMS\",\r\n        \"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n        \"keyAlias\": \"ssos\",\r\n        \"trustStoreAlias\": \"DEFAULT_IS_TRUSTSTORE\",\r\n        \"timestampPrecisionInMillis\": \"false\",\r\n        \"timestampTimeToLive\": \"123\",\r\n        \"timestampMaximumSkew\": \"1234\",\r\n        \"executeACL\": \"Default\",\r\n        \"jmsAliasType\": \"JMS\",\r\n        \"jndiProvAlias\": \"\",\r\n        \"connFactoryName\": \"qpidConnectionFactory\",\r\n        \"jmsConnAlias\": \"JMS_CONN\",\r\n        \"user\": \"user\",\r\n        \"password\": \"password\"\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/WebserviceEndpointAlias"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the Webservice endpoint id specified is not found in API Gateway",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Exception occured : The Webservice endpoint object with the given ID: Consumer123 couldn't found\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "This delete request will delete the Webservice endpoint based on the Webservice endpoint id which is specified in path",
        "operationId": "deleteWebserviceEndpoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webserviceEndpointId",
            "in": "path",
            "description": "This path parameter is used to specify the Webservice endpoint id for which Webservice endpoint needs to deleted.",
            "required": true,
            "type": "string",
            "x-example": "sampleEndpoint"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "description": "This status code indicates either user didn't provide any user credential or user doesn't have API Gateway Administrator or API Gateway provider access to delete the assertion."
          },
          "404": {
            "description": "This status code indicates that the corresponding Webservice endpoint id does not exist",
            "examples": {
              "application/json": "{\r\n  \"errorDetails\": \" Unable to find the resource: 685e99ee-0e1b-4afa-8ff3-4322cf2965661\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/logAggregation/downloadLogs": {
      "get": {
        "description": "This resource is used to download logs from different components used by APIGateway, server configurations and thread dumps.",
        "operationId": "downloadLogs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "multipart/form-data"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This response indicates that the logs are downloaded successfully. The response body is the zipped archive."
          },
          "400": {
            "description": "This response indicates that the server has encountered an error while downloading the logs."
          },
          "401": {
            "description": "This status code indicates that the user did not provide any user credential or the user is not authorized to download the logs."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/masterPassword": {
      "get": {
        "description": "This retrieves the master password properties in API Gateway.",
        "operationId": "getMasterPasswordProperties",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the master password properties are retrieved successfully",
            "examples": {
              "application/json": "{\r\n    \"lastChangeDate\": \"2018-09-04 11:50:51 IST\",\r\n    \"expireDate\": \"2018-12-03 11:50:51 IST\",\r\n    \"expireInterval\": \"90\",\r\n    \"daysTilExpire\": \"75\",\r\n    \"expireMessage\": null,\r\n    \"statusMessage\": \"Active\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/MasterPasswordProperties"
            }
          },
          "401": {
            "description": "This status code indicates that the necessary authentication is not supplied for accessing this resource"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/masterPassword/reset": {
      "put": {
        "description": "Resets the master password to the default value in API Gateway.This should be performed when the master password is lost and after a successful reset, it is recommended to change the master password again to a secure value",
        "operationId": "ResetMasterPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the master password has been successfully updated to default value",
            "examples": {
              "application/json": "{\r\n    \"handleCount\": \"7\",\r\n    \"message\": \"7 passwords reset\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/MasterPasswordResetResponse"
            }
          },
          "400": {
            "description": "This status code indicates that either the required parameters are missing or the parameters passed are incorrect"
          },
          "401": {
            "description": "This status code indicates that the necessary authentication is not supplied for accessing this resource"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/masterPassword/setExpiry": {
      "put": {
        "description": "The method updates the expiry interval of the master password in API Gateway.",
        "operationId": "UpdateExpiryInterval",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MasterPasswordExpiryInterval"
            },
            "x-examples": {
              "application/json": "{ \r\n\t\"expireInterval\": \"30\" \r\n}\r\n\t"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the master password expiry interval has been successfully updated in API Gateway",
            "examples": {
              "application/json": "{\r\n    \"expireInterval\": \"60\",\r\n    \"message\": \"Master password expiration interval updated\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/MasterPasswordExpiryIntervalResponse"
            }
          },
          "400": {
            "description": "This status code indicates that either the required parameters are missing or the parameters passed are incorrect"
          },
          "401": {
            "description": "This status code indicates that the necessary authentication is not supplied for accessing this resource"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/masterPassword/update": {
      "put": {
        "description": "The method updates the master password in API Gateway.On successful update,all the old passwords available will be encrypted using this new master password.",
        "operationId": "UpdateMasterPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MasterPasswordUpdate"
            },
            "x-examples": {
              "application/json": "{ \r\n     \"oldPassword\":\"bWFuYWdl\",\r\n    \"newPassword\":\"c2VjdXJlcGFzc3dvcmQ=\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the master password has been successfully updated",
            "examples": {
              "application/json": "{\r\n    \"message\": \"New master password saved\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/MasterPasswordUpdateResponse"
            }
          },
          "400": {
            "description": "This status code indicates that either the required parameters are missing or the parameters passed are incorrect"
          },
          "401": {
            "description": "This status code indicates that the necessary authentication is not supplied for accessing this resource"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/migration": {
      "post": {
        "description": "Triggers a migration action and immediately returns with 202 status code. Clean action clears the data from the API Gateway data store, reindex action reindex the data from the source Elasticsearch to API Gateway data store and transform action transforms the reindexed assets in the API Gateway data store to be compatible with the current API Gateway version. The clean action should be invoked on target API Gateway server prior to invoking reindex API for core indices. The current status of the action can be retrieved using /migration/status API. A webhook event with the migration status also would be sent to the subscribed webhook clients",
        "operationId": "migration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MigrationConfig"
            },
            "x-examples": {
              "application/json": "{\r\n  \"action\": \"reindex\",\r\n  \"indicesType\": \"core\",\r\n  \"sourceElasticsearch\": {\r\n    \"url\": \"http://localhost:9200\"\r\n  },\r\n  \"properties\": {\r\n    \"apigateway.migration.srcTenantName\": \"default\",\r\n    \"apigateway.migration.batchSize\": 100,\r\n    \"apigateway.migration.logLevel\": \"info\",\r\n    \"apigateway.migration.reindex.status.check.sleep.interval\": 5000,\r\n    \"apigateway.migration.batchSize.gateway_{0}_apis\": 50,\r\n    \"apigateway.migration.batchSize.gateway_{0}_log\": 100,\r\n    \"apigateway.migration.batchSize.gateway_{0}_audit_auditlogs\": 50,\r\n    \"apigateway.migration.batchSize.gateway_{0}_analytics_transactionalevents\": 50\r\n  }\r\n}"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "This response indicates that the migration action has been successfully initiated.",
            "examples": {
              "application/json": "{\r\n  \"status\": \" clean operation is in progress\"\r\n}"
            }
          },
          "400": {
            "description": "This status code indicates that the request is missing required properties and/or containes invalid values."
          },
          "401": {
            "description": "This response indicates that invalid credentials have been provided for the request."
          },
          "409": {
            "description": "This status code indicates that the requested migration action is already in progress."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/migration/status": {
      "get": {
        "description": "RRetrieves the current status of the migration action which is invoked in API Gateway.",
        "operationId": "getMigrationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "The migration action for which the status to be sent",
            "required": true,
            "type": "string",
            "x-example": "reindex",
            "enum": [
              "reindex",
              "transform",
              "clean"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that migration action's status is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"status\": \"success\"\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the status of the migration action is not found in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/portalGateways": {
      "get": {
        "description": "This API allows you to retrieve API Portal configurations available in API Gateway.",
        "operationId": "getAllAPIPortalConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that all the API Portal configurations are retrieved successfully.",
            "examples": {
              "application/json": "{\r\n\t\"portalGatewayResponse\": [{\r\n\t\t\t\"id\": \"c7059719-e434-4b45-9b09-b5176fa8b787\",\r\n\t\t\t\"gatewayName\": \"myportal\",\r\n\t\t\t\"gatewayUsername\": \"adminUser\",\r\n\t\t\t\"gatewayPassword\": \"*****\",\r\n\t\t\t\"gatewayURL\": \"http://apigateway_host:5555\",\r\n\t\t\t\"refId\": \"2609fc40-87d2-11e7-1298-d481d790920c\",\r\n\t\t\t\"externalPortal\": {\r\n\t\t\t\t\"type\": \"apiportal\",\r\n\t\t\t\t\"endpointTenant\": \"default\",\r\n\t\t\t\t\"endpointURL\": \"http://api_portal_host/\",\r\n\t\t\t\t\"endpointUsername\": \"adminUser\",\r\n\t\t\t\t\"endpointPassword\": \"*****\"\r\n\t\t\t},\r\n\t\t\t\"version\": \"1.0\",\r\n\t\t\t\"published\": true\r\n\t\t}\r\n\r\n\t]\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PortalGateway"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "This method allows you to create the API Portal configuration in API Gateway.",
        "operationId": "createAPIPortalConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "API Portal configuration payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalGateway"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"externalPortal\": {\r\n\t\t\"type\": \"apiportal\",\r\n\t\t\"endpointURL\": \"http://apiportal_host:18101\",\r\n\t\t\"endpointTenant\": \"default\",\r\n\t\t\"endpointUsername\": \"providerUser\",\r\n\t\t\"endpointPassword\": \"providerPassword\"\r\n\t},\r\n\t\"gatewayName\": \"MyPortalConfiguration\",\r\n\t\"version\": \"1.0\",\r\n\t\"gatewayURL\": \"http://apigateway_host:5555\",\r\n\t\"gatewayUsername\": \"adminUser\",\r\n\t\"gatewayPassword\": \"adminPassword\"\r\n}"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the API Portal configuration is created successfully.",
            "examples": {
              "application/json": "{\r\n\t\"portalGatewayResponse\": [{\r\n\t\t\"id\": \"c7059719-e434-4b45-9b09-b5176fa8b787\",\r\n\t\t\"gatewayName\": \"myportal\",\r\n\t\t\"gatewayUsername\": \"adminUser\",\r\n\t\t\"gatewayPassword\": \"*****\",\r\n\t\t\"gatewayURL\": \"http://apigateway_host:5555\",\r\n\t\t\"refId\": \"2609fc40-87d2-11e7-1298-d481d790920c\",\r\n\t\t\"externalPortal\": {\r\n\t\t\t\"type\": \"apiportal\",\r\n\t\t\t\"endpointTenant\": \"default\",\r\n\t\t\t\"endpointURL\": \"http://apiportal_host/\",\r\n\t\t\t\"endpointUsername\": \"adminUser\",\r\n\t\t\t\"endpointPassword\": \"*****\"\r\n\t\t},\r\n\t\t\"version\": \"1.0\",\r\n\t\t\"published\": true\r\n\t}]\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PortalGateway"
            }
          },
          "400": {
            "description": "This status code indicates that the user has missed some mandatory field that is required to create the API Portal configuration."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "500": {
            "description": "This status code indicates that an error occurred while processing the information in API Gateway or while communicating with API Portal."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/portalGateways/communities": {
      "get": {
        "description": "This API allows you to retrieve the details about communities in API Portal. An API can be published from API Gateway to any of the communities available in API Portal",
        "operationId": "getAPIPortalMetadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "portalGatewayId",
            "in": "query",
            "description": "Id of the API Portal configuration for retrieval of the community information",
            "required": true,
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864"
          },
          {
            "name": "apiId",
            "in": "query",
            "description": "Id of the API published from API Gateway to API Portal",
            "required": true,
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the the community information from the API Portal is retrieved successfully.",
            "examples": {
              "application/json": "{\r\n\t\"portalGatewayResponse\": {\r\n\t\t\"provider\": \"mcprga02\",\r\n\t\t\"communities\": {\r\n\t\t\t\"portalCommunities\": [{\r\n\t\t\t\t\"id\": \"3bdf8005-5685-3ef5-b132-de4681963fb6\",\r\n\t\t\t\t\"name\": \"Public Community\",\r\n\t\t\t\t\"description\": \"Public Community\",\r\n\t\t\t\t\"status\": \"NEW\"\r\n\t\t\t}]\r\n\t\t}\r\n\t}\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PortalGatewayCommunitiesData"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/portalGateways/packages": {
      "get": {
        "description": "This API allows you to retrieve the details of the published packages that the API is part of",
        "operationId": "getPublishedPackages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "portalGatewayId",
            "in": "query",
            "description": "Id of the API Portal configuration for retrieval of published packages information",
            "required": true,
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864"
          },
          {
            "name": "apiId",
            "in": "query",
            "description": "Id of the API published from API Gateway to API Portal",
            "required": true,
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "object"
              }
            }
          },
          "401": {
            "description": ""
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/portalGateways/{portalGatewayId}": {
      "get": {
        "description": "This API allows you to retrieve an API Portal configuration in API Gateway.",
        "operationId": "getAPIPortalConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "portalGatewayId",
            "in": "path",
            "description": "Id of the API Portal configuration for retrieval",
            "required": true,
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the API Portal configuration is retrieved successfully.",
            "examples": {
              "application/json": "{\r\n\t\"portalGatewayResponse\": {\r\n\t\t\"id\": \"c7059719-e434-4b45-9b09-b5176fa8b787\",\r\n\t\t\"gatewayName\": \"mygateway\",\r\n\t\t\"gatewayUsername\": \"adminUser\",\r\n\t\t\"gatewayPassword\": \"*****\",\r\n\t\t\"gatewayURL\": \"http://apigateway_host:5555\",\r\n\t\t\"refId\": \"2609fc40-87d2-11e7-1298-d481d790920c\",\r\n\t\t\"externalPortal\": {\r\n\t\t\t\"type\": \"apiportal\",\r\n\t\t\t\"endpointTenant\": \"default\",\r\n\t\t\t\"endpointURL\": \"http://apiportal_host/\",\r\n\t\t\t\"endpointUsername\": \"adminUser\",\r\n\t\t\t\"endpointPassword\": \"*****\"\r\n\t\t},\r\n\t\t\"version\": \"1.0\",\r\n\t\t\"published\": true\r\n\t}\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PortalGateway"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the API Portal configuration is not available."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This API allows you to update API Portal configuration information in API Gateway.",
        "operationId": "updateAPIPortalConfiguration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "portalGatewayId",
            "in": "path",
            "description": "Id of the API Portal configuration for update",
            "required": true,
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864"
          },
          {
            "in": "body",
            "name": "body",
            "description": "API Portal configuration payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalGateway"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"externalPortal\": {\r\n\t\t\"type\": \"apiportal\",\r\n\t\t\"endpointURL\": \"http://apiportal_host:18101\",\r\n\t\t\"endpointTenant\": \"default\",\r\n\t\t\"endpointUsername\": \"providerUser\",\r\n\t\t\"endpointPassword\": \"providerPassword\"\r\n\t},\r\n\t\"gatewayName\": \"MyPortalConfiguration\",\r\n\t\"version\": \"1.0\",\r\n\t\"gatewayURL\": \"http://apigateway_host:5555\",\r\n\t\"gatewayUsername\": \"adminUser\",\r\n\t\"gatewayPassword\": \"adminPassword\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the API Portal configuration is updated successfully.",
            "examples": {
              "application/json": "{\r\n\t\"portalGatewayResponse\": [{\r\n\t\t\"id\": \"c7059719-e434-4b45-9b09-b5176fa8b787\",\r\n\t\t\"gatewayName\": \"myportal\",\r\n\t\t\"gatewayUsername\": \"adminUser\",\r\n\t\t\"gatewayPassword\": \"*****\",\r\n\t\t\"gatewayURL\": \"http://apigateway_host:5555\",\r\n\t\t\"refId\": \"2609fc40-87d2-11e7-1298-d481d790920c\",\r\n\t\t\"externalPortal\": {\r\n\t\t\t\"type\": \"apiportal\",\r\n\t\t\t\"endpointTenant\": \"default\",\r\n\t\t\t\"endpointURL\": \"http://apiportal_host/\",\r\n\t\t\t\"endpointUsername\": \"adminUser\",\r\n\t\t\t\"endpointPassword\": \"*****\"\r\n\t\t},\r\n\t\t\"version\": \"1.0\",\r\n\t\t\"published\": true\r\n\t}]\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/PortalGateway"
            }
          },
          "400": {
            "description": "This status code indicates that the user has missed some mandatory field that is required to update the API Portal configuration."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the API Portal configuration is not available."
          },
          "500": {
            "description": "This status code indicates that an error occurred while processing the information in API Gateway or while communicating with API Portal."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "This API allows you to delete an API Portal configuration in API Gateway.",
        "operationId": "deleteAPIPortalConfiguration",
        "parameters": [
          {
            "name": "portalGatewayId",
            "in": "path",
            "description": "Id of the API Portal configuration for delete.",
            "required": true,
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864"
          }
        ],
        "responses": {
          "204": {
            "description": "This status code indicates that the API Portal configuration is deleted successfully."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/quiescemode": {
      "get": {
        "description": "Returns the quiesce mode setting in API Gateway",
        "operationId": "getQuiesceMode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the quiesce mode setting is successfully retrieved from API Gateway.",
            "examples": {
              "application/json": "{\r\n  \"block\": \"all\",\r\n  \"flush\": [\r\n    \"license_metrics\",\r\n    \"performance_metrics\",\r\n    \"subscription_quota\"\r\n  ],\r\n  \"enable\": true,\r\n  \"status\": \"success\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/QuiesceMode"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "This method either enables or disables the quiesce mode in API Gateway. Quiesce mode has two kinds - designtime and all. Quiesce mode for designtime will block the designtime API requests to API Gateway server and return 503 status code except the GET http method as well as few whitelisted APIs like search and this API itself. Quiesce mode for all is an extension of Integration server's Quiesce mode with the addition of flushing of API Gateway in-memory data such as performance metrics, license metrics and subscription quota to the configured data store.",
        "operationId": "quiescemode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuiesceMode"
            },
            "x-examples": {
              "application/json": "{\r\n  \"block\": \"all\",\r\n  \"flush\": [\r\n    \"license_metrics\",\r\n    \"performance_metrics\",\r\n    \"subscription_quota\"\r\n  ],\r\n  \"enable\": true\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the quiesce mode setting which is set in API Gateway",
            "examples": {
              "application/json": "{\r\n  \"block\": \"all\",\r\n  \"flush\": [\r\n    \"license_metrics\",\r\n    \"performance_metrics\",\r\n    \"subscription_quota\"\r\n  ],\r\n  \"enable\": true,\r\n  \"status\": null\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/QuiesceMode"
            }
          },
          "400": {
            "description": "This status code indicates that the user sends an empty or invalid JSON payload."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "409": {
            "description": "This status code indicates that the required quiesce mode is already in effect."
          },
          "500": {
            "description": "This status code indicates an internal error in API Gateway. One such error would be a valid quiesce port should be set, enabled, not suspended and have allow access mode prior to enable quiesce for all."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/rule": {
      "get": {
        "description": "The method retrieves list of all rules in API Gateway.",
        "operationId": "getAllRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleType",
            "in": "query",
            "description": "ruleType : if supplied, returns the rules of this particular ruleType only",
            "required": false,
            "type": "string",
            "x-example": "teamAssignmentRule"
          },
          {
            "name": "active",
            "in": "query",
            "description": "active : if supplied, returns the active rules only",
            "required": false,
            "type": "string",
            "x-example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of rules is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"rule\": [\r\n        {\r\n            \"id\": \"69dbb4aa-2c8e-431d-8a72-3af171c2ca44\",\r\n            \"ruleType\": \"teamAssignmentRule\",\r\n            \"name\": \"pet1rule\",\r\n            \"attributeContexts\": [\r\n                \"api\",\r\n                \"application\",\r\n                \"package\",\r\n                \"plan\"\r\n            ],\r\n            \"ruleLogicalOperator\": \"AND\",\r\n            \"ruleExpressions\": [\r\n                {\r\n                    \"attributeName\": \"name\",\r\n                    \"operator\": \"startsWith\",\r\n                    \"attributeValue\": \"pet1\"\r\n                }\r\n            ],\r\n            \"owner\": \"Administrator\",\r\n            \"active\": false,\r\n            \"teamsAssigned\": [\r\n                \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n            ]\r\n        }\r\n    ]\r\n}"
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rule"
              }
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "The method creates a conditional rule in API Gateway. The API request body must contain the payload for the rule.",
        "operationId": "createRule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rule"
            },
            "x-examples": {
              "application/json": "{\r\n    \"attributeContexts\": [\r\n        \"api\",\r\n        \"application\",\r\n        \"package\",\r\n        \"plan\"\r\n    ],\r\n    \"name\": \"pet1rule\",\r\n    \"ruleExpressions\": [\r\n        {\r\n            \"attributeName\": \"name\",\r\n            \"attributeValue\": \"pet1\",\r\n            \"operator\": \"startsWith\"\r\n        }\r\n    ],\r\n    \"ruleLogicalOperator\": \"AND\",\r\n    \"ruleType\": \"teamAssignmentRule\",\r\n    \"teamsAssigned\": [\r\n        \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n    ]\r\n}"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the rule has been successfully created in API Gateway, and the newly created rule is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"rule\": {\r\n        \"id\": \"69dbb4aa-2c8e-431d-8a72-3af171c2ca44\",\r\n        \"ruleType\": \"teamAssignmentRule\",\r\n        \"name\": \"pet1rule\",\r\n        \"attributeContexts\": [\r\n            \"api\",\r\n            \"application\",\r\n            \"package\",\r\n            \"plan\"\r\n        ],\r\n        \"ruleLogicalOperator\": \"AND\",\r\n        \"ruleExpressions\": [\r\n            {\r\n                \"attributeName\": \"name\",\r\n                \"operator\": \"startsWith\",\r\n                \"attributeValue\": \"pet1\"\r\n            }\r\n        ],\r\n        \"owner\": \"Administrator\",\r\n        \"active\": false,\r\n        \"teamsAssigned\": [\r\n            \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n        ]\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is not correct."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/rule/{ruleId}": {
      "get": {
        "description": "The method retrieves the details of a rule in API Gateway.",
        "operationId": "getRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "The path parameter specifies the id of a rule that is to be retrieved.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the details of the rule is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n    \"rule\": {\r\n        \"id\": \"69dbb4aa-2c8e-431d-8a72-3af171c2ca44\",\r\n        \"ruleType\": \"teamAssignmentRule\",\r\n        \"name\": \"pet2rule\",\r\n        \"attributeContexts\": [\r\n            \"api\",\r\n            \"application\",\r\n            \"package\",\r\n            \"plan\"\r\n        ],\r\n        \"ruleLogicalOperator\": \"AND\",\r\n        \"ruleExpressions\": [\r\n            {\r\n                \"attributeName\": \"name\",\r\n                \"operator\": \"startsWith\",\r\n                \"attributeValue\": \"pet2\"\r\n            }\r\n        ],\r\n        \"owner\": \"Administrator\",\r\n        \"active\": false,\r\n        \"teamsAssigned\": [\r\n            \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n        ]\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that a rule with the given id could not be found in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method updates the details of a specified rule in API Gateway. The API request body must contain the payload for the updated rule.",
        "operationId": "updateRule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "The path parameter specifies the id of the rule that is to be updated in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          },
          {
            "in": "body",
            "name": "body",
            "description": "This parameter describes the request payload of an rule that is to be updated in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rule"
            },
            "x-examples": {
              "application/json": "{\r\n    \"attributeContexts\": [\r\n        \"api\",\r\n        \"application\",\r\n        \"package\",\r\n        \"plan\"\r\n    ],\r\n    \"name\": \"pet2rule\",\r\n    \"ruleExpressions\": [\r\n        {\r\n            \"attributeName\": \"name\",\r\n            \"attributeValue\": \"pet2\",\r\n            \"operator\": \"startsWith\"\r\n        }\r\n    ],\r\n    \"ruleLogicalOperator\": \"AND\",\r\n    \"ruleType\": \"teamAssignmentRule\",\r\n    \"teamsAssigned\": [\r\n        \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n    ]\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the rule has been successfully updated in API Gateway, and the updated rule is available in the response body.",
            "examples": {
              "application/json": "{\r\n    \"rule\": {\r\n        \"id\": \"69dbb4aa-2c8e-431d-8a72-3af171c2ca44\",\r\n        \"ruleType\": \"teamAssignmentRule\",\r\n        \"name\": \"pet2rule\",\r\n        \"attributeContexts\": [\r\n            \"api\",\r\n            \"application\",\r\n            \"package\",\r\n            \"plan\"\r\n        ],\r\n        \"ruleLogicalOperator\": \"AND\",\r\n        \"ruleExpressions\": [\r\n            {\r\n                \"attributeName\": \"name\",\r\n                \"operator\": \"startsWith\",\r\n                \"attributeValue\": \"pet2\"\r\n            }\r\n        ],\r\n        \"owner\": \"Administrator\",\r\n        \"active\": false,\r\n        \"teamsAssigned\": [\r\n            \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n        ]\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an rule with the specified id could not be found in API Gateway.",
            "examples": {
              "application/json": "{}"
            }
          },
          "405": {
            "description": "Method is not allowed"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "The method deletes a rule from API Gateway.",
        "operationId": "deleteRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "The path parameter specifies the id of a rule that is to be deleted from API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "204": {
            "description": "This status code indicates that the specified rule has been successfully deleted from API Gateway."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an rule with the given id could not be found in API Gateway."
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested rule in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/rule/{ruleId}/activate": {
      "put": {
        "description": "This REST request is used to activate a rule and this request doesn't require any request body.",
        "operationId": "activateRule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "The path parameter should be the id of rule that needs to be activated.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the rule specified is activated successfully",
            "examples": {
              "application/json": "{\r\n    \"rule\": {\r\n        \"id\": \"a58ba6e4-47fd-4d24-9d11-8a72d31bd805\",\r\n        \"ruleType\": \"teamAssignmentRule\",\r\n        \"name\": \"pet2rule\",\r\n        \"attributeContexts\": [\r\n            \"api\",\r\n            \"application\",\r\n            \"package\",\r\n            \"plan\"\r\n        ],\r\n        \"ruleLogicalOperator\": \"AND\",\r\n        \"ruleExpressions\": [\r\n            {\r\n                \"attributeName\": \"name\",\r\n                \"operator\": \"startsWith\",\r\n                \"attributeValue\": \"pet2\"\r\n            }\r\n        ],\r\n        \"owner\": \"Administrator\",\r\n        \"active\": true,\r\n        \"teamsAssigned\": [\r\n            \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n        ]\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "Request body is not valid"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the rule id specified is not found in API Gateway"
          },
          "405": {
            "description": "Method is not allowed"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/rule/{ruleId}/deactivate": {
      "put": {
        "description": "This REST request is used to deactivate a rule and it doesn't require any request body.",
        "operationId": "deactivateRule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "The path parameter should be the id of rule that needs to be deactivated.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the rule id specified is deactivated successfully",
            "examples": {
              "application/json": "{\r\n    \"rule\": {\r\n        \"id\": \"a58ba6e4-47fd-4d24-9d11-8a72d31bd805\",\r\n        \"ruleType\": \"teamAssignmentRule\",\r\n        \"name\": \"pet2rule\",\r\n        \"attributeContexts\": [\r\n            \"api\",\r\n            \"application\",\r\n            \"package\",\r\n            \"plan\"\r\n        ],\r\n        \"ruleLogicalOperator\": \"AND\",\r\n        \"ruleExpressions\": [\r\n            {\r\n                \"attributeName\": \"name\",\r\n                \"operator\": \"startsWith\",\r\n                \"attributeValue\": \"pet2\"\r\n            }\r\n        ],\r\n        \"owner\": \"Administrator\",\r\n        \"active\": false,\r\n        \"teamsAssigned\": [\r\n            \"55fd3eb7-668b-4aba-b3ad-6136448e2bed\"\r\n        ]\r\n    }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "Request body is not valid"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the rule id specified is not found in API Gateway"
          },
          "405": {
            "description": "Method is not allowed"
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/shutdown": {
      "post": {
        "description": "This method shutdowns the API Gateway server. If bounce is set as true then the server would be restarted. The option parameter specifies whether to shutdown API Gateway server immediately or after all client sessions are ended. A value of 'force' would shutdown the server immediately and 'drain' would wait for a maximum period of time for all the client sessions to end before shutdown. Quiesce specifies the quiesce mode for all in API Gateway. A value of true would first flush the API Gateway in memory data like performance metrics, license metrics and subscription quota to datastore before shutdown of the server. Next, when API Gateway is restarted either manually or using bounce parameter, the Integration server will be started in Quiesce mode. The default value is false.",
        "operationId": "shutdown",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shutdown"
            },
            "x-examples": {
              "application/json": "{\r\n    \"bounce\": true,\r\n    \"option\": \"drain\",\r\n    \"timeout\": 2,\r\n    \"quiesce\": false\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that API Gateway has been shutdown successfully.",
            "examples": {
              "application/json": "{\r\n    \"bounce\": true,\r\n    \"option\": \"force\",\r\n    \"timeout\": \"10\",\r\n    \"message\": \"Server shutdown is in progress.\"\r\n}"
            }
          },
          "400": {
            "description": "This status code indicates that the user sends an empty or invalid JSON payload."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/urlaliases": {
      "get": {
        "description": "Retrieves all URL Aliases or a URL Alias with a particular ID in API Gateway (if the query parameter alias is provided).",
        "operationId": "getURLALias",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "The name of the URL alias to be retrieved. If this query parameter is provided, then it retrieves the URL Aliases identified by the given alias.",
            "required": false,
            "type": "string",
            "x-example": "SampleAlias"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the fetching of the requested URL alias(es) from API Gateway have been successful.",
            "schema": {
              "$ref": "#/definitions/URLAliasesGetResponse"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while retrieving the URL Alias from API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "Creates a new URL Alias in API Gateway.",
        "operationId": "createURLALias",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request body for creating a new URL Alias in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/URLAliasSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the URL alias has been successfully created in API Gateway.",
            "schema": {
              "$ref": "#/definitions/URLAliasSettings"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the URL Alias in the API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "Updates an existing URL Alias in API Gateway.",
        "operationId": "updateURLALias",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request body for updating an existing URL Alias in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/URLAliasSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the URL alias has been successfully updated in API Gateway.",
            "schema": {
              "$ref": "#/definitions/URLAliasSettings"
            }
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the URL Alias in the API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "The method deletes an URL alias in API Gateway.",
        "operationId": "deleteURLAlias",
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "The name of the URL alias to be deleted.",
            "required": true,
            "type": "string",
            "x-example": "SampleAlias"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the URL alias has been successfully deleted in API Gateway."
          },
          "400": {
            "description": "This status code indicates invalid request or bad input."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the requested resource is not found."
          },
          "405": {
            "description": "This status code indicates that the requested HTTP method is not supported for the resource."
          },
          "500": {
            "description": "This status code indicates an error occurred while persisting the URL Alias in the API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "description": "The method retrieves the list of all webhooks in API Gateway.",
        "operationId": "getAllWebhooks",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of webhooks is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n  \"response\": [\r\n    {\r\n      \"id\": \"4f72fe1c-aeb2-4286-b7dd-c0e503eb9741\",\r\n      \"config\": {\r\n        \"url\": \"http://apigatewaymig.free.beeceptor.com/my/api/path/test\",\r\n        \"headers\": {},\r\n        \"username\": null,\r\n        \"password\": null,\r\n        \"truststoreAlias\": null\r\n      },\r\n      \"events\": [\r\n        \"migration:clean:datastore:completed\"\r\n      ],\r\n      \"active\": true\r\n    },\r\n    {\r\n      \"id\": \"4744c622-488b-4799-97c9-847886d7bdcc\",\r\n      \"config\": {\r\n        \"url\": \"http://apigatewaymig.free.beeceptor.com/my/api/path/test\",\r\n        \"headers\": {},\r\n        \"username\": null,\r\n        \"password\": null,\r\n        \"truststoreAlias\": null\r\n      },\r\n      \"events\": [\r\n        \"migration:quiesce:designtime:completed\"\r\n      ],\r\n      \"active\": true\r\n    }\r\n  ]\r\n}"
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Webhook"
              }
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "No records found."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "The method creates a webhook in API Gateway. The API request body must contain the payload of the webhook that needs to be saved.",
        "operationId": "createWebhook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "x-examples": {
              "application/json": "{\r\n  \"config\": {\r\n    \"url\": \"http://apigatewaymig.free.beeceptor.com/my/api/path/test\",\r\n    \"headers\": {\r\n      \"api-key\": \"asdfg\"\r\n    },\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"truststoreAlias\": \"truststoreAlias\"\r\n  },\r\n  \"events\": [\r\n    \"migration:clean:datastore:completed\",\r\n    \"migration:quiesce:all:completed\"\r\n  ],\r\n  \"active\": true\r\n}"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the webhook has been successfully created in API Gateway, and the newly created webhook is available in the response body.",
            "examples": {
              "application/json": "{\r\n  \"id\": \"0fdb89ee-e3fe-4045-adc0-0a45794858a0\",\r\n  \"config\": {\r\n    \"url\": \"ahttp://apigatewaymigration.free.beeceptor.com/my/api/path/test\",\r\n    \"headers\": {\r\n      \"api-key\": \"asdfg\"\r\n    },\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"truststoreAlias\": \"truststoreAlias\"\r\n  },\r\n  \"events\": [\r\n    \"migration:quiesce:designtime:completed\",\r\n    \"migration:quiesce:all:completed\"\r\n  ],\r\n  \"active\": true\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "This status code indicates that a webhook with the given id already exists in API Gateway or the request body is not correct.",
            "examples": {
              "application/json": "{}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "description": "The method retrieves the details of a webhook in API Gateway.",
        "operationId": "getWebhook",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The path parameter specifies the id of a webhook whose details are to be retrieved.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the details of the webhook are successfully retrieved.",
            "examples": {
              "application/json": "{\r\n  \"response\": {\r\n    \"id\": \"4f72fe1c-aeb2-4286-b7dd-c0e503eb9741\",\r\n    \"config\": {\r\n      \"url\": \"http://apigatewaymig.free.beeceptor.com/my/api/path/test\",\r\n      \"headers\": {\r\n        \"api-key\": \"asdfg\"\r\n      },\r\n      \"username\": \"username\",\r\n      \"password\": \"password\",\r\n      \"truststoreAlias\": \"truststoreAlias\"\r\n    },\r\n    \"events\": [\r\n      \"migration:clean:datastore:completed\",\r\n      \"migration:quiesce:all:completed\"\r\n    ],\r\n    \"active\": true\r\n  }\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that a webhook with the given id could not be found in API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Resource 92d08e66-8746-43fd-9e8c-66b413fdf32 not found\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method updates the details of a specified webhook in API Gateway. The API request body must contain the payload of the webhook that needs to be updated.",
        "operationId": "updateWebhook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The path parameter specifies the id of an webhook whose detail is to be updated in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          },
          {
            "in": "body",
            "name": "body",
            "description": "This parameter describes the request payload of webhook that is to be updated in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "x-examples": {
              "application/json": "{\r\n  \"config\": {\r\n    \"url\": \"http://apigatewaymig.free.beeceptor.com/my/api/path/test\",\r\n    \"headers\": {\r\n      \"api-key\": \"asdfg\"\r\n    },\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"truststoreAlias\": \"truststoreAlias\"\r\n  },\r\n  \"events\": [\r\n    \"migration:clean:datastore:completed\",\r\n    \"migration:quiesce:all:completed\"\r\n  ],\r\n  \"active\": true\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the webhook has been successfully updated in API Gateway, and the updated webhook is available in the response body.",
            "examples": {
              "application/json": "{\r\n  \"id\": \"0fdb89ee-e3fe-4045-adc0-0a45794858a0\",\r\n  \"config\": {\r\n    \"url\": \"ahttp://apigatewaymigration.free.beeceptor.com/my/api/path/test\",\r\n    \"headers\": {\r\n      \"api-key\": \"asdfg\"\r\n    },\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"truststoreAlias\": \"truststoreAlias\"\r\n  },\r\n  \"events\": [\r\n    \"migration:quiesce:designtime:completed\",\r\n    \"migration:quiesce:all:completed\"\r\n  ],\r\n  \"active\": true\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an webhook with the specified id could not be found in API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Resource 92d08e66-8746-43fd-9e8c-66b413fdf32 not found\"\r\n}"
            }
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested webhook in API Gateway.",
            "examples": {
              "application/json": "{\r\n  \"errorDetails\": \" Unable to process the PUT request for webhook. Error occurred while processing the payload. Error Message:\\n Method: PUT is not allowed on resource: webhook\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "The method deletes a webhook resource from API Gateway.",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "This parameter specifies the id of the webhook that is to be deleted in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "204": {
            "description": "This status code indicates that the specified webhook has been successfully deleted from API Gateway."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that a webhook with the given id could not be found in API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Resource 732c4526-db9a-4ef9-9782-edda1a6aa9bc not found.\"\r\n}"
            }
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested object in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/alias": {
      "get": {
        "description": "The method retrieves a list of all aliases in API Gateway.",
        "operationId": "getAllAlias",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This status code indicates that the list of aliases is successfully retrieved.",
            "examples": {
              "application/json": "{\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n\t\"endPointURI\": \"https://myDevstage:9090\",\r\n\t\"connectionTimeout\": \"23\",\r\n\t\"optimizationTechnique\": \"MTOM\",\r\n\t\"readTimeout\": \"36\",\r\n\t\"passSecurityHeaders\": true,\r\n\t\"keystoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"keyAlias\": \"ssos\",\r\n\t\"name\": \"MystageEndpoint\",\r\n\t\"description\": \"Endpoint alias for myDevstage.\",\r\n\t\"type\": \"endpoint\"\r\n},\r\n{\r\n\t\"id\": \"842c4526-db9a-4ef9-9782-edda1a6ab84c\"\r\n\t\"authType\": \"WSS_USERNAME\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"wssCredentials\": {\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"UsernameMessageAlias\",\r\n\t\"description\": \"WSS username message alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"652c4526-db8a-4ef9-9782-edda1a4gf9bc\"\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachineadfs20.sag.com\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"KerberosHttpTransportAlias\",\r\n\t\"description\": \"vmmachineadfs20 kerberos transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"422c4526-db9a-4ef9-9872-edda1a6aa9bc\"\r\n\t\"authType\": \"HTTP_BASIC\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"BasicHttpTransportAlias\",\r\n\t\"description\": \"Basic http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"732c4526-db9a-5t46-9782-edda1a4ac9bc\"\r\n\t\"authType\": \"NTLM\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"NTLMTransportAlias\",\r\n\t\"description\": \"ntlm http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"652c4526-db9a-4ef9-3265-edda1a6aa9bc\"\r\n\t\"authType\": \"OAUTH2\",\r\n\t\"oauth2Token\": \"T2F1dGgydG9rZW4=\",\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"OAuthTransportAlias\",\r\n\t\"description\": \"OAuth2 alias for outbound transport security\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"732c3265-db9a-4ef9-9782-edda1a6aa9bc\"\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"12c4526-db9a-5ef9-9845-edda1a7ba9bc\"\r\n\t\"authType\": \"SAML\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"\",\r\n\t\t\"keyAlias\": null,\r\n\t\t\"certificateAlias\": null,\r\n\t\t\"truststoreAlias\": \"\"\r\n\t},\r\n\t\"samlIssuerConfig\": \"${SAMLIssuer1}\",\r\n\t\"name\": \"SAMLAlias\",\r\n\t\"description\": \"SAML secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n}\r\n"
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Alias"
              }
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "description": "Use this method to create an alias. There are different types of alias like Endpoint, Simple etc. Refer to the Alias schema for different type of alias that you can create. If you want to create an alias for a specific type (say Endpoint alias), refer to the corresponding schema (EndpointAlias)",
        "operationId": "createAlias",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alias"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the alias has been successfully created in API Gateway, and the newly created alias is available in the response body.",
            "examples": {
              "application/json": "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Alias"
            }
          },
          "400": {
            "description": "This status code indicates that an alias with the given name already exists in API Gateway or the request body is not correct.",
            "examples": {
              "application/json": "{}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/alias/{aliasId}": {
      "get": {
        "description": "The method retrieves the details of an alias in API Gateway.",
        "operationId": "getAlias",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "aliasId",
            "in": "path",
            "description": "The path parameter specifies the id of an alias whose details are to be retrieved.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the details of the alias are successfully retrieved.",
            "examples": {
              "application/json": "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Alias"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an alias with the given id could not be found in API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Alias with id: 732c4526-db9a-4ef9-9782-edda1a6aa9bc does not exist.\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "put": {
        "description": "The method updates the details of a specified alias in API Gateway. The API request body must contain the payload of the alias that needs to be updated.",
        "operationId": "updateAlias",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "aliasId",
            "in": "path",
            "description": "The path parameter specifies the id of an alias whose detail is to be updated in API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          },
          {
            "in": "body",
            "name": "body",
            "description": "This parameter describes the request payload of an alias that is to be updated in API Gateway.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alias"
            },
            "x-examples": {
              "application/json": "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the alias has been successfully updated in API Gateway, and the updated alias is available in the response body.",
            "examples": {
              "application/json": "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            },
            "schema": {
              "$ref": "#/definitions/Alias"
            }
          },
          "400": {
            "description": "This status code indicates that the request body is invalid."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an alias with the specified id could not be found in API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Unable to process the PUT request for alias. Error occurred while processing the payload. Error Message:\\n Alias with id: 6a6ea325-4190-411b-8bbd-0a7e94dbc7d1 does not exist.\"\r\n}"
            }
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested alias in API Gateway.",
            "examples": {
              "application/json": "{\r\n  \"errorDetails\": \" Unable to process the PUT request for alias. Error occurred while processing the payload. Error Message:\\n Method: PUT is not allowed on resource: alias\"\r\n}"
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "description": "The method deletes an alias from API Gateway.",
        "operationId": "deleteAlias",
        "parameters": [
          {
            "name": "aliasId",
            "in": "path",
            "description": "The path parameter specifies the id of an alias that is to be deleted from API Gateway.",
            "required": true,
            "type": "string",
            "x-example": "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
          }
        ],
        "responses": {
          "204": {
            "description": "This status code indicates that the specified alias has been successfully deleted from API Gateway."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an alias with the given id could not be found in API Gateway.",
            "examples": {
              "application/json": "{\r\n    \"errorDetails\": \" Alias with id: 732c4526-db9a-4ef9-9782-edda1a6aa9bc does not exist.\"\r\n}"
            }
          },
          "405": {
            "description": "This status code indicates that the specified HTTP method is not allowed for the requested alias in API Gateway."
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Basic": {
      "description": "API Gateway Administrator",
      "type": "basic"
    }
  },
  "definitions": {
    "APICallbackSettings": {
      "type": "object",
      "properties": {
        "allowCallBackRequestsHTTPsAccessOnly": {
          "type": "boolean",
          "description": "Native Servers can access the callback proxy through HTTPs protocal"
        },
        "allowCallbackRequestAccessToAllowedIPs": {
          "type": "boolean",
          "description": "Decider to process callback requests based on Allowed IPs"
        },
        "allowedIPs": {
          "type": "array",
          "description": "Configure Allowed IPs.",
          "items": {
            "type": "string"
          }
        },
        "portType": {
          "type": "string",
          "description": "Select value from Loadbalancer, HTTP, HTTPS, External, the port used to forward to Native Server"
        },
        "processCallbackRequests": {
          "type": "boolean",
          "description": "Decider to process the callback URLs"
        }
      }
    },
    "APIGateway": {
      "type": "object",
      "properties": {
        "APIManagement": {
          "type": "string"
        },
        "Application Management": {
          "type": "string"
        },
        "Policy Management - Gateway": {
          "type": "string"
        },
        "Policy Management - Threat Protection": {
          "type": "string"
        }
      }
    },
    "APIPortal": {
      "allOf": [
        {
          "$ref": "#/definitions/ExternalPortal"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "API Portal type."
            }
          },
          "description": "This defines the API portal configuration."
        }
      ]
    },
    "AccountLockSettings": {
      "type": "object",
      "properties": {
        "appliesToUsers": {
          "type": "string",
          "description": "List of users to whom the account locking settings apply. Possible values are 'allUsersExceptPredefinedUsers' and 'allUsers'. 'allUsersExceptPredefinedUsers' indicates that account locking rules apply to all user accounts except the predefined user accounts. 'allUsers' indicates the account locking rules apply to all user accounts."
        },
        "blockDuration": {
          "type": "string",
          "description": "Duration for which the account remains locked."
        },
        "blockDurationUnit": {
          "type": "string",
          "description": "The unit for the duration specified under 'blockDuration' field. Possible values are 'Minutes', 'Hours', 'Days'."
        },
        "isEnabled": {
          "type": "string",
          "description": "Specifies whether to enable the account locking settings. Possible values are 'true' and 'false'"
        },
        "maximumLoginAttempts": {
          "type": "string",
          "description": "Number of attempts in the specified time interval (specified using timeInterval and timeIntervalUnit fields) to provide the correct password before locking the account"
        },
        "restrictLoginForUsersInDefaultTeam": {
          "type": "string",
          "description": "Specifies whether to restrict login for users who are not part of any team other than Default. By default the value is false."
        },
        "timeInterval": {
          "type": "string",
          "description": "The time interval within which the number of wrong login attempts exceeding the value specified in 'maximumLoginAttempts' will result in locking the account."
        },
        "timeIntervalUnit": {
          "type": "string",
          "description": "The unit for the time interval specified in the 'timeInterval' field. Possible values are 'Minutes', 'Hours', 'Days'."
        }
      }
    },
    "AnalyticsDataStoreDestination": {
      "type": "object",
      "properties": {
        "clientHttpResponseSize": {
          "type": "string",
          "description": "Maximum Response payload size in mb."
        },
        "connectionTimeout": {
          "type": "string",
          "description": "Connection timeout in milli seconds between API Gateway and Analytics Data Store."
        },
        "hostname": {
          "type": "string",
          "description": "Specifies the host name or IP address of the machine on which Analytics Data Store Server is running."
        },
        "httpsEnabled": {
          "type": "string",
          "description": "Enable secure connection between API Gateway and Analytics Data Store."
        },
        "httpsEnforceHostnameVerification": {
          "type": "string",
          "description": "Property to enforce hostname verification."
        },
        "keepAlive": {
          "type": "string",
          "description": "To use persistent connection between APIGateway and Analytics Data Store."
        },
        "keepAliveMaxConnections": {
          "type": "string",
          "description": "Maximum number of persistent connections that can be maintained between API Gateway and cluster of Analytics Data Store."
        },
        "keepAliveMaxConnectionsPerRoute": {
          "type": "string",
          "description": "Maximum number of persistent connections that can be maintained between API Gateway and single Analytics Data Store for single HTTP route."
        },
        "keystoreAlias": {
          "type": "string",
          "description": "Alias name of the certificate that needs to be used from keystore."
        },
        "keystoreName": {
          "type": "string",
          "description": "Keystore location for client authentication."
        },
        "keystorePassword": {
          "type": "string",
          "description": "Keystore password."
        },
        "maxRetryTimeout": {
          "type": "string",
          "description": "Time out in milli seconds to wait for retries."
        },
        "outboundProxyAlias": {
          "type": "string",
          "description": "Outbound proxy alias name that is created in API Gateway."
        },
        "outboundProxyEnabled": {
          "type": "string",
          "description": "Enable  outbound proxy settings between API Gateway and Analytics Data Store."
        },
        "password": {
          "type": "string",
          "description": "The password for the Analytics Data Store server instance."
        },
        "port": {
          "type": "string",
          "description": "Specifies the port on which the Analytics Data Store server runs."
        },
        "protocol": {
          "type": "string",
          "description": "Specifies the communication protocol used to establish communication between API Gateway and Analytics Data Store."
        },
        "sniffEnabled": {
          "type": "string",
          "description": "Enable sniffer."
        },
        "sniffTimeInterval": {
          "type": "string",
          "description": "Time interval to refresh Elasticsearch node details in milliseconds."
        },
        "socketTimeout": {
          "type": "string",
          "description": "Read timeout in milli seconds between API Gateway and Analytics Data Store."
        },
        "tenantId": {
          "type": "string",
          "description": "Tenant name."
        },
        "truststoreName": {
          "type": "string",
          "description": "Truststore location contains Analytics Data Store certificate details."
        },
        "truststorePassword": {
          "type": "string",
          "description": "Truststore password."
        },
        "username": {
          "type": "string",
          "description": "The username for the Analytics Data Store server instance."
        }
      },
      "description": "This defines the configurations required for Analytics Data Store destinations."
    },
    "AuditLogDestination": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string",
          "description": "Specifies whether the logger is to write entries to a file or database."
        },
        "enable": {
          "type": "string",
          "description": "Enable activation to enable the logger to start writing the log entries to the database or the file."
        },
        "guaranteed": {
          "type": "string",
          "description": "Provides data about guaranteed delivery transactions."
        },
        "maximumQueueSize": {
          "type": "string",
          "description": "Specifies the maximum number of entries the queue can hold."
        },
        "maximumRetries": {
          "type": "string",
          "description": "Specifies the maximum times the logger must retry writing the entry to the destination if the first attempt fails because of a transient error."
        },
        "mode": {
          "type": "string",
          "description": "Specifies whether the logger is to write entries to the destination synchronously or asynchronously."
        },
        "name": {
          "type": "string",
          "description": "The default name of the audit log, API Gateway Transaction Logger."
        },
        "waitBetweenRetries": {
          "type": "string",
          "description": "Specifies the waiting time before the logger can reconnect and rewrite the eateries to the destination in case of failure."
        }
      },
      "description": "This defines the configurations required for Audit Log destination."
    },
    "CSCommunicationDestination": {
      "type": "object",
      "properties": {
        "gatewayAssetId": {
          "type": "string",
          "description": "Specifies the registered API Gateway ID."
        },
        "hostname": {
          "type": "string",
          "description": "Specifies the host name or IP address of the machine on which CentraSite Application Server Tier (CAST) is running."
        },
        "password": {
          "type": "string",
          "description": "Specifies the password for authenticating CentraSite when API Gateway communicates with CentraSite."
        },
        "protocol": {
          "type": "string",
          "description": "Specifies the communication protocol used to establish communication between API Gateway and CentraSite."
        },
        "targetname": {
          "type": "string",
          "description": "Specifies the name of the API Gateway asset as defined in CentraSite."
        },
        "uddiPort": {
          "type": "string",
          "description": "Specifies the port on which CAST is listening. The default port number for CAST is 53307."
        },
        "username": {
          "type": "string",
          "description": "Specifies the CentraSite user ID for authenticating CentraSite when API Gateway communicates with CentraSite. This implies the user ID of a user who has the CentraSite Administrator role or the API Gateway Administrator role in CentraSite."
        }
      },
      "description": "This defines the configurations required for Centrasite Communication section of CentraSite destination."
    },
    "CSSNMPDestination": {
      "type": "object",
      "properties": {
        "authorizationPassword": {
          "type": "string",
          "description": "Specifies the password to be used for authorization protocol."
        },
        "authorizationProtocol": {
          "type": "string",
          "description": "Specifies the authorization protocol that is used by the SNMP Listener for decoding the incoming trap."
        },
        "hostname": {
          "type": "string",
          "description": "Specifies the CentraSite host name or IP address to which the SNMP listener binds."
        },
        "port": {
          "type": "string",
          "description": "Specifies the port to which the SNMP listener binds. The default port number for CentraSite's SNMP server is 8181."
        },
        "privacyPassword": {
          "type": "string",
          "description": "Specifies the password to be used for privacy protocol."
        },
        "privacyProtocol": {
          "type": "string",
          "description": "Specifies the privacy protocol that is used by the SNMP Listener for decoding the incoming trap."
        },
        "sendTRAPsToCentrasite": {
          "type": "string",
          "description": "Specifies whether the events has to be sent from API Gateway to CentraSite."
        },
        "transport": {
          "type": "string",
          "description": "Specifies the wire transport protocol that is used by the SNMP Listener."
        },
        "username": {
          "type": "string",
          "description": "Specifies the SecurityName that is used by the SNMP Listener."
        }
      },
      "description": "This defines the configurations required for CentraSite SNMP section of CentraSite destination."
    },
    "CacheableType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "CallbackProcessorSettings": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/APICallbackSettings"
        }
      },
      "description": "This defines the various extended settings that can be configured in API Gateway."
    },
    "ChangeOwnerRequest": {
      "type": "object",
      "properties": {
        "assetIds": {
          "type": "array",
          "description": "List of APIGateway assets for which change owner/team is requested.",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "assetType": {
          "type": "string",
          "description": "APIGateway asset type.",
          "readOnly": true
        },
        "currentOwner": {
          "type": "string",
          "description": "Current owner of the APIGateway asset.",
          "readOnly": true
        },
        "currentTeams": {
          "type": "array",
          "description": "New teams of the APIGateway asset.",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "newOwner": {
          "type": "string",
          "description": "New owner of the APIGateway asset.",
          "readOnly": true
        },
        "newTeams": {
          "type": "array",
          "description": "Current teams of the APIGateway asset.",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "ownerType": {
          "type": "string",
          "description": "Type of the new owner of the APIGateway asset. By default, it is user. Possible values are user and team.",
          "readOnly": true,
          "enum": [
            "user",
            "team"
          ]
        }
      }
    },
    "ChangeOwnerResponse": {
      "type": "object",
      "properties": {
        "matchingAssets": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "PENDING_APPROVAL",
            "OK"
          ]
        }
      }
    },
    "ClusterInfo": {
      "type": "object",
      "properties": {
        "actionOnStartupError": {
          "type": "string",
          "description": "How APIGateway responds when an error at start up prevents APIGateway from joining the cluster."
        },
        "cacheManagerName": {
          "type": "string",
          "description": "The default cache manager."
        },
        "cacheName": {
          "type": "string",
          "description": "The default cache."
        },
        "clusterAware": {
          "type": "boolean",
          "description": "The property which is used to find whether APIGateway is cluster aware."
        },
        "clusterName": {
          "type": "string",
          "description": "Name of the cluster to which this APIGateway belongs."
        },
        "clusterSessTimeout": {
          "type": "string",
          "description": "Number of minutes an inactive session will be retained in the clustered session store. The default is 60."
        },
        "currentlyClustered": {
          "type": "boolean",
          "description": "The current clustered state of APIGateway."
        },
        "message": {
          "type": "string",
          "description": "Message to be displayed to the clients."
        },
        "pendingRestart": {
          "type": "boolean",
          "description": "The property used to determine whether APIGateway is pending for restart for the cluster settings to take effect."
        },
        "tsaURLs": {
          "type": "string",
          "description": "A comma separated list of the URLs for the Terracotta Server Array to be used with the cluster to which this APIGateway belongs."
        }
      }
    },
    "CustomContentType": {
      "type": "object"
    },
    "DenyByIPForFailedAuthConfig": {
      "type": "object",
      "properties": {
        "blockIntervalInSeconds": {
          "type": "string",
          "description": "Specifies the block time interval(in seconds) for an IP address from accessing APIGateway"
        },
        "deniedIPList": {
          "type": "array",
          "description": "Specifies list of IP addresses that are denied from accessing APIGateway",
          "items": {
            "type": "string"
          }
        },
        "isEnabled": {
          "type": "string",
          "description": "Specifies whether to enable authentication based restrictions by blocking/denying IP addresses which failed authentication."
        },
        "maximumFailedAuthRequests": {
          "type": "string",
          "description": "Specifies maximum failed requests for a particular IP address."
        },
        "maximumFailedAuthRequestsDuration": {
          "type": "string",
          "description": "Specifies the time interval, in seconds, in which maximum authentication failure can be permitted."
        },
        "whenLimitExceeds": {
          "type": "string",
          "description": "Specifies action to be performed when maximum failed request is breached. The value can be BLOCK or DENY"
        }
      }
    },
    "Destination": {
      "type": "object",
      "properties": {
        "metricsPublishInterval": {
          "type": "string",
          "description": "The interval at which the metrics will be published to the destination. Enter a value from 1 through 60. The default is 60 minutes."
        },
        "sendAuditlogAPIManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the api management audit logs. Occurs each time an api create/update/delete operation performed."
        },
        "sendAuditlogAccessProfileManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the team management audit logs. Occurs each time an team create/update/delete operation performed."
        },
        "sendAuditlogAliasManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the alias management audit logs. Occurs each time an alias create/update/delete operation performed."
        },
        "sendAuditlogApplicationManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the application management audit logs. Occurs each time an application create/update/delete operation performed."
        },
        "sendAuditlogApprovalManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the approval management audit logs. Occurs each time an approval request create/update/delete operation performed."
        },
        "sendAuditlogGroupManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the group management audit logs. Occurs each time a group create/update/delete operation performed."
        },
        "sendAuditlogPackageManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the package management audit logs. Occurs each time a package create/update/delete operation performed."
        },
        "sendAuditlogPlanManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the plan management audit logs. Occurs each time a plan create/update/delete operation performed."
        },
        "sendAuditlogPolicyManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the policy management audit logs. Occurs each time a policy create/update/delete operation performed."
        },
        "sendAuditlogPromotionManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the promotion management audit logs. Occurs each time a promotion create/update/delete operation performed."
        },
        "sendAuditlogRuntimeDataManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the analytics management audit logs. Occurs each time an analytics data purge operation performed."
        },
        "sendAuditlogUserManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the user management audit logs. Occurs each time an user create/update/delete operation performed."
        },
        "sendErrorEvent": {
          "type": "string",
          "description": "Flag to enable publish of the error events. Occurs each time an API invocation results in an error."
        },
        "sendLifecycleEvent": {
          "type": "string",
          "description": "Flag to enable publish of the life cycle events. Occurs each time API Gateway is started or shut down."
        },
        "sendPerformanceMetrics": {
          "type": "string",
          "description": "Flag to enable publish of the performance metrics. The performance data provides information on average response time, total request count, fault count, and so on."
        },
        "sendPolicyViolationEvent": {
          "type": "string",
          "description": "Flag to enable publish of the policy violations events. Occurs each time an API invocation violates the policy enforcement that was set for the API."
        }
      },
      "description": "This defines the configurations required for the destination."
    },
    "ElasticsearchConfig": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "The password required to authenticate if authentication is enabled for the source Elasticsearch instance."
        },
        "url": {
          "type": "string",
          "description": "The source Elasticsearch instance URL"
        },
        "username": {
          "type": "string",
          "description": "The user name required to authenticate against if authentication is enabled for the source Elasticsearch instance."
        }
      },
      "description": "This model contains details about Elasticsearch endpoint"
    },
    "ElasticsearchDestination": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "Specifies the host name or IP address of the machine on which Elasticsearch Server is running."
        },
        "indexName": {
          "type": "string",
          "description": "Specifies the index name for the Elasticsearch server on which the events will be available."
        },
        "metricsPublishInterval": {
          "type": "string",
          "description": "The interval at which the metrics will be published to the destination. Enter a value from 1 through 60. The default is 60 minutes."
        },
        "password": {
          "type": "string",
          "description": "The password for the Elasticsearch server instance."
        },
        "port": {
          "type": "string",
          "description": "Specifies the port on which the Elasticsearch server runs."
        },
        "protocol": {
          "type": "string",
          "description": "Specifies the communication protocol used to establish communication between API Gateway and CentraSite."
        },
        "sendAuditlogAPIManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the api management audit logs. Occurs each time an api create/update/delete operation performed."
        },
        "sendAuditlogAccessProfileManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the team management audit logs. Occurs each time an team create/update/delete operation performed."
        },
        "sendAuditlogAliasManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the alias management audit logs. Occurs each time an alias create/update/delete operation performed."
        },
        "sendAuditlogApplicationManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the application management audit logs. Occurs each time an application create/update/delete operation performed."
        },
        "sendAuditlogApprovalManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the approval management audit logs. Occurs each time an approval request create/update/delete operation performed."
        },
        "sendAuditlogGroupManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the group management audit logs. Occurs each time a group create/update/delete operation performed."
        },
        "sendAuditlogPackageManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the package management audit logs. Occurs each time a package create/update/delete operation performed."
        },
        "sendAuditlogPlanManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the plan management audit logs. Occurs each time a plan create/update/delete operation performed."
        },
        "sendAuditlogPolicyManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the policy management audit logs. Occurs each time a policy create/update/delete operation performed."
        },
        "sendAuditlogPromotionManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the promotion management audit logs. Occurs each time a promotion create/update/delete operation performed."
        },
        "sendAuditlogRuntimeDataManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the analytics management audit logs. Occurs each time an analytics data delete operation performed."
        },
        "sendAuditlogUserManagementEvent": {
          "type": "string",
          "description": "Flag to enable publish of the user management audit logs. Occurs each time an user create/update/delete operation performed."
        },
        "sendErrorEvent": {
          "type": "string",
          "description": "Flag to enable publish of the error events. Occurs each time an API invocation results in an error."
        },
        "sendLifecycleEvent": {
          "type": "string",
          "description": "Flag to enable publish of the life cycle events. Occurs each time API Gateway is started or shut down."
        },
        "sendPerformanceMetrics": {
          "type": "string",
          "description": "Flag to enable publish of the performance metrics. The performance data provides information on average response time, total request count, fault count, and so on."
        },
        "sendPolicyViolationEvent": {
          "type": "string",
          "description": "Flag to enable publish of the policy violations events. Occurs each time an API invocation violates the policy enforcement that was set for the API."
        },
        "username": {
          "type": "string",
          "description": "The username for the Elasticsearch server instance."
        }
      },
      "description": "This defines the configurations required for Elasticsearch destinations."
    },
    "EmailDestination": {
      "type": "object",
      "properties": {
        "defaultEmailCharset": {
          "type": "string",
          "description": "The character set that API Gateway uses to be recognized by the system. "
        },
        "fromEmail": {
          "type": "string",
          "description": "The email address from which you want to send the alerts."
        },
        "logInvocationContent": {
          "type": "string",
          "description": "The content of the email to be sent for the Log Invocation policy action."
        },
        "logInvocationSubject": {
          "type": "string",
          "description": "The subject line of the email to be sent for the Log Invocation policy action."
        },
        "monitorSLAContent": {
          "type": "string",
          "description": "The content of the email to be sent for the Monitor SLA policy action."
        },
        "monitorSLASubject": {
          "type": "string",
          "description": "The subject line of the email to be sent for the Monitor SLA policy action."
        },
        "monitorSPContent": {
          "type": "string",
          "description": "The content of the email to be sent for the Monitor SP policy action."
        },
        "monitorSPSubject": {
          "type": "string",
          "description": "The subject line of the email to be sent for the Monitor SP policy action."
        },
        "password": {
          "type": "string",
          "description": "The password that API Gateway uses to connect to the specified SMTP server."
        },
        "port": {
          "type": "string",
          "description": "The port that API Gateway uses to connect to the specified SMTP server."
        },
        "smtpServer": {
          "type": "string",
          "description": "The server name or the IP address of the SMTP server that API Gateway uses to send the messages."
        },
        "testRecipient": {
          "type": "string",
          "description": "The email address to which you want to send the test email."
        },
        "throttlingContent": {
          "type": "string",
          "description": "The content of the email to be sent for the Throttling Traffic Optimization policy action."
        },
        "throttlingSubject": {
          "type": "string",
          "description": "The subject line of the email to be sent for the Throttling Traffic Optimization policy action."
        },
        "transportLayerSecurity": {
          "type": "string",
          "description": "The SSL encryption type that API Gateway uses when communicating with an email server. "
        },
        "trustStoreAlias": {
          "type": "string",
          "description": "The truststore that API Gateway uses while sending the request to a native API."
        },
        "username": {
          "type": "string",
          "description": "The username that API Gateway uses to connect to the specified SMTP server."
        }
      },
      "description": "This defines the configurations required for Email destination."
    },
    "ErrorProcessing": {
      "type": "object",
      "properties": {
        "defaultErrorMessage": {
          "type": "string"
        },
        "fallbackErrorMessage": {
          "type": "string"
        },
        "sendNativeProviderFault": {
          "type": "string"
        }
      },
      "description": "Defines the error message configuration. The configured error message will be sent to the invoking client in case API Gateway encounters an exception."
    },
    "ExtendedSettingsInput": {
      "type": "object",
      "properties": {
        "preferredSettings": {
          "$ref": "#/definitions/Settings"
        }
      }
    },
    "ExtendedSettingsOutput": {
      "type": "object",
      "properties": {
        "allSettings": {
          "$ref": "#/definitions/Settings"
        },
        "preferredSettings": {
          "$ref": "#/definitions/Settings"
        }
      }
    },
    "ExternalPortal": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "endpointPassword": {
          "type": "string",
          "description": "Password for API Portal user used by API Gateway to access portal."
        },
        "endpointTenant": {
          "type": "string",
          "description": "API Portal tenant name."
        },
        "endpointURL": {
          "type": "string",
          "description": "API Portal endpoint URL."
        },
        "endpointUsername": {
          "type": "string",
          "description": "API Portal username used by API Gateway to communicate."
        },
        "type": {
          "type": "string"
        }
      },
      "description": "This defines the API Portal configuration."
    },
    "GatewayCacheConfig": {
      "type": "object",
      "properties": {
        "autoScale": {
          "type": "boolean",
          "description": "Specifies whether to auto scale caching dynamically"
        },
        "cacheName": {
          "type": "string"
        },
        "cacheSizeInPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the caching size in percentage"
        },
        "cacheableType": {
          "$ref": "#/definitions/CacheableType"
        },
        "collectStatistics": {
          "type": "boolean",
          "description": "Specifies whether to collect statistics for the caching"
        },
        "recordCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GatewayEndpoints": {
      "type": "object",
      "properties": {
        "gatewayEndpoint": {
          "type": "string",
          "description": "API's access endpoint exposed in API Gateway."
        },
        "status": {
          "type": "string",
          "description": "Status of the API endpoint.",
          "enum": [
            "NEW",
            "PUBLISHED",
            "OBSELETE"
          ]
        }
      },
      "description": "This defines the API Gateway's API endpoint."
    },
    "GroupMapping": {
      "type": "object",
      "properties": {
        "attributeToGroupMap": {
          "type": "object",
          "description": "Specifies list the attribute values from SAML assertion to be used mapping APIGateway group.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "groupAttributes": {
          "type": "array",
          "description": "Specifies list the attribute from SAML assertion.The value of these attributes will be used in mapping the group in APIGateway.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InputLdapConfiguration": {
      "type": "object",
      "properties": {
        "ldapConfig": {
          "$ref": "#/definitions/LDAPConfiguration"
        }
      }
    },
    "IntegrationServer": {
      "type": "object",
      "properties": {
        "Adapter Runtime": {
          "type": "string"
        },
        "Clustering": {
          "type": "string"
        },
        "Concurrent Sessions": {
          "type": "string"
        },
        "Distributed Cache": {
          "type": "string"
        },
        "Enterprise Gateway": {
          "type": "string"
        },
        "Guaranteed Delivery": {
          "type": "string"
        },
        "Product Code": {
          "type": "string"
        },
        "Product Version": {
          "type": "string"
        },
        "Publish / Subscribe": {
          "type": "string"
        },
        "Remote Invoke": {
          "type": "string"
        },
        "Security Auditing": {
          "type": "string"
        }
      }
    },
    "JMSConnectionAlias": {
      "type": "object",
      "properties": {
        "aliasName": {
          "type": "string",
          "description": "The name of the JMSConnectionAlias configuration"
        },
        "allowNewConnectionPerTrigger": {
          "type": "string",
          "description": "This property is to enable/disable the allowNewConnectionPerTrigger"
        },
        "allowReplyToConsumer": {
          "type": "string",
          "description": "This property is to enable/disable the allowReplyToConsumer"
        },
        "associationType": {
          "type": "string",
          "description": "This property specifies whether the JMS connections has been created using JNDI or Native broker API. Value 0 refers to JNDI"
        },
        "cacheProducersPoolMinSize": {
          "type": "string",
          "description": "This property specifies the minimum size of producer cache pool"
        },
        "cacheProducersPoolSize": {
          "type": "string",
          "description": "This property specifies the max size of producer cache pool"
        },
        "cacheProducersQueueList": {
          "type": "string",
          "description": "This property specifies the list of queues to cache"
        },
        "cacheProducersTopicList": {
          "type": "string",
          "description": "This property specifies the list of topics to cache"
        },
        "classLoader": {
          "type": "string",
          "description": "This property specifies the classloader value"
        },
        "clientID": {
          "type": "string",
          "description": "This property specifies the client id of the JMS connection"
        },
        "csqDrainInOrder": {
          "type": "string",
          "description": "This property is to enable/disable csqDrainInOrder"
        },
        "csqSize": {
          "type": "string",
          "description": "This property specifies the csq size. Default value -1."
        },
        "description": {
          "type": "string",
          "description": "The description of the JMSConnectionAlias configuration"
        },
        "enabled": {
          "type": "string",
          "description": "This property specifies the size of um_consumerIncludedStrings"
        },
        "jmsConnectionAliasId": {
          "type": "string",
          "description": "A unique ID for the jmsConnectionAlias",
          "readOnly": true
        },
        "jndi_automaticallyCreateUMAdminObjects": {
          "type": "string",
          "description": "This property specifies whether to create UM admin objects automatically"
        },
        "jndi_connectionFactoryLookupName": {
          "type": "string",
          "description": "This property specifies the connection factory lookup name for the JMS connection"
        },
        "jndi_connectionFactoryPollingInterval": {
          "type": "string",
          "description": "This property specifies the connection factory polling interval"
        },
        "jndi_connectionFactoryUpdateType": {
          "type": "string",
          "description": "This property specifies the connection factory update type"
        },
        "jndi_enableFollowTheMaster": {
          "type": "string",
          "description": "This property is to enable the jndi_enableFollowTheMaster property"
        },
        "jndi_jndiAliasName": {
          "type": "string",
          "description": "Name of the JNDI that the JMS connection refers to"
        },
        "manageDestinations": {
          "type": "string",
          "description": "This property is to enable/disable the manageDestinations"
        },
        "optTempQueueCreate": {
          "type": "string",
          "description": "This property is to opt temporary queue creation"
        },
        "password": {
          "type": "string",
          "description": "This property specifies the password to create the JMS connection"
        },
        "poolTimeout": {
          "type": "string",
          "description": "This property specifies the poolTimeout value"
        },
        "producerCachingMode": {
          "type": "string",
          "description": "This property is to enable/disable the producerCachingMode. 0 means disabled, 2 means Enable per destination"
        },
        "producerMaxRetryAttempts": {
          "type": "string",
          "description": "This property specifies the max retry attempts value for the producer"
        },
        "producerRetryInterval": {
          "type": "string",
          "description": "This property specifies the retry interval"
        },
        "producerSessionPoolMinSize": {
          "type": "string",
          "description": "This property specifies the minimum size of producer session pool"
        },
        "producerSessionPoolSize": {
          "type": "string",
          "description": "This property specifies the max size of producer session pool"
        },
        "transactionType": {
          "type": "string",
          "description": "This property specifies the type of the transaction.Value 0 refers to NO-trans, 1 refers to Local-tran, 2 refers to XA-trans"
        },
        "um_loggingOutput": {
          "type": "string",
          "description": "This property specifies the logging output value. 0 refers to server log, 1 refers to audit logging"
        },
        "um_producerIncludedStrings": {
          "type": "string",
          "description": "This property specifies the size of um_producerIncludedStrings"
        },
        "um_producerMessageTracking": {
          "type": "string",
          "description": "This property is to enable/disable the um_producerMessageTracking"
        },
        "user": {
          "type": "string",
          "description": "This property specifies the user name to create the JMS connection"
        }
      },
      "description": "This model contains JMS connection alias details"
    },
    "JMSConsumerAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/WebserviceEndpointAlias"
        },
        {
          "type": "object",
          "properties": {
            "connFactoryName": {
              "type": "string",
              "description": "This property specifies the connection factory name"
            },
            "executeACL": {
              "type": "string",
              "description": "This property specifies the team name"
            },
            "jmsAliasType": {
              "type": "string",
              "description": "This property specifies the jmsAliasType. Either it could be JMS or JNDI "
            },
            "jmsConnAlias": {
              "type": "string",
              "description": "This property specifies the name of JMS connection"
            },
            "jndiProvAlias": {
              "type": "string",
              "description": "This property specifies the name of JNDI"
            },
            "password": {
              "type": "string",
              "description": "This property specifies the password to create the JMS connection"
            },
            "user": {
              "type": "string",
              "description": "This property specifies the name of the user to create the JMS connection"
            }
          }
        }
      ]
    },
    "JMSProviderAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/WebserviceEndpointAlias"
        },
        {
          "type": "object",
          "properties": {
            "deliveryMode": {
              "type": "string",
              "description": "This property specifies the deliveryMode"
            },
            "includeConnFactoryName": {
              "type": "string",
              "description": "This property enables/disables the includeConnFactoryName parameter"
            },
            "includeJNDIParams": {
              "type": "string",
              "description": "This property enables/disables the includeJNDIParams parameter"
            },
            "jmsTriggerName": {
              "type": "string",
              "description": "This property specifies the JMS Trigger name"
            },
            "priority": {
              "type": "integer",
              "format": "int32",
              "description": "This property specifies priority value"
            },
            "replyToDestName": {
              "type": "string",
              "description": "This property specifies the replyToDestName name"
            },
            "replyToDestType": {
              "type": "string",
              "description": "This property specifies the replyToDestType type"
            },
            "timeToLive": {
              "type": "integer",
              "format": "int64",
              "description": "This property specifies the timeToLive value"
            }
          }
        }
      ]
    },
    "JMSTrigger": {
      "type": "object",
      "properties": {
        "aliasName": {
          "type": "string",
          "description": "This property specifies JMS connection name used by the current JMS Trigger"
        },
        "connectionCount": {
          "type": "string",
          "description": "This property is to specify the connectionCount"
        },
        "currentThreads": {
          "type": "string",
          "description": "This property is to specify the currentThreads for the JMS Trigger"
        },
        "destinationName": {
          "type": "string",
          "description": "This property refers to input Message Queue name"
        },
        "destinationType": {
          "type": "string",
          "description": "This property specifies the destination type whether Queue or Topic"
        },
        "durableSubscribeName": {
          "type": "string",
          "description": "This property specifies the durableSubscribeName"
        },
        "enabled": {
          "type": "string",
          "description": "This property is to enable/disable the JMS Trigger"
        },
        "ignoreLocalPublished": {
          "type": "string",
          "description": "This property specifies the status message of the JMS Trigger"
        },
        "isConcurrent": {
          "type": "string",
          "description": "This property is to opt for the concurrent or serial execution of the JMS Trigger"
        },
        "jmsMessageSelector": {
          "type": "string",
          "description": "This property specifies the message selector for the Queue or Topic"
        },
        "jmsTriggerId": {
          "type": "string",
          "description": "A unique ID for the jmsTrigger",
          "readOnly": true
        },
        "maxExecutionThreads": {
          "type": "string",
          "description": "This property is to specify the maximum execution threads in case of concurrent execution"
        },
        "state": {
          "type": "string",
          "description": "This property reveals the state (enabled/disable)of the JMS Trigger"
        },
        "triggerName": {
          "type": "string",
          "description": "The name of the JMS trigger"
        }
      },
      "description": "This model contains JMS trigger details"
    },
    "JNDIProviderAlias": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the JNDIProviderAlias configuration"
        },
        "initialContextFactory": {
          "type": "string",
          "description": "The IntialContextFactoryName for JNDI lookup"
        },
        "isSSL": {
          "type": "string",
          "description": "Secure communication between Integration Server and the JNDI provider"
        },
        "jndiAliasName": {
          "type": "string",
          "description": "The name of the JNDIProviderAlias configuration"
        },
        "jndiProviderAliasId": {
          "type": "string",
          "description": "A unique ID for the jndiProviderAlias",
          "readOnly": true
        },
        "keyAlias": {
          "type": "string",
          "description": "The alias to the key that contains the private key for connecting to the JNDI provider. "
        },
        "keyStoreAlias": {
          "type": "string",
          "description": "The alias for the keystore that contains the client certificates for Integration Server to use when connecting to the JNDI provider."
        },
        "keyStoreFormatProp": {
          "type": "string",
          "description": "The JNDI property name for storing the keystore format."
        },
        "keyStoreProp": {
          "type": "string",
          "description": "The JNDI property name for storing the keystore location."
        },
        "keyStorePwdProp": {
          "type": "string",
          "description": "The JNDI property name for storing the keystore password."
        },
        "otherProps": {
          "type": "string",
          "description": "Any other properties you would like to mention, Provide the values as comma separated"
        },
        "privateKeyProp": {
          "type": "string",
          "description": "The JNDI property name for storing the private key name."
        },
        "providerURL": {
          "type": "string",
          "description": "Message broker details"
        },
        "providerURLFailoverList": {
          "type": "string",
          "description": "Fall backs URL's of providerURL"
        },
        "securityCredentials": {
          "type": "string",
          "description": "securityCredentials in case of SSL connection"
        },
        "securityPrincipal": {
          "type": "string",
          "description": "SecurityPrincipal in case of SSL connection"
        },
        "trustStoreAlias": {
          "type": "string",
          "description": "The alias for the truststore that contains the certificates of the Certificate Authority (CA) for the JNDI provider."
        },
        "trustStoreProp": {
          "type": "string",
          "description": "The JNDI property name for storing the truststore location."
        },
        "trustStorePwdProp": {
          "type": "string",
          "description": "The JNDI property name for storing the truststore password."
        }
      },
      "description": "This model contains JNDI configuration details"
    },
    "KerberosSettings": {
      "type": "object",
      "properties": {
        "kerberosConfigContents": {
          "type": "string",
          "description": "The contents of the Kerberos configuration file conforming to the specification. If you do not want the default KDC and realm values from this configuration file to be overridden, then do not set values for the kerberosRealm and kerberosKDC properties. It contains the Kerberos configuration information, including the Kerberos realm, locations of KDCs, defaults for the current realm and for Kerberos applications, and the host names, Kerberos realms mappings and encryption algorithms. The full specification details of the Kerberos configuration file can be found in https://linux.die.net/man/5/krb5.conf."
        },
        "kerberosConfigFileName": {
          "type": "string",
          "description": "The name of the Kerberos configuration file to be stored and maintained in API Gateway."
        },
        "kerberosKDC": {
          "type": "string",
          "description": "The host name of the machine on which the Key Distribution Center (KDC) resides. If kerberosKDC is set, it overrrides the default KDC specified in the provided configuration file."
        },
        "kerberosRealm": {
          "type": "string",
          "description": "The domain name of the Kerberos server. If kerberosRealm is set, it overrides the realm specified in the provided configuration file."
        },
        "useSubjectCreds": {
          "type": "string",
          "description": "Indicates whether the Kerberos v5 Generic Security Services (GSS) mechanism should be used to obtain credentials from an existing subject."
        }
      }
    },
    "KeyStore": {
      "type": "object",
      "properties": {
        "bitarray": {
          "type": "string",
          "description": "Comma separated list of bits (1/0) indicating whether the particular key alias has been successfully configured in API Gateway or not. For each key alias, 1 indicates that the key alias was loaded successfully and 0 indicates that the key alias was not loaded/configured."
        },
        "fileContent": {
          "type": "string",
          "description": "The contents of the keystore file."
        },
        "isLoaded": {
          "type": "boolean",
          "description": "Indicates whether the keystore is loaded or not. A keystore may not be loaded if there are errors while reading the keystore file or its key aliases."
        },
        "isWarning": {
          "type": "boolean",
          "description": "Indicates whether a warning is thrown by the API Gateway while persisting the keystore."
        },
        "keyStoreDescription": {
          "type": "string",
          "description": "The description for the keystore."
        },
        "keyStoreName": {
          "type": "string",
          "description": "The name of the keystore. It cannot contain spaces or special characters. The name of the key store must be unique across all the keystores created in API Gateway."
        },
        "keyStorePassword": {
          "type": "string",
          "description": "The keystore password that is defined at the time of keystore creation using a keystore utility."
        },
        "keyStoreProvider": {
          "type": "string"
        },
        "keyStoreType": {
          "type": "string",
          "description": "The certificate file format of the keystore.",
          "enum": [
            "JKS",
            "PKCS12"
          ]
        },
        "message": {
          "type": "string",
          "description": "The error or warning or success message from persisting the keystore in API Gateway. If there are failures in loading a keystore or a key alias, then the reasons for the failures are indicated by this message."
        },
        "nullPKpasswds": {
          "type": "string",
          "description": "Comma separated list of boolean values (false/true) indicating whether the particular alias has a password or not in the same order as the aliases specified in pkAliasesList. For each key alias, true indicates that the key alias does not have a password and false indicates that it does have a password."
        },
        "pkAliasesList": {
          "type": "string",
          "description": "Comma separated list of alias names in the uploaded keystore file."
        },
        "pkPasswordsList": {
          "type": "string",
          "description": "Comma separated list of passwords in the same order as the aliases specified in pkAliasesList. If a particular key alias does not have a password, it is denoted by space."
        },
        "uploadFileName": {
          "type": "string",
          "description": "The name of the keystore file that will be used to save the keystore internally in API Gateway."
        }
      },
      "description": "This model contains Keystore details"
    },
    "KeystoreTruststore": {
      "type": "object",
      "properties": {
        "configId": {
          "type": "string"
        },
        "keystoreName": {
          "type": "string"
        },
        "outboundKeyAlias": {
          "type": "string"
        },
        "outboundKeystoreName": {
          "type": "string"
        },
        "outboundTruststoreName": {
          "type": "string"
        },
        "signingAlias": {
          "type": "string"
        },
        "truststoreName": {
          "type": "string"
        }
      },
      "description": "This defines the keystore and truststore requred for the API Gateway."
    },
    "LDAPConfiguration": {
      "type": "object",
      "properties": {
        "cacheSize": {
          "type": "string",
          "description": "The maximum number of LDAP users Integration Server can keep in memory in the user cache. The default is 10."
        },
        "cacheTTL": {
          "type": "string",
          "description": "The number of minutes an LDAP user's credentials (userid and password) can remain in the credential cache before being purged. The default is 60 minutes."
        },
        "cdsRunning": {
          "type": "boolean"
        },
        "ldapDirectoryList": {
          "type": "array",
          "description": "List of LDAP directories. This field is applicable when LDAP provider is chosen.",
          "items": {
            "$ref": "#/definitions/LDAPDirectory"
          }
        },
        "provider": {
          "type": "string",
          "description": "Choose the authentication provider. Possible values are 'local' and 'LDAP' "
        }
      }
    },
    "LDAPDirectory": {
      "type": "object",
      "properties": {
        "Distinguished Name (DN) method": {
          "type": "boolean",
          "description": "Specifies the DN method used for building the DN. Possible values are 'true' and 'false'.Select 'true' if the DN should be synthesized from the configured prefix and suffix values (Synthesize DN Method). These values are prefixed and suffixed to the username to build the DN. Select 'false' if the DN should be queried from a specified root directory (Query DN Method). The Synthesize DN method can be faster than the Query DN method because it does not perform a query against the LDAP directory. However, if your LDAP system does not contain all users in a single flat structure, use the Query DN method instead."
        },
        "dnPrefix": {
          "type": "string",
          "description": "A string that specifies the beginning of a DN you want to pass to the LDAP server. This field is applicable when 'useaf' is configured as 'true'. i.e, Synthesize DN Method is chosen.For example, if the prefix is 'cn=' and the suffix is ',ou=Users' and a user logs in specifying 'bob', API Gateway builds the DN 'cn=bob,ou=Users' and sends it to the LDAP server for authentication."
        },
        "dnSuffix": {
          "type": "string",
          "description": "A string that specifies the end of a DN you want to pass to the LDAP server. This field is applicable when 'useaf' is configured as 'true'. i.e, Synthesize DN Method is chosen.For example, if the prefix is 'cn=' and the suffix is ',ou=Users' and a user logs in specifying 'bob', API Gateway builds the DN 'cn=bob,ou=Users' and sends it to the LDAP server for authentication."
        },
        "group": {
          "type": "string",
          "description": "An API Gateway group with which the user is associated. The user is allowed to access services that members of this API Gateway group can access. This access is controlled by the teams with which the group is associated. If you also specify a value in the 'memberAttribute' field, the user has the same access as members of the API Gateway group and members of LDAP groups that have been mapped to an API Gateway team."
        },
        "groupIdProperty": {
          "type": "string",
          "description": "A property that identifies an LDAP group, such as CN. This field is required."
        },
        "groupRootDN": {
          "type": "string",
          "description": "The full distinguished name. For example, if you specify 'ou=groups,webMethods,dc=com', API Gateway will issue a query that will display all the LDAP groups. This field is required."
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the current LDAP directory. Priority of the LDAP directory among other directories is calculated using the index. The starting value of index for the LDAP directory with first priority is 0 and is incremented by 1 for subsequent LDAP directories."
        },
        "memberAttribute": {
          "type": "string",
          "description": "The name of the attribute in a group's directory entry that identifies each member of the group. This value is usually 'member' or 'uniqueMember', but can vary depending on the schema of the LDAP directory. API Gateway uses this information during team checking to see if the user attempting to log in belongs to an LDAP group that has been mapped to a team. If no value is specified here, API Gateway does not check for membership in an LDAP group. As a result, the user's access is controlled by the API Gateway group specified in the 'group' field."
        },
        "password": {
          "type": "string",
          "description": "The base 64 encoded password used by API Gateway to connect to the LDAP server."
        },
        "poolMax": {
          "type": "string",
          "description": "The maximum number of connections allowed in the pool that API Gateway maintains for connecting to the LDAP server. When API Gateway starts, the connection pool initially contains a minimum number of connections, which are specified in the Minimum Connection Pool field. API Gateway adds connections to the pool as needed until it reaches the maximum allowed. The default is 10."
        },
        "poolMin": {
          "type": "string",
          "description": "The minimum number of connections allowed in the pool that API Gateway maintains for connecting to the LDAP server. When API Gateway starts, the connection pool initially contains this minimum number of connections. API Gateway adds connections to the pool as needed until it reaches the maximum allowed, which is specified in the Maximum Connection Pool field. The default is 0."
        },
        "principal": {
          "type": "string",
          "description": "The user ID the Integration Server should supply to connect to the LDAP server, for example, o=webm.com or dc=webm,dc=com.  This user should not be the Administrator account, but a user that has permission to query groups and group membership. If your LDAP server allows anonymous access, leave this field blank."
        },
        "timeout": {
          "type": "string",
          "description": "The number of seconds the API Gateway will wait while trying to connect to the LDAP server. After this time has passed, the API Gateway will try the next configured LDAP server on the list. The default is 5 seconds."
        },
        "uidProp": {
          "type": "string",
          "description": "A property that identifies an LDAP userid, such as 'cn' or 'uid'. "
        },
        "url": {
          "type": "string",
          "description": "The complete URL of the LDAP server. The URL has the format protocol://hostname:portnumber. Possible values of 'protocol' is 'ldap' for standard connections or 'ldaps' for secure connections. For example, ldaps://ldaphost1:700"
        },
        "userEmailAttribute": {
          "type": "string",
          "description": "A property that identifies an LDAP user Email Address, such as 'mail' or 'email'. "
        },
        "userRootDn": {
          "type": "string",
          "description": "Enter the full distinguished name. For example, configure this value as 'ou=users,dc=webMethods,dc=com', API Gateway will issue a query that starts searching in the root directory ou=users for a common name that matches the name the user logged in with."
        }
      }
    },
    "LicenseDetail": {
      "type": "object",
      "properties": {
        "API Gateway": {
          "$ref": "#/definitions/APIGateway"
        },
        "Sales Information": {
          "$ref": "#/definitions/SalesInformation"
        },
        "integrationServer": {
          "$ref": "#/definitions/IntegrationServer"
        },
        "licenseInformation": {
          "$ref": "#/definitions/LicenseInformation"
        },
        "productInformation": {
          "$ref": "#/definitions/ProductInformation"
        }
      }
    },
    "LicenseInformation": {
      "type": "object",
      "properties": {
        "ExtendedRights": {
          "type": "string"
        },
        "LicenseType": {
          "type": "string"
        },
        "LicenseVersion": {
          "type": "string"
        },
        "Metering": {
          "type": "string"
        },
        "Price Quantity": {
          "type": "string"
        },
        "Price Unit": {
          "type": "string"
        },
        "TypeOfInstallation": {
          "type": "string"
        }
      }
    },
    "LoadBalancer": {
      "type": "object",
      "properties": {
        "httpUrls": {
          "type": "array",
          "description": "HTTP URLs to be exposed for API invocation.",
          "items": {
            "type": "string"
          }
        },
        "httpsUrls": {
          "type": "array",
          "description": "HTTPS URLs to be exposed for API invocation.",
          "items": {
            "type": "string"
          }
        },
        "webAppUrl": {
          "type": "string",
          "description": "API Gateway UI access url"
        },
        "websocketUrls": {
          "type": "array",
          "description": "WebSocket URL to be exposed for Websocket APIs invocation.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "This defines the Load Balancer URLs configuration in the API Gateway."
    },
    "LogConfiguration": {
      "type": "object",
      "properties": {
        "apigatewayLogger": {
          "type": "string",
          "description": "The log setting of APIGateway server.Possible values are off,trace,debug,info,warn,error and fatal"
        },
        "elasticSearchLogger": {
          "type": "string",
          "description": "The log setting of Internal Data Store.Possible values are off,info,debug,warn,error and fatal"
        },
        "enableLogAggregation": {
          "type": "string",
          "description": "Enabling log aggregation will collect logs from the different components and store in Internal Data Store or external Elasticsearch.The value can be true or false."
        },
        "enableSecurityLogger": {
          "type": "string",
          "description": "The log setting to enable APIGateway security logs.Possible values are true and false."
        },
        "enableSessionLogger": {
          "type": "string",
          "description": "The log setting enable APIGateway session logs.Possible values are off,trace,debug,info,warn,error and fatal"
        },
        "hostName": {
          "type": "string",
          "description": "Hostname of external elastic search used to send the logs."
        },
        "indexName": {
          "type": "string",
          "description": "Indexname of external elastic search to store the accumulated logs."
        },
        "kibanaLogger": {
          "type": "string",
          "description": "The log setting of APIGateway dashboard.Possible values are silent,quiet and verbose"
        },
        "logDestination": {
          "type": "string",
          "description": "Specifies where to store the accumulated logs from different stores. Value can be EXTERNAL_ES or INTERNAL"
        },
        "password": {
          "type": "string",
          "description": "Password that is used to communicate the external elastic search."
        },
        "port": {
          "type": "string",
          "description": "Port to communicate the external elastic search."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol to communicate the external elastic search."
        },
        "sagOsgiLogger": {
          "type": "string",
          "description": "The log setting of OSGI platform.Possible values are true and false."
        },
        "userName": {
          "type": "string",
          "description": "Username to communicate the external elastic search."
        }
      },
      "description": "This contains log settings of various components used by APIGateway."
    },
    "MasterPasswordExpiryInterval": {
      "type": "object",
      "properties": {
        "expireInterval": {
          "type": "string",
          "description": "This interval(in days) specifies the time after which the master password would expire"
        }
      },
      "description": "The expiration interval is a recommended time between master password changes.The default expiration interval for a master password is 90 days.After the expiration date,API Gateway will continue to operate using the existing password indefinitely."
    },
    "MasterPasswordExpiryIntervalResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The response message from the server when the master password expiry interval is updated"
        },
        "result": {
          "type": "string",
          "description": "This is the updated master password expiry interval(in days)"
        }
      },
      "description": "The schema of the response from the server when the expiry interval is updated"
    },
    "MasterPasswordProperties": {
      "type": "object",
      "properties": {
        "daysTilExpire": {
          "type": "string",
          "description": "The remaining number of days for the master password expiration"
        },
        "expireDate": {
          "type": "string",
          "description": "The expiry date of the master password.The format for this field would be YYYY-MM-DD HH:mm:ssZ"
        },
        "expireInterval": {
          "type": "string",
          "description": "The interval(in days) after which the master password would expire"
        },
        "expireMessage": {
          "type": "string",
          "description": "The message which will be returned once the master password is expired"
        },
        "lastChangeDate": {
          "type": "string",
          "description": "The latest date when the master password was updated.The format for this field would be YYYY-MM-DD HH:mm:ssZ"
        },
        "statusMessage": {
          "type": "string",
          "description": "The current status of the master password"
        }
      },
      "description": "Describes the master password configuration properties in API Gateway"
    },
    "MasterPasswordResetResponse": {
      "type": "object",
      "properties": {
        "handleCount": {
          "type": "string",
          "description": "The number of passwords that are updated during master password reset"
        },
        "message": {
          "type": "string",
          "description": "The response message from the server when the master password is reset"
        }
      },
      "description": "Describes the response when the master password is reset"
    },
    "MasterPasswordUpdate": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "description": "This is the base64 encoded value of the new master password"
        },
        "oldPassword": {
          "type": "string",
          "description": "This is the base64 encoded value of the old master password"
        }
      },
      "description": "Describes the properties required for updating the master password"
    },
    "MasterPasswordUpdateResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The response message from the server when the master password is updated"
        }
      }
    },
    "MigrationConfig": {
      "type": "object",
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "type": "string",
          "description": "The type of migration action to be performed",
          "enum": [
            "clean",
            "reindex",
            "transform",
            "backup"
          ]
        },
        "indicesType": {
          "type": "string",
          "description": "The type of indices to be reindexed for reindex action",
          "enum": [
            "core",
            "analyticsandlogs"
          ]
        },
        "properties": {
          "type": "object",
          "description": "Migration properties for reindex action. Default values are taken from migration.properties file. Any value passed in here would overwrite the default value.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceElasticsearch": {
          "$ref": "#/definitions/ElasticsearchConfig"
        }
      },
      "description": "This model contains details about migration inputs in API Gateway"
    },
    "OutboundProxyGetResponse": {
      "type": "object",
      "properties": {
        "proxyServerList": {
          "type": "object",
          "description": "Contains a map of the available outbound proxy server aliases in API Gateway with the key denoting the alias name and the value representing the corresponding outbound proxy server alias configuration.",
          "additionalProperties": {
            "$ref": "#/definitions/OutboundProxySettings"
          }
        }
      }
    },
    "OutboundProxySettings": {
      "type": "object",
      "required": [
        "host",
        "port",
        "proxyAlias"
      ],
      "properties": {
        "entityId": {
          "type": "string",
          "description": "The proxy server alias used to identify the entity in API Gateway.",
          "readOnly": true
        },
        "ftpType": {
          "type": "string",
          "description": "The type of the FTP proxy server. Applicable only if protocol value is FTP. Indicated by a number in the range 0 to 7. 0 - No proxy, 1 - ftp_user@ftp_host no proxy auth, 2 - ftp_user@ftp_host proxy auth, 3 - site command, 4 - open command, 5 - ftp_user@proxy_user@ftp_host, 6 - proxy_user@ftp_host, 7 - ftp_user@ftp_host proxy_user",
          "enum": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7"
          ]
        },
        "host": {
          "type": "string",
          "description": "The host name or IP address of the proxy server."
        },
        "isDefault": {
          "type": "string",
          "description": "Indicates whether this proxy server alias is the default for the corresponding protocol. There can be only one default proxy server alias for a given protocol. Y denotes Yes and N denotes No.",
          "enum": [
            "Y",
            "N"
          ]
        },
        "password": {
          "type": "string",
          "description": "The password required to authenticate if authentication is enabled for the proxy server."
        },
        "passwordHandle": {
          "type": "string",
          "description": "The password handle which is used to store the password (if specified) in a secure manner in API Gateway.",
          "readOnly": true
        },
        "port": {
          "type": "string",
          "description": "The port number of the proxy server."
        },
        "protocol": {
          "type": "string",
          "description": "The protocol for which the proxy server is created.",
          "enum": [
            "HTTP",
            "HTTPS",
            "SOCKS",
            "FTP"
          ]
        },
        "proxyAlias": {
          "type": "string",
          "description": "The outbound proxy server alias name. It must be unique across all outbound proxy server aliases defined in API Gateway. Once a proxy server alias is defined with a given name, it cannot be modified further."
        },
        "socksVersion": {
          "type": "string",
          "description": "The SOCKS version of the proxy server. Applicable only if protocol value is SOCKS. A value of 4 indicates SOCKS protocol version 4 and a value of 5 indicates SOCKS protocol version 5. SOCKS protocol version 4 does not support authentication and hence username/password cannot be specified if socksVersion = 4.",
          "enum": [
            "4",
            "5"
          ]
        },
        "status": {
          "type": "string",
          "description": "Indicates whether the particular proxy server alias is enabled or disabled.",
          "readOnly": true,
          "enum": [
            "Enabled",
            "Disabled"
          ]
        },
        "username": {
          "type": "string",
          "description": "The user name required to authenticate against if authentication is enabled for the proxy server."
        }
      }
    },
    "PasswordExpirySettings": {
      "type": "object",
      "properties": {
        "applicableUsers": {
          "type": "string",
          "description": "List of users to whom the expiration interval setting is applicable. The users are separated by semicolon(;). For example, if you want to add user1 and user2 to the list, specify as 'user1;user2'"
        },
        "emailIds": {
          "type": "string",
          "description": "List of email addresses to which API Gateway sends an email notification informing that the user password is about to expire or has already expired. The email addresses are separated by a new line character (\\n). For example, 'u1@abc.com\\nu2@abc.com'"
        },
        "expirationInterval": {
          "type": "string",
          "description": "Number of days after which a password will expire, if not changed. The value should be a non-zero integer. Default value is 90."
        },
        "expiryEmailBefore": {
          "type": "string",
          "description": "Specifies the number of days prior to password expiry that API Gateway should start sending the reminder emails for password reset. The emails are sent daily until the user either updates the password or changes the expiration interval. Set the value to 0 to prevent API Gateway from sending the reminder emails for soon to expire passwords. Default value is 3."
        },
        "isEnabled": {
          "type": "string",
          "description": "Specifies whether to enable the password expiry settings. Possible values are 'true' (enabled) and 'false' (disabled). Default value is 'false'"
        }
      }
    },
    "PasswordRestrictions": {
      "type": "object",
      "properties": {
        "enablePasswordChange": {
          "type": "string",
          "description": "Specifies whether users are allowed to change their passwords. These users must have developer privileges. Possible values are 'true' and 'false'. Default value is 'true'"
        },
        "historyLength": {
          "type": "string",
          "description": "Maximum number of previously set passwords that API Gateway saves for a user (excluding the current password). You cannot choose a password that matches any of the stored passwords. Maximum value allowed for this field is 12. Default value is 0."
        },
        "maxIdenticalCharsInARow": {
          "type": "string",
          "description": "Maximum number of identical characters\nin a row a password can contain. Default value is 3"
        },
        "maxLength": {
          "type": "string",
          "description": "Maximum number of characters (alphabetic characters, digits, and special characters combined) the password can contain. Default value is 64. Maximum value allowed for this field is 128"
        },
        "minDigits": {
          "type": "string",
          "description": "Minimum number of digits the password must contain. Default value is 0"
        },
        "minLength": {
          "type": "string",
          "description": "Minimum number of characters (alphabetic characters, digits, and special characters combined) the password must contain.Default value is 8"
        },
        "minLowerChars": {
          "type": "string",
          "description": "Minimum number of lowercase alphabetic characters the password must contain. Default value is 0"
        },
        "minSpecialChars": {
          "type": "string",
          "description": "Minimum number of special characters, such as asterisk (*), period (.), and question mark (?) the password must contain. Default value is 0"
        },
        "minUpperChars": {
          "type": "string",
          "description": "Minimum number of uppercase alphabetic characters the password must contain. Default value is 0"
        },
        "mode": {
          "type": "string",
          "description": "Specifies whether Administrator users are allowed to choose passwords that are not impacted by the password restriction settings. Possible values are 'strict' and 'lax'. Default value is 'lax'. For Administrator users, when this property is set to 'strict', API Gateway enforces the password restrictions. When set to 'lax', the password restrictions are not enforced. For non-administrators the restrictions are always enforced."
        }
      }
    },
    "PortalCommunities": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of API Portal community."
        },
        "id": {
          "type": "string",
          "description": "ID of API Portal community."
        },
        "name": {
          "type": "string",
          "description": "API Portal community name."
        },
        "status": {
          "type": "string",
          "description": "Staus of the API Portal community.",
          "enum": [
            "NEW",
            "PUBLISHED",
            "PUBLISHED_PACKAGE",
            "OBSELETE"
          ]
        }
      },
      "description": "This defines the API Portal communities configuration in the API Gateway."
    },
    "PortalGateway": {
      "type": "object",
      "properties": {
        "externalPortal": {
          "$ref": "#/definitions/ExternalPortal"
        },
        "gatewayDescription": {
          "type": "string",
          "description": "Description of API Portal."
        },
        "gatewayName": {
          "type": "string",
          "description": "Name of the API Portal."
        },
        "gatewayPassword": {
          "type": "string",
          "description": "API Gateway password for provided username used by API Portal to access API Gateway."
        },
        "gatewayURL": {
          "type": "string",
          "description": "Integration Server URL of the API Gateway."
        },
        "gatewayUsername": {
          "type": "string",
          "description": "API Gateway administrative privileged username used by API Portal to access API Gateway."
        },
        "id": {
          "type": "string",
          "description": "API Portal configuration object ID in API Gateway."
        },
        "published": {
          "type": "boolean"
        },
        "refId": {
          "type": "string",
          "description": "Specifies API Gateway reference ID in API Portal. This is used to identify the API Gateway in API Portal."
        },
        "stageName": {
          "type": "string",
          "description": "Specifies the current stage name of the Gateway"
        },
        "version": {
          "type": "string",
          "description": "Specifies API Portal configuration version."
        }
      },
      "description": "This defines the Portal Gateway configuration in the API Gateway."
    },
    "PortalGatewayCommunitiesData": {
      "type": "object",
      "properties": {
        "communities": {
          "$ref": "#/definitions/PortalGatewayData"
        },
        "provider": {
          "type": "string",
          "description": "The API Portal destination configuration name"
        }
      },
      "description": "This defines the API Portal provider and communities information."
    },
    "PortalGatewayData": {
      "type": "object",
      "properties": {
        "gatewayEndpointsList": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/GatewayEndpoints"
          }
        },
        "microgatewayEndpointsList": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/GatewayEndpoints"
          }
        },
        "portalCommunities": {
          "type": "array",
          "description": "List of API Portal communities to which APIs should be published.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PortalCommunities"
          }
        }
      },
      "description": "This defines the API Portal Gateway data in the API Gateway."
    },
    "ProductInformation": {
      "type": "object",
      "properties": {
        "Expiration Date": {
          "type": "string"
        },
        "HigherLevPosNr": {
          "type": "string"
        },
        "HigherLevProdCode": {
          "type": "string"
        },
        "HigherLevProdName": {
          "type": "string"
        },
        "Operating System": {
          "type": "string"
        },
        "Product Code": {
          "type": "string"
        },
        "Product ID": {
          "type": "string"
        },
        "Product Name": {
          "type": "string"
        },
        "Product Version": {
          "type": "string"
        },
        "RenewalDate": {
          "type": "string"
        },
        "Usage": {
          "type": "string"
        }
      }
    },
    "ProxyBypass": {
      "type": "object",
      "required": [
        "proxyBypassAddresses"
      ],
      "properties": {
        "entityId": {
          "type": "string",
          "description": "proxyBypass constance Fixed unique identifier value is proxyBypass"
        },
        "proxyBypassAddresses": {
          "type": "array",
          "description": "The host name or IP address of the server. In the Addresses field, type the fully qualified host and domain name of each server to which you want the Integration Server to issue requests directly. Type the host name and the domain name exactly as they appear in the URLs the server uses. To enter multiple names, separate each with commas.\nYou can use the asterisk (*) to identify several servers with similar names. The asterisk matches any number of characters. For example, if you want to bypass requests made to localhost, www.yahoo.com, home.microsoft.com, and all hosts whose names begin with NYC, you would type:\nlocalhost,www.yahoo.com,home.microsoft.com, NYC*.*",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QuiesceMode": {
      "type": "object",
      "required": [
        "block",
        "enable"
      ],
      "properties": {
        "block": {
          "type": "string",
          "description": "Specifies the type of blocking for quiesce mode in API Gateway",
          "enum": [
            "designtime",
            "all"
          ]
        },
        "enable": {
          "type": "boolean",
          "description": "Specifies whether to enable or disable quiesce mode for API Gateway"
        },
        "failureReason": {
          "type": "string",
          "description": "Specifies the failure reason of the last quiesce mode operation if the status is a failure"
        },
        "flush": {
          "type": "array",
          "description": "Specifies the types of data that need to be flushed when quiesce mode for all is enabled in API Gateway",
          "items": {
            "type": "string",
            "enum": [
              "license_metrics",
              "performance_metrics",
              "subscription_quota"
            ]
          }
        },
        "status": {
          "type": "string",
          "description": "Specifies the current status of the last quiesce mode operation. A null value means that the quiesce mode action is still in progress and the status is not yet known",
          "enum": [
            "success",
            "failure",
            "in progress"
          ]
        }
      },
      "description": "This contains quiesce mode settings for APIGateway."
    },
    "Rule": {
      "type": "object",
      "discriminator": "ruleType",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "This rule is active"
        },
        "attributeContexts": {
          "type": "array",
          "description": "Context(s) of the attribute used in rule expression",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "Rule Description"
        },
        "id": {
          "type": "string",
          "description": "A unique ID for the rule"
        },
        "name": {
          "type": "string",
          "description": "Rule name"
        },
        "owner": {
          "type": "string",
          "description": "Owner of this rule asset"
        },
        "ruleExpressions": {
          "type": "array",
          "description": "Rule condition is defined using ruleExpressions",
          "items": {
            "$ref": "#/definitions/RuleExpression"
          }
        },
        "ruleLogicalOperator": {
          "type": "string",
          "description": "Logical operator (AND / OR) that should be used to evaluate Rule expression"
        },
        "ruleType": {
          "type": "string",
          "description": "Type of the rule",
          "enum": [
            "teamAssignmentRule"
          ]
        }
      }
    },
    "RuleExpression": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        }
      }
    },
    "SNMPDestination": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "Flag to enable save of the life cycle events."
        },
        "port": {
          "type": "string",
          "description": "The SNMP trap receiver port that is listening for SNMP requests and packets."
        },
        "sendErrorEvent": {
          "type": "string",
          "description": "Flag to enable publish of the error events. Occurs each time an API invocation results in an error."
        },
        "sendLifecycleEvent": {
          "type": "string",
          "description": "Flag to enable publish of the life cycle events. Occurs each time API Gateway is started or shut down."
        },
        "sendPolicyViolationEvent": {
          "type": "string",
          "description": "Flag to enable publish of the policy violations events. Occurs each time an API invocation violates the policy enforcement that was set for the API."
        },
        "snmpTargetType": {
          "type": "string",
          "description": "Specifies target type of the SNMP server."
        },
        "transport": {
          "type": "string",
          "description": "The protocol used by SNMP to send traps. The available options are: TCP and UDP. By default, TCP is selected."
        },
        "useAuthorization": {
          "type": "string",
          "description": "Specifies whether an authorization key is required. "
        },
        "usePrivacy": {
          "type": "string",
          "description": "Specifies whether a privacy (encryption) key is required."
        },
        "username": {
          "type": "string",
          "description": "If User is selected as the SNMP target type, then the Username field specifies the SNMPv3 user name to use when connecting to the receiver."
        }
      },
      "description": "This defines the configurations required for the SNMP destination."
    },
    "SSOConfiguration": {
      "type": "object",
      "properties": {
        "groupMapping": {
          "$ref": "#/definitions/GroupMapping"
        },
        "idpFilename": {
          "type": "string",
          "description": "Specifies the file name of identity provider metadata."
        },
        "idpMetadataContent": {
          "type": "string",
          "description": "Specifies base64 encoded file content of identity provider metadata."
        },
        "idpUrl": {
          "type": "string",
          "description": "Specifies the identity provider metadata URL."
        },
        "keystoreAlias": {
          "type": "string",
          "description": "Specifies the keystore alias to be used to generate service provider metadata."
        },
        "saml_assertion_signed": {
          "type": "string",
          "description": "Specifies whether SAML assertion is to be signed from the identity provider."
        },
        "saml_authreq_signed": {
          "type": "string",
          "description": "Specifies whether auth request should signed by the service provider."
        },
        "saml_defaultkey_alias": {
          "type": "string",
          "description": "Specifies the key alias to be used for signing and encryption."
        },
        "saml_enabled": {
          "type": "string",
          "description": "Specifies whether SSO should be enabled or not."
        },
        "saml_encrypkey_alias": {
          "type": "string",
          "description": "Specifies the key alias to be used for encryption."
        },
        "saml_redirect": {
          "type": "string",
          "description": "Specifies the service provider SSO URL."
        },
        "saml_signkey_alias": {
          "type": "string",
          "description": "Specifies the key alias to be used for signing."
        },
        "saml_sp_id": {
          "type": "string",
          "description": "Specifies the service provider entity ID."
        },
        "useSSOLoginByDefault": {
          "type": "string",
          "description": "Specifies whether SSO login page is redirected by default."
        },
        "userProfileMapping": {
          "$ref": "#/definitions/UserProfileMapping"
        }
      }
    },
    "SalesInformation": {
      "type": "object",
      "properties": {
        "AutoCallHome": {
          "type": "string"
        },
        "ContractDetails": {
          "type": "string"
        },
        "ContractPosNumber": {
          "type": "string"
        },
        "Customer ID": {
          "type": "string"
        },
        "Customer Name": {
          "type": "string"
        },
        "License Key": {
          "type": "string"
        },
        "License Type Details": {
          "type": "string"
        },
        "Serial Number": {
          "type": "string"
        }
      }
    },
    "Settings": {
      "type": "object",
      "properties": {
        "extendedKeys": {
          "type": "object",
          "description": "A map containing the API Gateway Extended Settings key-value pair.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "wattKeys": {
          "type": "object",
          "description": "A map containing the Integration Server Watt properties key-value pair.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Shutdown": {
      "type": "object",
      "required": [
        "option"
      ],
      "properties": {
        "bounce": {
          "type": "boolean",
          "description": "Specifies whether to restart API Gateway server after shutdown. A value of true would restart the server. Default value is false."
        },
        "option": {
          "type": "string",
          "description": "Specifies whether to shutdown API Gateway server immediately or after all client sessions are ended. A value of 'force' would shutdown the server immediately and 'drain' would wait for a maximum period of time for all the client sessions to end before shutdown.",
          "enum": [
            "force",
            "drain"
          ]
        },
        "quiesce": {
          "type": "boolean",
          "description": "A value of true would first flush the API Gateway in memory data like performance metrics, license metrics and subscription quota to datastore before shutdown of the server. Next, when API Gateway is restarted either manually or using bounce parameter, the Integration server will be started in Quiesce mode. Note: In a cluster, the flushing of in memory data would happen only on one of the nodes and hence on other nodes the API call would return immediately by eliminating the flush time. The default value is false."
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum wait time in minutes before API Gateway server is shutdown when option drain is specified."
        }
      },
      "description": "This contains parameters for APIGateway shutdown resource."
    },
    "TeamAssignmentRule": {
      "allOf": [
        {
          "$ref": "#/definitions/Rule"
        },
        {
          "type": "object",
          "properties": {
            "teamsAssigned": {
              "type": "array",
              "description": "List of teams to be assigned, if conditions of rule expression is met",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "TrustStore": {
      "type": "object",
      "properties": {
        "certificateAliases": {
          "type": "array",
          "description": "The list of aliases that are available within the truststore.",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "fileContent": {
          "type": "string",
          "description": "The contents of the truststore file."
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the truststore.",
          "readOnly": true
        },
        "isLoaded": {
          "type": "boolean",
          "description": "Indicates whether the truststore is loaded or not. A truststore may not be loaded if there are errors while reading the truststore file."
        },
        "isWarning": {
          "type": "boolean",
          "description": "Indicates whether there is a warning message from the API Gateway while the truststore was created/modified."
        },
        "keyStoreDescription": {
          "type": "string",
          "description": "The description for the truststore."
        },
        "keyStoreLocation": {
          "type": "string",
          "description": "The location where the truststore is saved in API Gateway."
        },
        "keyStoreName": {
          "type": "string",
          "description": "The name of the truststore. It cannot contain spaces or special characters."
        },
        "keyStorePassword": {
          "type": "string",
          "description": "The truststore password that is defined at the time of truststore creation using a keystore utility."
        },
        "keyStoreProvider": {
          "type": "string"
        },
        "keyStoreType": {
          "type": "string",
          "description": "The certificate file format of the truststore.",
          "enum": [
            "JKS"
          ]
        },
        "message": {
          "type": "string",
          "description": "The warning message if any. Applies only if isWarning = true"
        },
        "uploadFileName": {
          "type": "string",
          "description": "The name of the truststore file that will be used to save the truststore internally in API Gateway."
        }
      },
      "description": "Model containing the properties of a truststore in API Gateway"
    },
    "URLAliasSettings": {
      "type": "object",
      "required": [
        "alias",
        "package"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "description": "The unique alias name given for the URL aliases. When invoked with this alias, the path will be substituted."
        },
        "apiId": {
          "type": "string",
          "description": "API linked to this URL alias; applicable only if this URL alias is specific to an API"
        },
        "association": {
          "type": "string",
          "example": "1",
          "description": "Indicates how the URL Alias is created. This value is always 1."
        },
        "id": {
          "type": "string",
          "description": "URL Aliases ID",
          "readOnly": true
        },
        "package": {
          "type": "string",
          "example": "WmAPIGateway",
          "description": "The package to which the URL Alias is associated. Any URL Alias created through the API should always be associated with the WmAPIGateway package."
        },
        "portList": {
          "type": "array",
          "example": "[5555#gateway/ws/soapapi/v1/getOperation,5556#gateway/ws/soapapi/v2/testOp]",
          "description": "An array of port specific mappings for paths. Each mapping in this array must be specified as port_number#url_path. Either urlPath or portList must be specified.",
          "items": {
            "type": "string"
          }
        },
        "urlPath": {
          "type": "string",
          "description": "The default path which must be substituted for the URL alias. If port specific mappings are provided, then this default path is considered if none of the ports are matched with the port of the incoming request. Either urlPath or portList must be specified."
        }
      },
      "description": "This model contains URL Aliases details"
    },
    "URLAliasesGetResponse": {
      "type": "object",
      "properties": {
        "urlAliases": {
          "type": "array",
          "description": "Contains the list of available URL aliases or a single URL alias object.",
          "items": {
            "$ref": "#/definitions/URLAliasSettings"
          }
        }
      }
    },
    "UserProfileMapping": {
      "type": "object",
      "properties": {
        "emailAddresses": {
          "type": "string",
          "description": "Specifies the attribute from SAML assertion to be mapped with APIGateway user profile's email address."
        },
        "firstName": {
          "type": "string",
          "description": "Specifies the attribute from SAML assertion to be mapped with APIGateway user profile's first name."
        },
        "lastName": {
          "type": "string",
          "description": "Specifies the attribute from SAML assertion to be mapped with APIGateway user profile's last name."
        }
      }
    },
    "Webhook": {
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Specifies whether this webhook is active or not. Default value is false."
        },
        "config": {
          "$ref": "#/definitions/WebhookConfig"
        },
        "events": {
          "type": "array",
          "description": "The list of interested events this webhook is subscribed for",
          "items": {
            "type": "string",
            "enum": [
              "migration:quiesce:designtime:completed",
              "migration:quiesce:all:completed",
              "migration:reindex:core:completed",
              "migration:reindex:logsevents:completed",
              "migration:reindex:analyticsandlogs:completed",
              "migration:reindex:all:completed",
              "migration:transform:assets:competed",
              "migration:clean:datastore:completed",
              "apigateway:server:started"
            ]
          }
        },
        "id": {
          "type": "string",
          "description": "A unique ID for the webhook",
          "readOnly": true
        }
      },
      "description": "This model contains details about a webhook in API Gateway"
    },
    "WebhookConfig": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "headers": {
          "type": "object",
          "description": "The HTTP headers to be sent in the request when the event is occurred",
          "additionalProperties": {
            "type": "string"
          }
        },
        "password": {
          "type": "string",
          "description": "The password required to authenticate if authentication is enabled for the webhook endpoint."
        },
        "truststoreAlias": {
          "type": "string",
          "description": "Specify the truststore that needs to be used by API Gateway while sending the request to the webhook endpoint."
        },
        "url": {
          "type": "string",
          "description": "The URL to which API Gateway sends the payload when the event is occurred"
        },
        "username": {
          "type": "string",
          "description": "The user name required to authenticate against if authentication is enabled for the webhook endpoint."
        }
      },
      "description": "This model contains webhook configuration details like url, headers, etc in API Gateway"
    },
    "WebserviceEndpointAlias": {
      "type": "object",
      "discriminator": "aliasType",
      "properties": {
        "WebserviceEndpointAliasId": {
          "type": "string",
          "description": "A unique ID for the WebserviceEndpointAlias",
          "readOnly": true
        },
        "alias": {
          "type": "string",
          "description": "The name of the WebserviceEndpointAlias"
        },
        "aliasType": {
          "type": "string",
          "description": "The property specifies the aliasType, Either it should be Provider or Consumer"
        },
        "description": {
          "type": "string",
          "description": "The description of the WebserviceEndpointAlias"
        },
        "keyAlias": {
          "type": "string",
          "description": "this property specifies the keyalias name"
        },
        "keyStoreAlias": {
          "type": "string",
          "description": "this property specifies the keystorealias name"
        },
        "timestampMaximumSkew": {
          "type": "string",
          "description": "this property specifies the timestampMaximumSkew value"
        },
        "timestampPrecisionInMillis": {
          "type": "string",
          "description": "this property specifies the timestampPrecisionInMillis"
        },
        "timestampTimeToLive": {
          "type": "string",
          "description": "this property specifies the timestampTimeToLive value"
        },
        "transportType": {
          "type": "string",
          "description": "this defines the transport type. The supported transport type is JMS"
        },
        "trustStoreAlias": {
          "type": "string",
          "description": "this property specifies the trustStoreAlias name"
        }
      }
    },
    "WhiteListedIPs": {
      "type": "object",
      "properties": {
        "privateIPs": {
          "type": "array",
          "description": "List of private whitelisted IPs to be considered while API is created / updated by importing a url and import an archive",
          "items": {
            "type": "string"
          }
        },
        "privateV6IPs": {
          "type": "array",
          "description": "List of whitelisted IPV6 private IPs to be considered while API is created / updated by importing a url and import an archive",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "This defines the whitelisting of private IPs configured in the API Gateway."
    },
    "AWSConfigurationAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "accessKey": {
              "type": "string",
              "description": "The access key ID for the AWS instance. This is used to sign the requests"
            },
            "region": {
              "type": "string",
              "description": "The configured AWS instance region detail"
            },
            "secretKey": {
              "type": "string",
              "description": "The secret access key for the AWS instance. This is used to sign the requests"
            }
          }
        }
      ]
    },
    "Alias": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description about the alias"
        },
        "id": {
          "type": "string",
          "description": "A unique ID for the alias",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "A unique name for the assertion"
        },
        "owner": {
          "type": "string",
          "description": "Owner of the alias"
        },
        "stage": {
          "type": "string",
          "description": "Stage for which this alias needs to be used"
        },
        "type": {
          "type": "string",
          "description": "Type of the alias",
          "enum": [
            "simple",
            "endpoint",
            "httpTransportSecurityAlias",
            "soapMessageSecurityAlias",
            "samlIssuerAlias",
            "authServerAlias",
            "webmethodsAlias",
            "transformationAlias",
            "serviceRegistryAlias",
            "clientMetadataMapping",
            "awsConfigurationAlias",
            "isConfigurationAlias"
          ]
        }
      }
    },
    "AuthInfo": {
      "type": "object",
      "discriminator": "type"
    },
    "AuthServerAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "authServerType": {
              "type": "string",
              "description": "Type of the authorization server",
              "enum": [
                "LOCAL_IS",
                "REMOTE_IS",
                "EXTERNAL"
              ]
            },
            "dcrEndpoint": {
              "$ref": "#/definitions/DynamicClientRegistrationEndpoint"
            },
            "localIntrospectionConfig": {
              "$ref": "#/definitions/LocalIntrospectionConfig"
            },
            "metadata": {
              "$ref": "#/definitions/Metadata"
            },
            "providerName": {
              "type": "string",
              "description": "Name of the provider which was created using ClientMetadataMapping alias, used in the Dynamic client registration"
            },
            "remoteISConfig": {
              "$ref": "#/definitions/RemoteISConfig"
            },
            "remoteIntrospectionConfig": {
              "$ref": "#/definitions/RemoteIntrospectionConfig"
            },
            "scopes": {
              "type": "array",
              "description": "List of scopes available in the authorization server",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Scope"
              }
            },
            "sslConfig": {
              "$ref": "#/definitions/SSLConfig"
            },
            "supportedGrantTypes": {
              "type": "array",
              "description": "List of grant types supported by the authorization server",
              "items": {
                "type": "string"
              }
            },
            "tokenGeneratorConfig": {
              "$ref": "#/definitions/TokenGeneratorConfig"
            }
          }
        }
      ]
    },
    "ClientMetadataMapping": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "extendedValuesV2": {
              "type": "array",
              "description": "List of headers that needs to be sent along with the client management request",
              "items": {
                "$ref": "#/definitions/ExtendedValue"
              }
            },
            "generateCredentials": {
              "type": "boolean",
              "description": "Specifies whether API Gateway should generate clientId and client secret"
            },
            "implNames": {
              "type": "object",
              "description": "Map of specification names to the implementation names of the service provider",
              "additionalProperties": {
                "type": "string"
              }
            },
            "providerName": {
              "type": "string",
              "description": "Name of the provider"
            },
            "supportedApplicationTypes": {
              "type": "array",
              "description": "List of application_type values supported by the authorization server provider",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Credentials": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "Specify a domain to access the native API"
        },
        "password": {
          "type": "string",
          "description": "Specify a base64 encoded password to access the native API"
        },
        "userName": {
          "type": "string",
          "description": "Specify a username to access the native API"
        }
      }
    },
    "DynamicClientRegistrationEndpoint": {
      "type": "object",
      "properties": {
        "authInfo": {
          "$ref": "#/definitions/AuthInfo"
        },
        "clientRegistrationEndpoint": {
          "$ref": "#/definitions/OAuth2Endpoint"
        }
      }
    },
    "EndpointAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "connectionTimeout": {
              "type": "integer",
              "format": "int32",
              "description": "time interval (in seconds) after which a connection attempt times out"
            },
            "endPointURI": {
              "type": "string",
              "description": "the default URI or components of the URI such as service name"
            },
            "keyAlias": {
              "type": "string",
              "description": "Key alias in the particular keyStore"
            },
            "keystoreAlias": {
              "type": "string",
              "description": "Keystore alias name that is used for the signing/encryption"
            },
            "optimizationTechnique": {
              "type": "string",
              "description": "Type of optimization technique used for SOAP messages",
              "enum": [
                "None",
                "MTOM",
                "SwA"
              ]
            },
            "passSecurityHeaders": {
              "type": "boolean",
              "description": "Boolean value whether to pass security headers or not"
            },
            "readTimeout": {
              "type": "integer",
              "format": "int32",
              "description": "time interval (in seconds) after which a socket read attempt times out"
            },
            "truststoreAlias": {
              "type": "string",
              "description": "Truststore alias name is used to validate the server certificate"
            }
          }
        }
      ]
    },
    "ExtendedValue": {
      "type": "object",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of endpoint for which the additional header needs to sent",
          "enum": [
            "CLIENT_REGISTRATION",
            "CLIENT_UPDATE",
            "CLIENT_DELETE",
            "CLIENT_READ",
            "SCOPE_CREATE",
            "SCOPE_READ",
            "SCOPE_DELETE",
            "SCOPE_UPDATE"
          ]
        },
        "key": {
          "type": "string",
          "description": "Header name"
        },
        "value": {
          "type": "string",
          "description": "Header value"
        }
      }
    },
    "GatewaySecret": {
      "type": "object",
      "properties": {
        "cachedSecret": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "xrayview": {
          "type": "string"
        }
      }
    },
    "HTTPTransportSecurityAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "authMode": {
              "type": "string",
              "description": "Mode of authentication that needs to be used",
              "enum": [
                "NEW",
                "INCOMING_HTTP_BASIC_AUTH",
                "INCOMING_WSS_USER",
                "INCOMING_X509",
                "DELEGATE_INCOMING",
                "INCOMING_OAUTH_TOKEN",
                "INCOMING_JWT",
                "TRANSPARENT",
                "INCOMING_KERBEROS"
              ]
            },
            "authType": {
              "type": "string",
              "description": "type of authentication you want to use while communicating with the native API",
              "enum": [
                "HTTP_BASIC",
                "NTLM",
                "OAUTH2",
                "KERBEROS",
                "JWT",
                "ALIAS",
                "REMOVE_INCOMING_HTTP_HEADERS"
              ]
            },
            "httpAuthCredentials": {
              "$ref": "#/definitions/Credentials"
            },
            "kerberosCredentials": {
              "$ref": "#/definitions/KerberosCredentials"
            },
            "oauth2Token": {
              "type": "string",
              "description": "Specify a base64 encoded OAuth2 token that is used for authentication"
            }
          }
        }
      ]
    },
    "ISConfigurationAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "contentModelComplianceForWSDL": {
              "type": "string",
              "enum": [
                "Strict",
                "Lax",
                "None"
              ]
            },
            "enableMTOM": {
              "type": "boolean"
            },
            "enforceWSICompliance": {
              "type": "boolean"
            },
            "folderName": {
              "type": "string"
            },
            "importSwaggerBasedOnTags": {
              "type": "boolean"
            },
            "keyAlias": {
              "type": "string",
              "description": "The alias of the private key that is stored in the keystore specified by the keystore alias.\nThe Key alias field contains a list of the available aliases in the selected keystore. If there are no configured keystores, this field is empty"
            },
            "keystoreAlias": {
              "type": "string",
              "description": "The Keystore alias field contains a list of the available keystore aliases in API Gateway. If there are no configured keystore aliases, this field lists the default Integration Server keystore, DEFAULT_IS_KEYSTORE ."
            },
            "packageName": {
              "type": "string"
            },
            "password": {
              "type": "string",
              "description": "A valid password of the Integration Server user identified by the attribute Username"
            },
            "skipCustomScalarTypes": {
              "type": "boolean"
            },
            "url": {
              "type": "string"
            },
            "username": {
              "type": "string",
              "description": "The username of a registered Integration Server user who has the functional privilege to create the service"
            },
            "validateSchemaWithXerces": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "KerberosCredentials": {
      "type": "object",
      "properties": {
        "clientPassword": {
          "type": "string",
          "description": "Specify a base64 encoded password for the client principal"
        },
        "clientPrincipal": {
          "type": "string",
          "description": "a unique identity to which Kerberos can assign tickets"
        },
        "requestDelegateToken": {
          "type": "boolean",
          "description": "Boolean value whether the token needs to be delegated or not"
        },
        "servicePrincipal": {
          "type": "string",
          "description": "a unique identifier of a service instance"
        },
        "servicePrincipalNameForm": {
          "type": "string",
          "description": "the format in which you want to specify the principal name of the service that is registered with the principal database",
          "enum": [
            "hostbased",
            "username"
          ]
        }
      }
    },
    "LocalIntrospectionConfig": {
      "type": "object",
      "properties": {
        "certificateAlias": {
          "type": "string",
          "description": "Select the certificate from the truststore that is used to validate the token."
        },
        "description": {
          "type": "string",
          "description": "Third party issuer description"
        },
        "issuer": {
          "type": "string",
          "description": "Third party issuer name"
        },
        "jwksuri": {
          "type": "string",
          "description": "JSON Web Key URI"
        },
        "trustStoreAlias": {
          "type": "string",
          "description": "The truststore to be used by API Gateway when validating the token issued by the authorization server. Truststore is a repository that holds all the trusted public certificates"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "accessTokenURL": {
          "type": "string",
          "description": "URL to get the access token from the authorization server"
        },
        "authorizeURL": {
          "type": "string",
          "description": "URL to get the approval from the resource owner"
        },
        "refreshTokenURL": {
          "type": "string",
          "description": "URL to get the new access token from the refresh token"
        }
      }
    },
    "OAuth2Endpoint": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Client registration endpoint in the authorization server"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "https": {
          "type": "boolean"
        },
        "keyAlias": {
          "type": "string",
          "description": "The key alias is the private key that is used sign the request sent to the authorization server"
        },
        "keyStoreAlias": {
          "type": "string",
          "description": "Specify the keystore that needs to be used by API Gateway while sending the request to the authorization server. A keystore is a repository of private key and its corresponding public certificate"
        }
      }
    },
    "OAuth2Endpoints": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/OAuth2Endpoint"
          }
        },
        "keyAlias": {
          "type": "string"
        },
        "keyStoreAlias": {
          "type": "string"
        }
      }
    },
    "OpenIDProviderAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "authorizationEndpoint": {
              "type": "string"
            },
            "clientId": {
              "type": "string"
            },
            "clientSecret": {
              "type": "string"
            },
            "includeUserinfoClaims": {
              "type": "boolean"
            },
            "issuer": {
              "type": "string"
            },
            "jwksUri": {
              "type": "string"
            },
            "maxAge": {
              "type": "string"
            },
            "openIDDisplayValue": {
              "type": "string",
              "enum": [
                "none",
                "page",
                "popup",
                "touch",
                "wap"
              ]
            },
            "openIDGrantType": {
              "type": "string",
              "enum": [
                "authorization_code"
              ]
            },
            "openIDResponseType": {
              "type": "string",
              "enum": [
                "code",
                "id_token",
                "token id_token",
                "id_token token"
              ]
            },
            "openIDScopes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "openIDTokenEndpointAuthMode": {
              "type": "string",
              "enum": [
                "client_secret_basic",
                "client_secret_post",
                "none"
              ]
            },
            "prompt": {
              "type": "string",
              "enum": [
                "none",
                "login",
                "consent",
                "select_account"
              ]
            },
            "redirectionEndpointHost": {
              "type": "string"
            },
            "redirectionEndpointPort": {
              "type": "string"
            },
            "tokenEndpoint": {
              "type": "string"
            },
            "trustStoreAlias": {
              "type": "string"
            },
            "uiLocales": {
              "type": "string"
            },
            "userinfoEndpoint": {
              "type": "string"
            }
          }
        }
      ]
    },
    "RemoteISConfig": {
      "type": "object",
      "properties": {
        "acl": {
          "type": "string",
          "description": "ACL that governs which user groups on your server can use this alias for the remote server. Select an ACL from the drop down list. By default, only members of groups governed by the Internal ACL can use this alias."
        },
        "host": {
          "type": "string",
          "description": "Host name or IP address of the remote server for which you are creating an alias"
        },
        "keepAlive": {
          "type": "integer",
          "format": "int32",
          "description": "Sets the default number of client keep alive connections to retain for a given target endpoint. If not specified, five keep alive connections are retained."
        },
        "password": {
          "type": "string",
          "description": "Password of the corresponding user in remote IS authorization server"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "example": 5555,
          "description": "Port number on which the remote server listens for incoming requests from your server"
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the length of time (in minutes) that your server maintains an idle connection to a remote server."
        },
        "useSSL": {
          "type": "boolean",
          "description": "Whether you want your server to connect to the remote server using Secure Sockets Layer (SSL)."
        },
        "username": {
          "type": "string",
          "description": "User name for a user account on the remote server. When you invoke a service using this alias, the remote server uses this user account for authentication and access control."
        }
      }
    },
    "RemoteIntrospectionConfig": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "ClientId of a client in the authorization server"
        },
        "clientSecret": {
          "$ref": "#/definitions/GatewaySecret"
        },
        "introspectionEndpoint": {
          "type": "string",
          "description": "Endpoint of the authorization server to do the introspection"
        },
        "user": {
          "type": "string",
          "description": "A user in the API Gateway under whom the introspection endpoint is invoked"
        }
      }
    },
    "SAMLIssuerAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "appliesTo": {
              "type": "string",
              "description": "Specify the scope for which this security token is required"
            },
            "assertionId": {
              "type": "string"
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint URI of the STS"
            },
            "extendedParameters": {
              "type": "object",
              "description": "Extensions to the <wst:RequestSecurityToken> element for requesting specific types of keys, algorithms, or key and algorithms, as specified by a given policy in the return token(s)",
              "additionalProperties": {
                "type": "string"
              }
            },
            "issuerAuthMode": {
              "type": "string",
              "description": "Mode of communication",
              "enum": [
                "NEW",
                "INCOMING_HTTP_BASIC_AUTH",
                "INCOMING_WSS_USER",
                "INCOMING_X509",
                "DELEGATE_INCOMING",
                "INCOMING_OAUTH_TOKEN",
                "INCOMING_JWT",
                "TRANSPARENT",
                "INCOMING_KERBEROS"
              ]
            },
            "issuerAuthScheme": {
              "type": "string",
              "description": "The authentication type used for communicating to STS",
              "enum": [
                "BASIC_AUTH",
                "WSS_USERNAME",
                "KERBEROS",
                "X509"
              ]
            },
            "issuerCommunicationMode": {
              "type": "string",
              "description": "Mode of communication to the STS",
              "enum": [
                "NORMAL_CLIENT",
                "ACT_AS_DELEGATION"
              ]
            },
            "issuerPolicy": {
              "type": "string",
              "description": "The webMethods Integration Server service name"
            },
            "kerberosCredentials": {
              "$ref": "#/definitions/KerberosCredentials"
            },
            "samlVersion": {
              "type": "string",
              "description": "SAML version to be used for authentication",
              "enum": [
                "SAML1_1",
                "SAML_2_0"
              ]
            },
            "signAndEncryptConfig": {
              "$ref": "#/definitions/SignAndEncryptConfig"
            },
            "wsTrustVersion": {
              "type": "string",
              "description": "WS-Trust version that API Gateway must use to send the RST to the SAML issuer",
              "enum": [
                "WS_TRUST_1_0",
                "WS_TRUST_1_3"
              ]
            },
            "wssCredentials": {
              "$ref": "#/definitions/WssCredentials"
            }
          }
        }
      ]
    },
    "SOAPMessageSecurityAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "authMode": {
              "type": "string",
              "description": "Mode of authentication",
              "enum": [
                "NEW",
                "INCOMING_HTTP_BASIC_AUTH",
                "INCOMING_WSS_USER",
                "INCOMING_X509",
                "DELEGATE_INCOMING",
                "INCOMING_OAUTH_TOKEN",
                "INCOMING_JWT",
                "TRANSPARENT",
                "INCOMING_KERBEROS"
              ]
            },
            "authType": {
              "type": "string",
              "description": "Type of authentication that needs to be used",
              "enum": [
                "WSS_USERNAME",
                "SAML",
                "KERBEROS",
                "ALIAS",
                "REMOVE_WSS_HEADERS",
                "NONE"
              ]
            },
            "kerberosCredentials": {
              "$ref": "#/definitions/KerberosCredentials"
            },
            "samlIssuerConfig": {
              "type": "string",
              "description": "Saml issuer configuration name"
            },
            "signAndEncryptConfig": {
              "$ref": "#/definitions/SignAndEncryptConfig"
            },
            "wssCredentials": {
              "$ref": "#/definitions/WssCredentials"
            }
          }
        }
      ]
    },
    "SSLConfig": {
      "type": "object",
      "properties": {
        "keyAlias": {
          "type": "string",
          "description": "The key alias is the private key that is used sign the request sent to the authorization server"
        },
        "keyStoreAlias": {
          "type": "string",
          "description": "Specify the keystore that needs to be used by API Gateway while sending the request to the authorization server. A keystore is a repository of private key and its corresponding public certificate"
        },
        "trustStoreAlias": {
          "type": "string",
          "description": "The truststore to be used by API Gateway when validating the incoming response from the authorization server. Truststore is a repository that holds all the trusted public certificates"
        }
      }
    },
    "Scope": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the oauth2 scope"
        },
        "name": {
          "type": "string",
          "description": "Name of the oauth2 scope"
        }
      }
    },
    "ServiceRegistryCommunication": {
      "type": "object",
      "properties": {
        "httpMethod": {
          "type": "string",
          "description": "HttpMethod that is used while communicating with the service registry",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "HEAD",
            "PATCH",
            "OPTIONS",
            "TRACE",
            "CUSTOM"
          ]
        },
        "path": {
          "type": "string",
          "description": "Resource path that will be appened with base endpoint while communicating with service registry"
        }
      }
    },
    "ServiceRegistryModel": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "ConnectionTimeout": {
              "type": "integer",
              "format": "int32",
              "description": "The time interval (in seconds) after which a connection attempt times out while communicating with service registry"
            },
            "customHeaders": {
              "type": "object",
              "description": "Custom headers that needs be sent while communicating with the service registry",
              "additionalProperties": {
                "type": "string"
              }
            },
            "deRegistrationInfo": {
              "$ref": "#/definitions/ServiceRegistryCommunication"
            },
            "discoveryInfo": {
              "$ref": "#/definitions/ServiceRegistryCommunication"
            },
            "endpointURI": {
              "type": "string",
              "description": "Endpoint that is used to communicate with the service registry"
            },
            "heartBeatInterval": {
              "type": "integer",
              "format": "int32",
              "description": "APIGateway will ping the service registry on the configured interval for every API"
            },
            "keyAlias": {
              "type": "string",
              "description": "The key alias is the private key that is used for signing when using SSL communication with the Service Registry."
            },
            "keystoreAlias": {
              "type": "string",
              "description": "A keystore is a repository of private key. This keystore contains the private key used for the SSL communication with the Service Registry. For information on how to configure the keystore aliases, refer API Gateway Administration swagger"
            },
            "password": {
              "type": "string",
              "description": "Base64 encoded password that is used in the Basic authentication when communicating with the service registry"
            },
            "readTimeout": {
              "type": "integer",
              "format": "int32",
              "description": "The time interval (in seconds) after which a socket read attempt times out while communicating with service registry"
            },
            "registrationInfo": {
              "$ref": "#/definitions/ServiceRegistryCommunication"
            },
            "serviceRegistryType": {
              "type": "string",
              "description": "It contains the information about the type of service registry",
              "enum": [
                "SERVICE_CONSUL",
                "EUREKA"
              ]
            },
            "trustStoreAlias": {
              "type": "string",
              "description": "A truststore is a repository of public keys. This truststore contains the public key of the Service Registry used for the SSL communication with the Service Registry. For information on how to configure the truststore aliases, refer API Gateway Administration swagger"
            },
            "username": {
              "type": "string",
              "description": "Username that is used in the Basic authentication when communicating with the service registry"
            }
          }
        }
      ]
    },
    "SignAndEncryptConfig": {
      "type": "object",
      "properties": {
        "certificateAlias": {
          "type": "string",
          "description": "Select the certificate from the truststore that is used to validate the request that is sent to the native API."
        },
        "keyAlias": {
          "type": "string",
          "description": "The key alias is the private key that is used sign the request sent to the native API"
        },
        "keyStoreAlias": {
          "type": "string",
          "description": "Specify the keystore that needs to be used by API Gateway while sending the request to the native API. A keystore is a repository of private key and its corresponding public certificate"
        },
        "truststoreAlias": {
          "type": "string",
          "description": "The truststore to be used by API Gateway when sending the request to the native API. Truststore is a repository that holds all the trusted public certificates"
        }
      }
    },
    "SimpleAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "value of the simple alias"
            }
          }
        }
      ]
    },
    "ThirdPartyOAuth2Alias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "authInfo": {
              "$ref": "#/definitions/AuthInfo"
            },
            "endpointDetails": {
              "$ref": "#/definitions/OAuth2Endpoints"
            },
            "metadata": {
              "$ref": "#/definitions/Metadata"
            },
            "providerName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TokenGeneratorConfig": {
      "type": "object",
      "properties": {
        "accessTokenExpInterval": {
          "type": "integer",
          "format": "int32",
          "description": "Expiry interval in seconds for the generated access token "
        },
        "algorithm": {
          "type": "string",
          "description": "Type of algorithm that needs to be used for signing the JWT",
          "enum": [
            "RS256",
            "RS384",
            "RS512"
          ]
        },
        "audience": {
          "type": "string",
          "description": "Default audience value that needs to be added in the generated JWT"
        },
        "authCodeExpInterval": {
          "type": "integer",
          "format": "int32",
          "description": "Expiry interval in seconds for the generated authorization code in Authorization code grant type"
        },
        "enforcePKCE": {
          "type": "boolean",
          "description": "Global option to apply PKCE security, for the public clients using authorization code grant type. Applicable only for local auth server"
        },
        "expiry": {
          "type": "integer",
          "format": "int64",
          "description": "Expiry interval of the JWT in minutes"
        }
      }
    },
    "TransformationAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "content of the file"
            },
            "fileName": {
              "type": "string",
              "description": "the name of the file"
            }
          }
        }
      ]
    },
    "WebmethodsAlias": {
      "allOf": [
        {
          "$ref": "#/definitions/Alias"
        },
        {
          "type": "object",
          "properties": {
            "complyToISSpec": {
              "type": "boolean",
              "description": "A boolean value wheather the given service complies to the IS sepcification"
            },
            "runAsUser": {
              "type": "string",
              "description": "User in gateway under whom you want to invoke this service"
            },
            "serviceName": {
              "type": "string",
              "description": "the webMethods Integration Server service name"
            }
          }
        }
      ]
    },
    "WssCredentials": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "Specify a base64 encoded password for the username"
        },
        "passwordType": {
          "type": "string",
          "description": "type of password",
          "enum": [
            "NONE",
            "TEXT",
            "DIGEST"
          ]
        },
        "userName": {
          "type": "string",
          "description": "a username used to generate the WSS username token"
        }
      }
    }
  }
}
