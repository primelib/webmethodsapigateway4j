// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * AdminRule
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("AdminRule")
@JsonPropertyOrder({
    "active",
    "attributeContexts",
    "description",
    "id",
    "name",
    "owner",
    "ruleExpressions",
    "ruleLogicalOperator",
    "ruleType"
})
@Generated(value = "io.github.primelib.primecodegen")
public class AdminRule {

    /**
     * This rule is active
     */
    @JsonProperty("active")
    protected Boolean active;

    /**
     * Context(s) of the attribute used in rule expression
     */
    @JsonProperty("attributeContexts")
    protected List<String> attributeContexts;

    /**
     * Rule Description
     */
    @JsonProperty("description")
    protected String description;

    /**
     * A unique ID for the rule
     */
    @JsonProperty("id")
    protected String id;

    /**
     * Rule name
     */
    @JsonProperty("name")
    protected String name;

    /**
     * Owner of this rule asset
     */
    @JsonProperty("owner")
    protected String owner;

    /**
     * Rule condition is defined using ruleExpressions
     */
    @JsonProperty("ruleExpressions")
    protected List<AdminRuleExpression> ruleExpressions;

    /**
     * Logical operator (AND / OR) that should be used to evaluate Rule expression
     */
    @JsonProperty("ruleLogicalOperator")
    protected String ruleLogicalOperator;

    /**
     * Type of the rule
     */
    @JsonProperty("ruleType")
    protected String ruleType;

    /**
     * Constructs a validated instance of {@link AdminRule}.
     *
     * @param spec the specification to process
     */
    public AdminRule(Consumer<AdminRule> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link AdminRule}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #AdminRule(Consumer)} instead.
     * @param active This rule is active
     * @param attributeContexts Context(s) of the attribute used in rule expression
     * @param description Rule Description
     * @param id A unique ID for the rule
     * @param name Rule name
     * @param owner Owner of this rule asset
     * @param ruleExpressions Rule condition is defined using ruleExpressions
     * @param ruleLogicalOperator Logical operator (AND / OR) that should be used to evaluate Rule expression
     * @param ruleType Type of the rule
     */
    @ApiStatus.Internal
    public AdminRule(Boolean active, List<String> attributeContexts, String description, String id, String name, String owner, List<AdminRuleExpression> ruleExpressions, String ruleLogicalOperator, String ruleType) {
        this.active = active;
        this.attributeContexts = attributeContexts;
        this.description = description;
        this.id = id;
        this.name = name;
        this.owner = owner;
        this.ruleExpressions = ruleExpressions;
        this.ruleLogicalOperator = ruleLogicalOperator;
        this.ruleType = ruleType;
    }
}
