// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.operations;

import io.github.primelib.webmethodsapigateway4j.models.SearchSearchContext;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * SearchByType
 * <p>
 * The search API allows you to execute a search query in API Gateway and get back search results that match the query. You can perform search across different objects such as API, Application, Alias, Assertions, Policies, Administrator Settings, Policy Action, Packages, Plans, Subscriptions, Users, User Groups, Transactional events, Lifecycle events, Policy violation events, Monitor events, Error events, Threat protection events, Performance metrics and Audit logs. Following are the type of searches that does not require scope or fields. 
 *  1. Users - This type is used to get the list of users from IS. 
 *  2. User Groups - This type is used to get the list of user groups from IS. 
 * 
 *  Following are the type of searches for which you can specify the  scope and fields. 
 *  1. API - This type is used to search the APIs in API Gateway. 
 *  2. Application - This type is used to search the Applications created in API Gateway. 
 *  3. Alias - This type is used to search aliases created in API Gateway. 
 *  4. Assertions - This type is used to search custom assertions created in API Gateway. 
 *  5. Policy - This type is used to search policies in API Gateway. 
 *  6. Policy Action - This type is used to search policy actions in API Gateway. 
 *  7. Package - This type is used to search packages in API Gateway. 
 *  8. Plan - This type is used to search plans in API Gateway. 
 *  9. Administrator Setting - This type is used to search the administrator settings in API Gateway. 
 *  10. Subscription - This type is used to search subscriptions in API Gateway. 
 *  11. Transactional events - This type is used to search transactional events generated in API Gateway. 
 *  12. Lifecycle events - This type is used to search lifecycle events in API Gateway.  
 *  13. Policy violation events - This type is used to search policy violation events generated in API Gateway. 
 *  14. Monitor events - This type is used to search monitor events generated in API Gateway. 
 *  15. Error events - This type is used to search error events generated in API Gateway. 
 *  16. Threat protection events - This type is used to search threat protection events generated in API Gateway. 
 *  17. Performance metrics - This type is used to search performance metrics generated in API Gateway.
 *  18. Audit log events - This type is used to search audit logs events generated in API Gateway.
 *  
 *  For the above eighteen types, if a scope is specified, then the scope is applicable for all types regardless whether it is applicable for that or not. Also if the required fields are specified and it is not available in any other types, then the search result corresponds to that type does not have the fields. 
 *  If from and size are specified then it skips first n records specified in from for all types and it fetches the number of records specified in size.
 * 
 * 
 * examples:
 * 
 * 1. Fetch All APIs contains run as substring
 * 
 * Payload : { "types" : ["api"], "scope":[ { "attributeName" : "apiName", "keyword" : ".*run.*" }] }
 * 
 * The above payload will fetch all APIs contains run as substring in API name. The response will contains APIs with some fields populated with default values. 
 * 
 * 2. Fetch All APIs contains run as substring and specific set of fields in the response
 * 
 * Payload : { "types" : ["api"], "scope":[ { "attributeName" : "apiName", "keyword" : ".*run.*" }], "responseFields" : ["apiName", "type", "isActive", "systemVersion", "policies","publishedPortals","apiVersion","id"]}
 * 
 * To fetch all fields, user can use "*" in responseFields. It will fetch all the fields in the response.
 * 
 * Payload : { "types" : ["api"], "scope":[ { "attributeName" : "apiName", "keyword" : ".*run.*" }], "responseFields" : ["*"]}
 * 
 * 
 * The above payload will fetch all APIs contains run as substring in API name and corresponding fields mentioned in responseFields section.
 * 
 * The responseFields can be identified from schema definition using below table for some of the main used types
 * 
 * Asset type: API ,Swagger file: APIGatewayServiceManagement.json ,Definition: #/definitions/GatewayAPI
 * Asset type: POLICY ,Swagger file: APIGatewayPolicyManagement.json ,Definition: #/definitions/Policy
 * Asset type: POLICY_ACTION ,Swagger file: APIGatewayPolicyManagement.json ,Definition: #/definitions/PolicyAction
 * Asset type: ALIAS ,Swagger file: APIGatewayAlias.json  ,Definition: #/definitions/Alias
 * Asset type: APPLICATION ,Swagger file:APIGatewayApplication.json ,Definition: #/definitions/Application
 * Asset type: USERS ,Swagger file: APIGatewayUserManagementSwagger.json ,Definition: #/definitions/User
 * Asset type: GROUPS ,Swagger file: APIGatewayUserManagementSwagger.json ,Definition: #/definitions/Group
 * Asset type: ACCESSPROFILES ,Swagger file: APIGatewayUserManagementSwagger.json ,Definition: #/definitions/AccessProfile
 * Asset type: API_DOCUMENT ,Swagger file: APIGatewayDocumentManagement.json ,Definition: #/definitions/Document
 * Asset type: KEYSTORE ,Swagger file: APIGatewayAdministration.json ,Definition: #/definitions/KeyStore
 * Asset type: TRUSTSTORE ,Swagger file: APIGatewayAdministration.json ,Definition: #/definitions/TrustStore
 * 
 * For other types user can use "*" in responseFields section to get all the fields.
 * 
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class SearchByTypeOperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * Search Parameters to search for specific set of results on specified types
     *
     */
    @NonNull
    private SearchSearchContext payload;

    /**
     * Constructs a validated instance of {@link SearchByTypeOperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public SearchByTypeOperationSpec(Consumer<SearchByTypeOperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
