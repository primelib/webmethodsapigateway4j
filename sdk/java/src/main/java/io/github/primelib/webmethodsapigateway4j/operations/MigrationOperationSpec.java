// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.operations;

import io.github.primelib.webmethodsapigateway4j.models.AdminMigrationConfig;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * Migration
 * <p>
 * Triggers a migration action and immediately returns with 202 status code. Clean action clears the data from the API Gateway data store, reindex action reindex the data from the source Elasticsearch to API Gateway data store and transform action transforms the reindexed assets in the API Gateway data store to be compatible with the current API Gateway version. The clean action should be invoked on target API Gateway server prior to invoking reindex API for core indices. The current status of the action can be retrieved using /migration/status API. A webhook event with the migration status also would be sent to the subscribed webhook clients
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class MigrationOperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * payload
     *
     */
    @NonNull
    private AdminMigrationConfig payload;

    /**
     * Constructs a validated instance of {@link MigrationOperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public MigrationOperationSpec(Consumer<MigrationOperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
