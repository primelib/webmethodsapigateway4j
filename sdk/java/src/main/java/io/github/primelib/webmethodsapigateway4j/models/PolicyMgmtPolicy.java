// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * PolicyMgmtPolicy
 * <p>
 * A policy is nothing but a group of policy (runtime) enforcements. It contains the list of policy enforcement ids by stage wise. A stage in a policy belongs execution order of a policy enforcement. Each policy enforcement belong to only one of the stage. For more details about policy stage please refer policyStages resource in API Gateway Policy Management service. The policy can be Service/scope/package/global/template.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("PolicyMgmtPolicy")
@JsonPropertyOrder({
    "active",
    "descriptions",
    "global",
    "id",
    "names",
    "parameters",
    "policyEnforcements",
    "policyScope",
    "scope",
    "systemPolicy"
})
@Generated(value = "io.github.primelib.primecodegen")
public class PolicyMgmtPolicy {

    @JsonProperty("active")
    protected Boolean active;

    /**
     * This contains list of description for the policy  with corresponding locale information.
     */
    @JsonProperty("descriptions")
    protected List<PolicyMgmtInternationalizedString> descriptions;

    @JsonProperty("global")
    protected Boolean global;

    /**
     * Policy ID
     */
    @JsonProperty("id")
    protected String id;

    /**
     * This contains list of names for the policy with corresponding locale information.
     */
    @JsonProperty("names")
    protected List<PolicyMgmtInternationalizedString> names;

    /**
     * This basic details of a threat protection rule such as rule name, description, rule action, custom error message etc.will be stored in this property.
     */
    @JsonProperty("parameters")
    protected List<PolicyMgmtPolicyActionParameter> parameters;

    /**
     * This property contains list of policy (runtime) enforcement id grouped based on the stages.
     */
    @JsonProperty("policyEnforcements")
    protected List<PolicyMgmtPolicyEnforcements> policyEnforcements;

    /**
     * Policy Scope of the conflicting policy.
     */
    @JsonProperty("policyScope")
    protected String policyScope;

    /**
     * A scope is used to define the filtering criteria for Global policy. Using scope we can specify the APIs or Resources or opertaion on which the policy enforcements needs to be applied.
     */
    @JsonProperty("scope")
    protected PolicyMgmtScope scope;

    @JsonProperty("systemPolicy")
    protected Boolean systemPolicy;

    /**
     * Constructs a validated instance of {@link PolicyMgmtPolicy}.
     *
     * @param spec the specification to process
     */
    public PolicyMgmtPolicy(Consumer<PolicyMgmtPolicy> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link PolicyMgmtPolicy}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #PolicyMgmtPolicy(Consumer)} instead.
     * @param active active
     * @param descriptions This contains list of description for the policy  with corresponding locale information.
     * @param global global
     * @param id Policy ID
     * @param names This contains list of names for the policy with corresponding locale information.
     * @param parameters This basic details of a threat protection rule such as rule name, description, rule action, custom error message etc.will be stored in this property.
     * @param policyEnforcements This property contains list of policy (runtime) enforcement id grouped based on the stages.
     * @param policyScope Policy Scope of the conflicting policy.
     * @param scope A scope is used to define the filtering criteria for Global policy. Using scope we can specify the APIs or Resources or opertaion on which the policy enforcements needs to be applied.
     * @param systemPolicy systemPolicy
     */
    @ApiStatus.Internal
    public PolicyMgmtPolicy(Boolean active, List<PolicyMgmtInternationalizedString> descriptions, Boolean global, String id, List<PolicyMgmtInternationalizedString> names, List<PolicyMgmtPolicyActionParameter> parameters, List<PolicyMgmtPolicyEnforcements> policyEnforcements, String policyScope, PolicyMgmtScope scope, Boolean systemPolicy) {
        this.active = active;
        this.descriptions = descriptions;
        this.global = global;
        this.id = id;
        this.names = names;
        this.parameters = parameters;
        this.policyEnforcements = policyEnforcements;
        this.policyScope = policyScope;
        this.scope = scope;
        this.systemPolicy = systemPolicy;
    }
}
