// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.operations;

import io.github.primelib.webmethodsapigateway4j.models.MonetizationPackage;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * UpdatePackageByPackageId
 * <p>
 * This endpoint is used to update the package metadata and  associate or remove APIs and plans. The package can be active while editing any details of the package. If an API is added to an active package then subscribers can start consuming the API with existing key. Similarly if the API is removed, subscribers wont be able to use the removed APIs. Removal of plan is allowed only if the plan does not have any subscribers. You need to republish the package to portal to make the updated changes available in portal.
 *  Please use /package/{packageId}/active or /package/{packageId}/deactivate to activate or deactivate as this endpoint cannot be used to activate or deactivate package.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class UpdatePackageByPackageIdOperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * package id to which the update requests is sent
     *
     */
    @NonNull
    private String packageId;

    /**
     * payload
     *
     */
    @NonNull
    private MonetizationPackage payload;

    /**
     * Constructs a validated instance of {@link UpdatePackageByPackageIdOperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public UpdatePackageByPackageIdOperationSpec(Consumer<UpdatePackageByPackageIdOperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(packageId, "packageId is a required parameter!");
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
