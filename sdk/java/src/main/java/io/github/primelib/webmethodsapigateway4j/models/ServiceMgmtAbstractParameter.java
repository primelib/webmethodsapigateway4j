// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * ServiceMgmtAbstractParameter
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("ServiceMgmtAbstractParameter")
@JsonPropertyOrder({
    "allowEmptyValue",
    "description",
    "getref",
    "in",
    "name",
    "required",
    "vendorExtensions"
})
@Generated(value = "io.github.primelib.primecodegen")
public class ServiceMgmtAbstractParameter {

    /**
     * Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value
     */
    @JsonProperty("allowEmptyValue")
    protected Boolean allowEmptyValue;

    /**
     * A brief description of the parameter. This could contain examples of use
     */
    @JsonProperty("description")
    protected String description;

    /**
     * The available paths and operations for the API
     */
    @JsonProperty("get$ref")
    protected String getref;

    /**
     * The location of the parameter. Possible values are "query", "header", "path" or "cookie"
     */
    @JsonProperty("in")
    protected String in;

    /**
     * The name of the parameter. Parameter names are case sensitive
     */
    @JsonProperty("name")
    protected String name;

    /**
     * Determines whether this parameter is mandatory. If the parameter location is "path", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false
     */
    @JsonProperty("required")
    protected Boolean required;

    @JsonProperty("vendorExtensions")
    protected Map<String, Object> vendorExtensions;

    /**
     * Constructs a validated instance of {@link ServiceMgmtAbstractParameter}.
     *
     * @param spec the specification to process
     */
    public ServiceMgmtAbstractParameter(Consumer<ServiceMgmtAbstractParameter> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link ServiceMgmtAbstractParameter}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #ServiceMgmtAbstractParameter(Consumer)} instead.
     * @param allowEmptyValue Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value
     * @param description A brief description of the parameter. This could contain examples of use
     * @param getref The available paths and operations for the API
     * @param in The location of the parameter. Possible values are "query", "header", "path" or "cookie"
     * @param name The name of the parameter. Parameter names are case sensitive
     * @param required Determines whether this parameter is mandatory. If the parameter location is "path", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false
     * @param vendorExtensions vendorExtensions
     */
    @ApiStatus.Internal
    public ServiceMgmtAbstractParameter(Boolean allowEmptyValue, String description, String getref, String in, String name, Boolean required, Map<String, Object> vendorExtensions) {
        this.allowEmptyValue = allowEmptyValue;
        this.description = description;
        this.getref = getref;
        this.in = in;
        this.name = name;
        this.required = required;
        this.vendorExtensions = vendorExtensions;
    }
}
