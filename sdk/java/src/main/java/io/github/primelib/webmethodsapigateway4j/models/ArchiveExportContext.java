// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * ArchiveExportContext
 * <p>
 * This defines the request structure to export the specific assets across API Gateway
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("ArchiveExportContext")
@JsonPropertyOrder({
    "aggregations",
    "condition",
    "deploymentFilter",
    "from",
    "includeOptions",
    "responseFields",
    "scope",
    "size",
    "sortByField",
    "sortOrder",
    "teamFilter",
    "types"
})
@Generated(value = "io.github.primelib.primecodegen")
public class ArchiveExportContext {

    @JsonProperty("aggregations")
    protected List<ArchiveIaggregation> aggregations;

    /**
     * Condition between scope specified. The value can be either 'and' or 'or'
     */
    @JsonProperty("condition")
    protected String condition;

    /**
     * This filter is used for deployment types.
     */
    @JsonProperty("deploymentFilter")
    protected String deploymentFilter;

    /**
     * The starting index of the record to be fetched. Default value is 0 which fetches from the start. The index is applied to each type separately. For each type the first n records are skipped as specified in from field. If the value specified is less than zero then the default value is taken for fetching records
     */
    @JsonProperty("from")
    protected Integer from;

    /**
     * It is used to specify the inclusion of dependent assets
     */
    @JsonProperty("includeOptions")
    protected ArchiveIncludeOptions includeOptions;

    /**
     * List of fields to be fetched for the specified types.
     */
    @JsonProperty("responseFields")
    protected List<String> responseFields;

    @JsonProperty("scope")
    protected List<ArchiveSearchField> scope;

    /**
     * Number of records to be fetched. Default value is -1, which fetches all the records. The size is applied to each type separately. Each type has the records less than or equal to the size specified. If the value specified is less than zero then the default value is taken for fetching records
     */
    @JsonProperty("size")
    protected Integer size;

    /**
     * Field name on which the sorting needs to be applied.
     */
    @JsonProperty("sortByField")
    protected String sortByField;

    /**
     * Sort order for the records
     */
    @JsonProperty("sortOrder")
    protected String sortOrder;

    /**
     * This filter is used to specify list teams to apply on the search results.
     */
    @JsonProperty("teamFilter")
    protected List<String> teamFilter;

    /**
     * List of allowed types that can be searched across API Gateway.
     */
    @JsonProperty("types")
    protected List<String> types;

    /**
     * Constructs a validated instance of {@link ArchiveExportContext}.
     *
     * @param spec the specification to process
     */
    public ArchiveExportContext(Consumer<ArchiveExportContext> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link ArchiveExportContext}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #ArchiveExportContext(Consumer)} instead.
     * @param aggregations aggregations
     * @param condition Condition between scope specified. The value can be either 'and' or 'or'
     * @param deploymentFilter This filter is used for deployment types.
     * @param from The starting index of the record to be fetched. Default value is 0 which fetches from the start. The index is applied to each type separately. For each type the first n records are skipped as specified in from field. If the value specified is less than zero then the default value is taken for fetching records
     * @param includeOptions It is used to specify the inclusion of dependent assets
     * @param responseFields List of fields to be fetched for the specified types.
     * @param scope scope
     * @param size Number of records to be fetched. Default value is -1, which fetches all the records. The size is applied to each type separately. Each type has the records less than or equal to the size specified. If the value specified is less than zero then the default value is taken for fetching records
     * @param sortByField Field name on which the sorting needs to be applied.
     * @param sortOrder Sort order for the records
     * @param teamFilter This filter is used to specify list teams to apply on the search results.
     * @param types List of allowed types that can be searched across API Gateway.
     */
    @ApiStatus.Internal
    public ArchiveExportContext(List<ArchiveIaggregation> aggregations, String condition, String deploymentFilter, Integer from, ArchiveIncludeOptions includeOptions, List<String> responseFields, List<ArchiveSearchField> scope, Integer size, String sortByField, String sortOrder, List<String> teamFilter, List<String> types) {
        this.aggregations = aggregations;
        this.condition = condition;
        this.deploymentFilter = deploymentFilter;
        this.from = from;
        this.includeOptions = includeOptions;
        this.responseFields = responseFields;
        this.scope = scope;
        this.size = size;
        this.sortByField = sortByField;
        this.sortOrder = sortOrder;
        this.teamFilter = teamFilter;
        this.types = types;
    }
}
