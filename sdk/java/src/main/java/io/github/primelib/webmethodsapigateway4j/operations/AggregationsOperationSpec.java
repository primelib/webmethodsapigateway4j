// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.operations;

import io.github.primelib.webmethodsapigateway4j.models.SearchSearchContext;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * Aggregations
 * <p>
 * This REST call is intent to get the aggregation results for the specified scope and types. Supported aggregations are grouping, metrics and timeseries. 
 * Grouping aggregation is used to find the count based on grouping of certain fields. 
 * Metrics aggregation is used to find the average, minimum, maximum and sum of a field. 
 * Timeseries aggregation is used to find the interval based and allowed intervals are second, minute, hour, day, week, month, quarter and year. In addition to the /search payload, aggregations fields like 'name', 'type' and 'fields'. Except types, scope, condition and aggregations other attributes are not considered during the REST API call.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class AggregationsOperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * Search Parameters to search for specific set of results on specified types
     *
     */
    @NonNull
    private SearchSearchContext payload;

    /**
     * Constructs a validated instance of {@link AggregationsOperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public AggregationsOperationSpec(Consumer<AggregationsOperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
