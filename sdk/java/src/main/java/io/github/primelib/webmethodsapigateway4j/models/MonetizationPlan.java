// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * MonetizationPlan
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("MonetizationPlan")
@JsonPropertyOrder({
    "license",
    "terms",
    "cost",
    "creationDate",
    "customFields",
    "description",
    "icon",
    "id",
    "modifiedDate",
    "name",
    "policies",
    "protectedProp",
    "quota",
    "tags",
    "version"
})
@Generated(value = "io.github.primelib.primecodegen")
public class MonetizationPlan {

    /**
     * License of the plan
     */
    @JsonProperty("License")
    protected String license;

    /**
     * Terms of the plan usage as descriptive string
     */
    @JsonProperty("Terms")
    protected String terms;

    /**
     * Cost details of a plan. It will be used for user information only and wont be enforced.
     */
    @JsonProperty("cost")
    protected MonetizationCost cost;

    /**
     * The creation date of plan in milli seconds
     */
    @JsonProperty("creationDate")
    protected Long creationDate;

    /**
     * Custom fields to be added.
     */
    @JsonProperty("customFields")
    protected Map<String, String> customFields;

    /**
     * Description of the plan
     */
    @JsonProperty("description")
    protected String description;

    /**
     * An inline base64 encoded string representation of icon to be used in plan
     */
    @JsonProperty("icon")
    protected String icon;

    /**
     * Id of the plan. It will be autogenerated for the plan on creation
     */
    @JsonProperty("id")
    protected String id;

    /**
     * The modified date of plan in milli seconds. This will be updated for plan on update.
     */
    @JsonProperty("modifiedDate")
    protected Long modifiedDate;

    /**
     * Name of the plan
     */
    @JsonProperty("name")
    protected String name;

    /**
     * Policy that holds the rate limit throttling policy actions. It will created automatically. It can contain zero or more throttling policy action as rate limit policy
     */
    @JsonProperty("policies")
    protected List<String> policies;

    @JsonProperty("protected")
    protected Boolean protectedProp;

    @JsonProperty("quota")
    protected MonetizationQuota quota;

    /**
     * List of tags of the plan
     */
    @JsonProperty("tags")
    protected List<String> tags;

    /**
     * Version of the plan
     */
    @JsonProperty("version")
    protected String version;

    /**
     * Constructs a validated instance of {@link MonetizationPlan}.
     *
     * @param spec the specification to process
     */
    public MonetizationPlan(Consumer<MonetizationPlan> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link MonetizationPlan}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #MonetizationPlan(Consumer)} instead.
     * @param license License of the plan
     * @param terms Terms of the plan usage as descriptive string
     * @param cost Cost details of a plan. It will be used for user information only and wont be enforced.
     * @param creationDate The creation date of plan in milli seconds
     * @param customFields Custom fields to be added.
     * @param description Description of the plan
     * @param icon An inline base64 encoded string representation of icon to be used in plan
     * @param id Id of the plan. It will be autogenerated for the plan on creation
     * @param modifiedDate The modified date of plan in milli seconds. This will be updated for plan on update.
     * @param name Name of the plan
     * @param policies Policy that holds the rate limit throttling policy actions. It will created automatically. It can contain zero or more throttling policy action as rate limit policy
     * @param protectedProp protectedProp
     * @param quota quota
     * @param tags List of tags of the plan
     * @param version Version of the plan
     */
    @ApiStatus.Internal
    public MonetizationPlan(String license, String terms, MonetizationCost cost, Long creationDate, Map<String, String> customFields, String description, String icon, String id, Long modifiedDate, String name, List<String> policies, Boolean protectedProp, MonetizationQuota quota, List<String> tags, String version) {
        this.license = license;
        this.terms = terms;
        this.cost = cost;
        this.creationDate = creationDate;
        this.customFields = customFields;
        this.description = description;
        this.icon = icon;
        this.id = id;
        this.modifiedDate = modifiedDate;
        this.name = name;
        this.policies = policies;
        this.protectedProp = protectedProp;
        this.quota = quota;
        this.tags = tags;
        this.version = version;
    }
}
