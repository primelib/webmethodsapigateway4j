// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.operations;

import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * GetCacheDetailsByAPINameAndVersion
 * <p>
 * You can enable API caching in API Gateway to cache your native service's response. With caching, you can reduce the number of calls made to your endpoint and also improve the latency of the requests to your API. When you enable caching for a stage, API Gateway caches responses from your endpoint for a specified time to live period. API Gateway then responds to the request by looking up the endpoint response from the cache instead of making a request to your endpoint. 
 * 
 * Service Result cache can be configured for a API or Resource/method or Operation. 
 * 
 * This REST Request is used to get the Service Result cache size for an API using apiName and apiVersion.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class GetCacheDetailsByAPINameAndVersionOperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * This query parameter is used to specify the API name for which the service result cache element size needs to be fetched.
     *
     */
    @NonNull
    private String apiName;

    /**
     * The version of the apiName parameter specified
     *
     */
    @NonNull
    private String apiVersion;

    /**
     * Constructs a validated instance of {@link GetCacheDetailsByAPINameAndVersionOperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public GetCacheDetailsByAPINameAndVersionOperationSpec(Consumer<GetCacheDetailsByAPINameAndVersionOperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(apiName, "apiName is a required parameter!");
        Objects.requireNonNull(apiVersion, "apiVersion is a required parameter!");
    }
}
