// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * AdminLogConfiguration
 * <p>
 * This contains log settings of various components used by APIGateway.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("AdminLogConfiguration")
@JsonPropertyOrder({
    "apigatewayLogger",
    "elasticSearchLogger",
    "enableSecurityLogger",
    "enableSessionLogger",
    "kibanaLogger",
    "sagOsgiLogger"
})
@Generated(value = "io.github.primelib.primecodegen")
public class AdminLogConfiguration {

    /**
     * The log setting of APIGateway server.Possible values are off,trace,debug,info,warn,error and fatal
     */
    @JsonProperty("apigatewayLogger")
    protected String apigatewayLogger;

    /**
     * The log setting of Internal Data Store.Possible values are off,info,debug,warn,error and fatal
     */
    @JsonProperty("elasticSearchLogger")
    protected String elasticSearchLogger;

    /**
     * The log setting to enable APIGateway security logs.Possible values are true and false.
     */
    @JsonProperty("enableSecurityLogger")
    protected String enableSecurityLogger;

    /**
     * The log setting enable APIGateway session logs.Possible values are off,trace,debug,info,warn,error and fatal
     */
    @JsonProperty("enableSessionLogger")
    protected String enableSessionLogger;

    /**
     * The log setting of APIGateway dashboard.Possible values are silent,quiet and verbose
     */
    @JsonProperty("kibanaLogger")
    protected String kibanaLogger;

    /**
     * The log setting of OSGI platform.Possible values are true and false.
     */
    @JsonProperty("sagOsgiLogger")
    protected String sagOsgiLogger;

    /**
     * Constructs a validated instance of {@link AdminLogConfiguration}.
     *
     * @param spec the specification to process
     */
    public AdminLogConfiguration(Consumer<AdminLogConfiguration> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link AdminLogConfiguration}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #AdminLogConfiguration(Consumer)} instead.
     * @param apigatewayLogger The log setting of APIGateway server.Possible values are off,trace,debug,info,warn,error and fatal
     * @param elasticSearchLogger The log setting of Internal Data Store.Possible values are off,info,debug,warn,error and fatal
     * @param enableSecurityLogger The log setting to enable APIGateway security logs.Possible values are true and false.
     * @param enableSessionLogger The log setting enable APIGateway session logs.Possible values are off,trace,debug,info,warn,error and fatal
     * @param kibanaLogger The log setting of APIGateway dashboard.Possible values are silent,quiet and verbose
     * @param sagOsgiLogger The log setting of OSGI platform.Possible values are true and false.
     */
    @ApiStatus.Internal
    public AdminLogConfiguration(String apigatewayLogger, String elasticSearchLogger, String enableSecurityLogger, String enableSessionLogger, String kibanaLogger, String sagOsgiLogger) {
        this.apigatewayLogger = apigatewayLogger;
        this.elasticSearchLogger = elasticSearchLogger;
        this.enableSecurityLogger = enableSecurityLogger;
        this.enableSessionLogger = enableSessionLogger;
        this.kibanaLogger = kibanaLogger;
        this.sagOsgiLogger = sagOsgiLogger;
    }
}
