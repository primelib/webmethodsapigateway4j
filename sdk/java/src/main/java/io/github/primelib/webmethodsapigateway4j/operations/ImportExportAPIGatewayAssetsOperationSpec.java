// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.operations;

import io.github.primelib.webmethodsapigateway4j.models.ImportExportAPIGatewayAssetsB;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

/**
 * ImportExportAPIGatewayAssets
 * <p>
 * This method can be used for importing the API Gateway archive as well as exporting the assets as an archive. If the request is made with x-HTTP-Method-Override HTTP header with value as GET, then this method will export asset. It will require the body param using which you can specify the filtering criteria and include options for the API Gateway assets that need to be exported. 
 * 
 *  If the HTTP header is not specified, then this method can be used to import the API Gateway archive. You can control the import settings with overwrite and preserveAssetState query parameters.
 * 
 *  Here are some sample payloads for different export scenarios. 
 * 
 *  1. Export all API Gateway assets. 
 *  Payload: {} 
 * 
 *  2. Export all APIs 
 *  Payload: { "types": ["api"] } 
 * 
 *  3. Export all APIs with registered Application 
 *  Payload: {
 * "types" : ["api"],
 * "includeOptions" :{
 * "includeApplications" :false
 * }
 * } 
 * 
 *  4. Export only APIs with name contains "API Gateway" 
 *  Payload: {
 * "types" : ["api"],
 * "scope" : [
 * {"attributeName" : "apiName",
 * "keyword" : ".*API Gateway.*"
 * }],
 * "includeOptions" :{
 * "includeApplications" :false
 * }
 * } 
 * 
 *  5. Export API with specific ids only 
 *  Payload: {
 * "types" : ["api"],
 * "scope" : [
 * {"attributeName" : "id",
 * "keyword" : "1c36033a-ecb6-41ce-ad66-bada5cebe85e|8d505388-5524-4df5-bd3c-62c4bb5f41d0"
 * }],
 * "includeOptions" :{
 * "includeApplications" :true
 * }
 * } 
 * 
 *  6. Export API with name starts with API Gateway and description contains search 
 *  Payload: {
 * "types" : ["api"],
 * "scope" : [
 * {"attributeName" : "apiName",
 * "keyword" : "API Gateway.*"
 * },
 * {
 * "attributeName" : "apiDescription",
 * "keyword" : ".*search.*"
 * }],
 * "condition" : "and",
 * "includeOptions" :{
 * "includeApplications" :false
 * }
 * } 
 * 
 *  7. Export all Policy 
 *  Payload: {
 * "types" : ["policy"]
 * } 
 * 
 *  8. Global Policy Alone 
 *  Payload: {
 * "types" : ["policy"],
 * "scope":[
 * {
 * "attributeName" : "policyScope",
 * "keyword" : "GLOBAL"
 * }]
 * } 
 * 
 *  9. Export Threat Protection Rule 
 *  Payload: {
 * "types" : ["policy"],
 * "scope":[
 * {
 * "attributeName" : "policyEnforcements.stageKey",
 * "keyword" : "threatProtection"
 * }]
 * } 
 * 
 *  10. Export All Policy Actions 
 *  Payload: {
 * "types" : ["policy_action"]
 * } 
 * 
 *  11. Export All Threat Protection rules and policy 
 *  Payload: {
 * "types" : ["policy_action", "policy"],
 * "scope":[
 * {
 * "attributeName" : "policyEnforcements.stageKey",
 * "keyword" : "threatProtection"
 * }, {
 * "attributeName" : "id",
 * "keyword" : "globalipdos|ipdos"
 * }],
 * "condition" : "or"
 * } 
 * 
 *  12. Export all aliases 
 *  Payload: {
 * "types" : ["alias"]
 * } 
 * 
 *  13. Export all applications 
 *  Payload: {
 * "types" : ["application"]
 * } 
 * 
 *  14. Export all application with out including associated APIs 
 *  Payload: {
 * "types" : ["application"],
 * "includeOptions" : {
 * "includeApis": false
 * }
 * } 
 * 
 *  15. Export All Assertions 
 *  Payload: {
 * "types" : ["assertion"]
 * } 
 * 
 *  16. Export all API Plans 
 *  Payload: {
 * "types" : ["plan"]
 * } 
 * 
 *  17. Export all API Packages 
 *  Payload: {
 * "types" : ["package"]
 * } 
 * 
 *  18. Export all packages along with subscription but with out the registered Applications for the associated APIs. 
 *  Payload: {
 * "types" : ["package"],
 * "includeOptions":{
 * "includeApis" : false,
 * "includeApplications" : false,
 * "includeSubscriptions" : true
 * }
 * } 
 * 
 *  19. Export all subscriptions 
 *  Payload: {
 * "types" : ["subscription"]
 * } 
 * 
 *  20. Export all Administrator Settings 
 *  Payload: {
 * "types" : ["administrator_setting"]
 * } 
 * 
 *  21. Export specific Administrator Settings 
 *  Payload: {
 * "types" : ["administrator_setting"]
 * ,
 * "scope" : [
 * {
 * "attributeName": "configId",
 * "keyword": "loadBalancer|gatewayDestinationConfig"
 * }
 *  ]
 * }. Available settings: loadBalancer, keystore, mobileApp, extended, samlsso, misc, dashboard, customContentTypes, errorProcessing, auditlogDestinationConfig, gatewayDestinationConfig, jdbcDestinationConfig, desDestinationConfig, elasticsearchDestinationConfig, snmpDestinationConfig, emailDestinationConfig, apiPortalDestinationConfig, samlIssuer, logConfig, passwordRestrictions, passwordExpiry, accountLockSettings, ldapConfig, settings, cache, apiCallBackSettings 
 * 
 *  22. Export all approval configurations 
 *  Payload: {
 * "types" : ["approval_configuration"]
 * } 
 * 
 *  23. Export all outbound proxy aliases 
 *  Payload: {
 * "types" : ["outbound_proxy"]
 * } 
 * 
 *  24. Export all URL aliases 
 *  Payload: {
 * "types" : ["url_alias"]
 * } 
 * 
 *  25. Export all keystore aliases 
 *  Payload: {
 * "types" : ["keystore"]
 * } 
 * 
 *  26. Export all truststore aliases 
 *  Payload: {
 * "types" : ["truststore"]
 * } 
 * 
 *  27. Export all kerberos settings 
 *  Payload: {
 * "types" : ["kerberos_setting"]
 * } 
 * 
 *  28. Export all JNDI provider aliases 
 *  Payload: {
 * "types" : ["jndi_provider_alias"]
 * } 
 * 
 *  29. Export all JMS connection aliases 
 *  Payload: {
 * "types" : ["jms_connection_alias"]
 * } 
 * 
 *  30. Export all JMS triggers 
 *  Payload: {
 * "types" : ["jms_trigger"]
 * } 
 * 
 *  31. Export all web service endpoint aliases 
 *  Payload: {
 * "types" : ["web_service_endpoint_alias"]
 * } 
 * 
 *  32. Export all users 
 *  Payload: {
 * "types" : ["users"]
 * } 
 * 
 *  33. Export all groups 
 *  Payload: {
 * "types" : ["groups"]
 * } 
 * 
 *  34. Export all teams 
 *  Payload: {
 * "types" : ["accessprofiles"]
 * }
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class ImportExportAPIGatewayAssetsOperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * This parameter specifies the import option to define the artifact types that can be overwritten during import. The parameter enables you to specify overwriting of APIs, policies, policy actions, aliases, applications, application_apiKeys, application_strategies, application_strategy_credentials, configurations, approval configurations, outbound proxies, URL aliases, keyStores, trustStores, JNDI provider aliases, JMS connection aliases, JMS triggers, webservice endpoint aliases, users, groups, teams, kerberos settings, plans and packages. 
     *  Certain artifacts can only be overwritten if their parent artifact is also overwritten. E.g. you can't overwrite application_apiKeys without overwriting applications. 
     *  The wildcard "*" enables you to specify all types.
     * For example, the following request enables you to overwrite APIs during import:
     * POST /rest/apigateway/archive?overwrite=apis
     * Whereas, overwriting all asset types during import can be specified as follows:
     * POST /rest/apigateway/archive?overwrite=*
     *
     */
    @Nullable
    private String overwrite;

    /**
     * fixingMissingVersions
     *
     */
    @Nullable
    private String fixingMissingVersions;

    /**
     * This parameter is used to specify whether the asset state needs to be preserved after importing the assets in to API Gateway. By default this value will be true. If false specified the assets will be imported and wont preserve asset state after importing asset.
     *
     */
    @Nullable
    private String preserveAssetState;

    /**
     * This parameter identifies the policies to be imported. The wildcard "*" selects all the policies. 
     * For example a single policy can be imported with its id using the following request:
     * POST /rest/apigateway/archive?policies=07b8d7b7-20b7-422e-8464-4b19d405c41a
     * 
     * Whereas, all the policies can be imported using the following request:
     * POST /rest/apigateway/archive?policies=*
     *
     */
    @Nullable
    private List<String> policies;

    /**
     * This parameter identifies the APIs to be imported. The wildcard "*" selects all the APIs. 
     * For example a single API can be imported using the following request:
     * POST /rest/apigateway/archive?apis=e2996867-af49-4ac6-98e7-cba48837c13e
     * 
     * Whereas, all the APIs can be imported using the following request:
     * POST /rest/apigateway/archive?apis=*
     *
     */
    @Nullable
    private List<String> apis;

    /**
     * This parameter identifies the aliases to be imported. 
     * The wildcard "*" selects all aliases.
     * For example, a single alias can be imported using the following requrest:
     * POST /rest/apigateway/archive?aliases=d1885756-9e38-39b5-87d6-ba937726b02d
     * 
     * Whereas, all the APIs can be imported using the following request:
     * POST /rest/apigateway/archive?alias=*
     *
     */
    @Nullable
    private List<String> aliases;

    /**
     * This parameter identifies the applications to be imported. 
     * The wildcard "*" selects all applications.
     * For example, a single application can be imported using the following requrest:
     * POST /rest/apigateway/archive?applications=d1885756-9e38-39b5-87d6-ba937726b02d
     * 
     * Whereas, all the applications can be imported using the following request:
     * POST /rest/apigateway/archive?applications=*
     *
     */
    @Nullable
    private List<String> applications;

    /**
     * This parameter identifies the approval configurations to be imported. 
     * The wildcard "*" selects all approval configurations.
     * For example, a single approval configuration can be imported using the following request:
     * POST /rest/apigateway/archive?approvalConfigurations=createApplication
     * 
     * Whereas, all the approval configurations can be imported using the following request:
     *  POST /rest/apigateway/archive?approvalConfigurations=*
     *
     */
    @Nullable
    private List<String> approvalConfigurations;

    /**
     * This parameter identifies the outbound proxy aliases to be imported. outbound proxy aliases are identified with it's name.
     * The wildcard "*" selects all the outbound proxy aliases. 
     * For example a single outbound proxy alias can be imported using the following request:
     * POST /rest/apigateway/archive?outboundProxies=testOutboundProxyAlias
     * 
     * Whereas, all the outbound proxy aliases can be imported using the following request:
     * POST /rest/apigateway/archive?outboundProxies=*
     *
     */
    @Nullable
    private List<String> outboundProxies;

    /**
     * This parameter identifies the URL aliases to be imported. URL aliases are identified with it's name.
     * The wildcard "*" selects all the URL aliases. 
     * For example, a single URL alias can be imported using the following request:
     * POST /rest/apigateway/archive?urlAliases=testUrlAlias
     * 
     * Whereas, all the URL aliases can be imported using the following request:
     * POST /rest/apigateway/archive?testUrlAlias=*
     *
     */
    @Nullable
    private List<String> urlAliases;

    /**
     * This parameter identifies the keystore aliases to be imported. Keystore aliases are identified with it's name.
     * The wildcard "*" selects all the keystore aliases. 
     * For example, a single keystore alias can be imported using the following request:
     * POST /rest/apigateway/archive?keyStores=test_keystore
     * 
     * Whereas, all the keystore aliases can be imported using the following request:
     * POST /rest/apigateway/archive?keyStores=*
     *
     */
    @Nullable
    private List<String> keyStores;

    /**
     * This parameter identifies the truststore aliases to be imported. Truststore aliases are identified with it's name.
     * The wildcard "*" selects all the truststore aliases. 
     * For example, a single truststore alias can be imported using the following request:
     * POST /rest/apigateway/archive?trustStores=test_truststore
     * 
     * Whereas, all the truststore aliases can be imported using the following request:
     * POST /rest/apigateway/archive?trustStores=*
     *
     */
    @Nullable
    private List<String> trustStores;

    /**
     * This parameter identifies the JNDI provider aliases to be imported. JNDI provider aliases are identified with it's name.
     * The wildcard "*" selects all the JNDI provider aliases. 
     * For example, a single JNDI provider alias can be imported using the following request:
     * POST /rest/apigateway/archive?JNDIProviderAliases=test_jndiProviderAlias
     * 
     * Whereas, all the JNDI provider aliases can be imported using the following request:
     * POST /rest/apigateway/archive?JNDIProviderAliases=*
     *
     */
    @Nullable
    private List<String> jndiproviderAliases;

    /**
     * This parameter identifies the JMS connection aliases to be imported. JMS connection aliases are identified with it's name.
     * The wildcard "*" selects all the JNDI provider aliases. 
     * For example, a single JNDI provider alias can be imported using the following request:
     * POST /rest/apigateway/archive?JMSConnectionAliases=test_jmsConnectionAlias
     * 
     * Whereas, all the JMS connection aliases can be imported using the following request:
     * POST /rest/apigateway/archive?JMSConnectionAliases=*
     *
     */
    @Nullable
    private List<String> jmsconnectionAliases;

    /**
     * This parameter identifies the JMS triggers to be imported. JMS triggers are identified with it's name.
     * The wildcard "*" selects all the JMS triggers. 
     * For example, a single JMS trigger can be imported using the following request:
     * POST /rest/apigateway/archive?JMSTriggers=test_jmsTrigger
     * 
     * Whereas, all the JMS triggers can be imported using the following request:
     * POST /rest/apigateway/archive?JMSTriggers=*
     *
     */
    @Nullable
    private List<String> jmstriggers;

    /**
     * This parameter identifies the 'web service endpoint' aliases to be imported. Web service endpoint aliases are identified with it's name.
     * The wildcard "*" selects all the web service endpoint aliases. 
     * For example, a single web service endpoint alias can be imported using the following request:
     * POST /rest/apigateway/archive?webserviceEndpointAliases=test_wsEndpointAlias
     * 
     * Whereas, all the JMS triggers can be imported using the following request:
     * POST /rest/apigateway/archive?webserviceEndpointAliases=*
     *
     */
    @Nullable
    private List<String> webserviceEndpointAliases;

    /**
     * This parameter identifies the users to be imported. 
     * The wildcard "*" selects all the users. 
     * For example, a single user can be imported using the following request:
     * POST /rest/apigateway/archive?users=7a6d3d40-44d8-4ab1-83df-5be63cdbae54
     * 
     * Whereas, all the users can be imported using the following request:
     * POST /rest/apigateway/archive?users=*
     *
     */
    @Nullable
    private List<String> users;

    /**
     * This parameter identifies the groups to be imported. 
     * The wildcard "*" selects all the groups. 
     * For example, a single group can be imported using the following request:
     * POST /rest/apigateway/archive?groups=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48
     * 
     * Whereas, all the groups can be imported using the following request:
     * POST /rest/apigateway/archive?groups=*
     *
     */
    @Nullable
    private List<String> groups;

    /**
     * This parameter identifies the teams to be imported. 
     * The wildcard "*" selects all the teams. 
     * For example, a single team can be imported using the following request:
     * POST /rest/apigateway/archive?accessProfiles=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48
     * 
     * Whereas, all the teams can be imported using the following request:
     * POST /rest/apigateway/archive?accessProfiles=*
     *
     */
    @Nullable
    private List<String> accessProfiles;

    /**
     * This parameter identifies the kerberos configuration to be imported.
     * The kerberos configuration can be imported using the following request:
     * POST /rest/apigateway/archive?kerberosSetting=kerberosSetting
     *
     */
    @Nullable
    private String kerberosSetting;

    /**
     * This parameter identifies the plans to be imported. 
     * The wildcard "*" selects all the plans. 
     * For example, a single plan can be imported using the following request:
     * POST /rest/apigateway/archive?plans=86d58023-be4b-4735-a08f-14e78131ce4a
     * 
     * Whereas, all the plans can be imported using the following request:
     * POST /rest/apigateway/archive?plans=*
     *
     */
    @Nullable
    private List<String> plans;

    /**
     * This parameter identifies the packages to be imported. 
     * The wildcard "*" selects all the packages. 
     * For example, a single package can be imported using the following request:
     * POST /rest/apigateway/archive?packages=73c93393-1477-4a99-9e44-c9b3e679de0c
     * 
     * Whereas, all the packages can be imported using the following request:
     * POST /rest/apigateway/archive?packages=*
     *
     */
    @Nullable
    private List<String> packages;

    /**
     * This parameter identifies the configurations to be imported. 
     * The wildcard "*" selects all the configurations. 
     * For example, a single configuration can be imported using the following request:
     * POST /rest/apigateway/archive?configurations=loadBalancer,customContentTypes
     * 
     * Whereas, all the configurations can be imported using the following request:
     * POST /rest/apigateway/archive?configurations=*
     *
     */
    @Nullable
    private List<String> configurations;

    /**
     * This parameter identifies the oauth scopes to be imported. 
     * The wildcard "*" selects all the oauth scopes. 
     * For example, a single oauth scope can be imported using the following request:
     * POST /rest/apigateway/archive?gatewayScopes=73c93393-1477-4a99-9e44-c9b3e679de0c
     * 
     * Whereas, all the oauth scopes can be imported using the following request:
     * POST /rest/apigateway/archive?gatewayScopes=*
     *
     */
    @Nullable
    private List<String> gatewayScopes;

    /**
     * This parameter is used to specify that this REST call is an export operation. The value for this field is GET. If this is specified then you need to provide the filtering criteria in body to specify the asset. If empty payload specified then all assets will be exported. 
     *
     */
    @Nullable
    private String xHttpMethodOverride;

    /**
     * payload
     *
     */
    @NonNull
    private ImportExportAPIGatewayAssetsB payload;

    /**
     * Constructs a validated instance of {@link ImportExportAPIGatewayAssetsOperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public ImportExportAPIGatewayAssetsOperationSpec(Consumer<ImportExportAPIGatewayAssetsOperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
