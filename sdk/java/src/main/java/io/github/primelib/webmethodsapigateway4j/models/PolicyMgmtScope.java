// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * PolicyMgmtScope
 * <p>
 * A scope is used to define the filtering criteria for Global policy. Using scope we can specify the APIs or Resources or opertaion on which the policy enforcements needs to be applied.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("PolicyMgmtScope")
@JsonPropertyOrder({
    "applicableApitypes",
    "logicalConnector",
    "scopeConditions"
})
@Generated(value = "io.github.primelib.primecodegen")
public class PolicyMgmtScope {

    /**
     * This contains the list of API types on which the global policy can be applied. For now only REST and SOAP API types are allowed.
     */
    @JsonProperty("applicableAPITypes")
    protected List<String> applicableApitypes;

    @JsonProperty("logicalConnector")
    protected String logicalConnector;

    @JsonProperty("scopeConditions")
    protected List<PolicyMgmtScopeCondition> scopeConditions;

    /**
     * Constructs a validated instance of {@link PolicyMgmtScope}.
     *
     * @param spec the specification to process
     */
    public PolicyMgmtScope(Consumer<PolicyMgmtScope> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link PolicyMgmtScope}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #PolicyMgmtScope(Consumer)} instead.
     * @param applicableApitypes This contains the list of API types on which the global policy can be applied. For now only REST and SOAP API types are allowed.
     * @param logicalConnector logicalConnector
     * @param scopeConditions scopeConditions
     */
    @ApiStatus.Internal
    public PolicyMgmtScope(List<String> applicableApitypes, String logicalConnector, List<PolicyMgmtScopeCondition> scopeConditions) {
        this.applicableApitypes = applicableApitypes;
        this.logicalConnector = logicalConnector;
        this.scopeConditions = scopeConditions;
    }
}
