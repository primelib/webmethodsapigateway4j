// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.webmethodsapigateway4j.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * PolicyMgmtEnforcementValIDAtionMessage
 * <p>
 * This model is used to give the details about conflicts between the policy enforcements. The conflicts may arise due to dependent policy action enforcement missing or due to occurrence or due to mutually exclusive policy enforcements. These happen during the below scenarios 
 * 1. When a policy is attached to an API, the enforcement validation will happen on policy.
 * 2. When a global policy is getting activated, it will validate the policy enforcement of the corresponding global policy and the runtime policy enforcements on the applicable APIs for any violation.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("PolicyMgmtEnforcementValIDAtionMessage")
@JsonPropertyOrder({
    "apiId",
    "apiName",
    "apiType",
    "apiVersion",
    "errorOnResource"
})
@Generated(value = "io.github.primelib.primecodegen")
public class PolicyMgmtEnforcementValIDAtionMessage {

    /**
     * ID of the API which is having the policy enforcement violation
     */
    @JsonProperty("apiId")
    protected String apiId;

    /**
     * Name of the API which is having the policy enforcement violation
     */
    @JsonProperty("apiName")
    protected String apiName;

    /**
     * Type of the API which is having the policy enforcement violation
     */
    @JsonProperty("apiType")
    protected String apiType;

    /**
     * Version of the API which is having the policy enforcement violation
     */
    @JsonProperty("apiVersion")
    protected String apiVersion;

    @JsonProperty("errorOnResource")
    protected List<PolicyMgmtResourcePolicyValIDAtionError> errorOnResource;

    /**
     * Constructs a validated instance of {@link PolicyMgmtEnforcementValIDAtionMessage}.
     *
     * @param spec the specification to process
     */
    public PolicyMgmtEnforcementValIDAtionMessage(Consumer<PolicyMgmtEnforcementValIDAtionMessage> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link PolicyMgmtEnforcementValIDAtionMessage}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #PolicyMgmtEnforcementValIDAtionMessage(Consumer)} instead.
     * @param apiId ID of the API which is having the policy enforcement violation
     * @param apiName Name of the API which is having the policy enforcement violation
     * @param apiType Type of the API which is having the policy enforcement violation
     * @param apiVersion Version of the API which is having the policy enforcement violation
     * @param errorOnResource errorOnResource
     */
    @ApiStatus.Internal
    public PolicyMgmtEnforcementValIDAtionMessage(String apiId, String apiName, String apiType, String apiVersion, List<PolicyMgmtResourcePolicyValIDAtionError> errorOnResource) {
        this.apiId = apiId;
        this.apiName = apiName;
        this.apiType = apiType;
        this.apiVersion = apiVersion;
        this.errorOnResource = errorOnResource;
    }
}
