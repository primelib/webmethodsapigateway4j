// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package models

type MonetizationParameter struct {
	Enum             []*string           `json:"_enum" form:"name=_enum,json"`
	AllowEmptyValue  *bool               `json:"allowEmptyValue" form:"name=allowEmptyValue"` // Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value
	AllowReserved    *bool               `json:"allowReserved" form:"name=allowReserved"`     // Determines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property only applies to parameters with an in value of query. The default value is false
	Content          *Content            `json:"content" form:"name=content,json"`            // A map containing descriptions of potential response payloads. The key is a media type or media type range and the value describes it
	Default          *string             `json:"default" form:"name=default"`
	Deprecated       *bool               `json:"deprecated" form:"name=deprecated"`                // Determines whether this parameter is mandatory. If the parameter location is "path", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false
	Description      *string             `json:"description" form:"name=description"`              // A brief description of the parameter. This could contain examples of use
	Examples         *Examples           `json:"examples" form:"name=examples,json"`               // Examples of the media type. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema
	Explode          *bool               `json:"explode" form:"name=explode"`                      // When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false
	ExtendedExample  *interface{}        `json:"extendedExample" form:"name=extendedExample,json"` // Example of the media type. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary
	Getref           *string             `json:"get$ref" form:"name=get$ref"`                      // The available paths and operations for the API
	In               *string             `json:"in" form:"name=in"`                                // The location of the parameter. Possible values are "query", "header", "path" or "cookie"
	Name             *string             `json:"name" form:"name=name"`                            // The name of the parameter. Parameter names are case sensitive
	ParameterSchema  *MonetizationSchema `json:"parameterSchema" form:"name=parameterSchema,json"`
	Required         *bool               `json:"required" form:"name=required"` // Determines whether this parameter is mandatory. If the parameter location is "path", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false
	Style            *string             `json:"style" form:"name=style"`       // Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form
	VendorExtensions *VendorExtensions   `json:"vendorExtensions" form:"name=vendorExtensions,json"`
	Xpath            *MonetizationXpath  `json:"xpath" form:"name=xpath,json"`
}
