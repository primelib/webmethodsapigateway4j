// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package models

// AdminKeyStore This model contains Keystore details

type AdminKeyStore struct {
	Bitarray            *string `json:"bitarray" form:"name=bitarray"`                       // Comma separated list of bits (1/0) indicating whether the particular key alias has been successfully configured in API Gateway or not. For each key alias, 1 indicates that the key alias was loaded successfully and 0 indicates that the key alias was not loaded/configured.
	FileContent         *string `json:"fileContent" form:"name=fileContent"`                 // The contents of the keystore file.
	IsLoaded            *bool   `json:"isLoaded" form:"name=isLoaded"`                       // Indicates whether the keystore is loaded or not. A keystore may not be loaded if there are errors while reading the keystore file or its key aliases.
	IsWarning           *bool   `json:"isWarning" form:"name=isWarning"`                     // Indicates whether a warning is thrown by the API Gateway while persisting the keystore.
	KeyStoreDescription *string `json:"keyStoreDescription" form:"name=keyStoreDescription"` // The description for the keystore.
	KeyStoreName        *string `json:"keyStoreName" form:"name=keyStoreName"`               // The name of the keystore. It cannot contain spaces or special characters. The name of the key store must be unique across all the keystores created in API Gateway.
	KeyStorePassword    *string `json:"keyStorePassword" form:"name=keyStorePassword"`       // The keystore password that is defined at the time of keystore creation using a keystore utility.
	KeyStoreProvIDEr    *string `json:"keyStoreProvider" form:"name=keyStoreProvider"`
	KeyStoreType        *string `json:"keyStoreType" form:"name=keyStoreType"`       // The certificate file format of the truststore.
	Message             *string `json:"message" form:"name=message"`                 // The error or warning or success message from persisting the keystore in API Gateway. If there are failures in loading a keystore or a key alias, then the reasons for the failures are indicated by this message.
	NullPkpasswds       *string `json:"nullPKpasswds" form:"name=nullPKpasswds"`     // Comma separated list of boolean values (false/true) indicating whether the particular alias has a password or not in the same order as the aliases specified in pkAliasesList. For each key alias, true indicates that the key alias does not have a password and false indicates that it does have a password.
	PkAliasesList       *string `json:"pkAliasesList" form:"name=pkAliasesList"`     // Comma separated list of alias names in the uploaded keystore file.
	PkPasswordsList     *string `json:"pkPasswordsList" form:"name=pkPasswordsList"` // Comma separated list of passwords in the same order as the aliases specified in pkAliasesList. If a particular key alias does not have a password, it is denoted by space.
	UploadFileName      *string `json:"uploadFileName" form:"name=uploadFileName"`   // The name of the keystore file that will be used to save the keystore internally in API Gateway.
}
