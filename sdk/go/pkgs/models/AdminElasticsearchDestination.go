// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package models

// AdminElasticsearchDestination This defines the configurations required for Elasticsearch destinations.

type AdminElasticsearchDestination struct {
	Hostname                                 *string `json:"hostname" form:"name=hostname"`                                                                 // Specifies the host name or IP address of the machine on which Elasticsearch Server is running.
	IndexName                                *string `json:"indexName" form:"name=indexName"`                                                               // Specifies the index name for the Elasticsearch server on which the events will be available.
	MetricsPublishInterval                   *string `json:"metricsPublishInterval" form:"name=metricsPublishInterval"`                                     // The interval at which the metrics will be published to the destination. Enter a value from 1 through 60. The default is 60 minutes.
	Password                                 *string `json:"password" form:"name=password"`                                                                 // The password for the Elasticsearch server instance.
	Port                                     *string `json:"port" form:"name=port"`                                                                         // Specifies the port on which the Elasticsearch server runs.
	Protocol                                 *string `json:"protocol" form:"name=protocol"`                                                                 // Specifies the communication protocol used to establish communication between API Gateway and CentraSite.
	SendAuditlogAPIManagementEvent           *string `json:"sendAuditlogAPIManagementEvent" form:"name=sendAuditlogAPIManagementEvent"`                     // Flag to enable publish of the api management audit logs. Occurs each time an api create/update/delete operation performed.
	SendAuditlogAccessProfileManagementEvent *string `json:"sendAuditlogAccessProfileManagementEvent" form:"name=sendAuditlogAccessProfileManagementEvent"` // Flag to enable publish of the team management audit logs. Occurs each time an team create/update/delete operation performed.
	SendAuditlogAliasManagementEvent         *string `json:"sendAuditlogAliasManagementEvent" form:"name=sendAuditlogAliasManagementEvent"`                 // Flag to enable publish of the alias management audit logs. Occurs each time an alias create/update/delete operation performed.
	SendAuditlogApplicationManagementEvent   *string `json:"sendAuditlogApplicationManagementEvent" form:"name=sendAuditlogApplicationManagementEvent"`     // Flag to enable publish of the application management audit logs. Occurs each time an application create/update/delete operation performed.
	SendAuditlogApprovalManagementEvent      *string `json:"sendAuditlogApprovalManagementEvent" form:"name=sendAuditlogApprovalManagementEvent"`           // Flag to enable publish of the approval management audit logs. Occurs each time an approval request create/update/delete operation performed.
	SendAuditlogGroupManagementEvent         *string `json:"sendAuditlogGroupManagementEvent" form:"name=sendAuditlogGroupManagementEvent"`                 // Flag to enable publish of the group management audit logs. Occurs each time a group create/update/delete operation performed.
	SendAuditlogPackageManagementEvent       *string `json:"sendAuditlogPackageManagementEvent" form:"name=sendAuditlogPackageManagementEvent"`             // Flag to enable publish of the package management audit logs. Occurs each time a package create/update/delete operation performed.
	SendAuditlogPlanManagementEvent          *string `json:"sendAuditlogPlanManagementEvent" form:"name=sendAuditlogPlanManagementEvent"`                   // Flag to enable publish of the plan management audit logs. Occurs each time a plan create/update/delete operation performed.
	SendAuditlogPolicyManagementEvent        *string `json:"sendAuditlogPolicyManagementEvent" form:"name=sendAuditlogPolicyManagementEvent"`               // Flag to enable publish of the policy management audit logs. Occurs each time a policy create/update/delete operation performed.
	SendAuditlogPromotionManagementEvent     *string `json:"sendAuditlogPromotionManagementEvent" form:"name=sendAuditlogPromotionManagementEvent"`         // Flag to enable publish of the promotion management audit logs. Occurs each time a promotion create/update/delete operation performed.
	SendAuditlogRuntimeDataManagementEvent   *string `json:"sendAuditlogRuntimeDataManagementEvent" form:"name=sendAuditlogRuntimeDataManagementEvent"`     // Flag to enable publish of the analytics management audit logs. Occurs each time an analytics data delete operation performed.
	SendAuditlogUserManagementEvent          *string `json:"sendAuditlogUserManagementEvent" form:"name=sendAuditlogUserManagementEvent"`                   // Flag to enable publish of the user management audit logs. Occurs each time an user create/update/delete operation performed.
	SendErrorEvent                           *string `json:"sendErrorEvent" form:"name=sendErrorEvent"`                                                     // Flag to enable publish of the error events. Occurs each time an API invocation results in an error.
	SendLifecycleEvent                       *string `json:"sendLifecycleEvent" form:"name=sendLifecycleEvent"`                                             // Flag to enable publish of the life cycle events. Occurs each time API Gateway is started or shut down.
	SendPerformanceMetrics                   *string `json:"sendPerformanceMetrics" form:"name=sendPerformanceMetrics"`                                     // Flag to enable publish of the performance metrics. The performance data provides information on average response time, total request count, fault count, and so on.
	SendPolicyViolationEvent                 *string `json:"sendPolicyViolationEvent" form:"name=sendPolicyViolationEvent"`                                 // Flag to enable publish of the policy violations events. Occurs each time an API invocation violates the policy enforcement that was set for the API.
	Username                                 *string `json:"username" form:"name=username"`                                                                 // The username for the Elasticsearch server instance.
}
