// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package models

type MonetizationSchema struct {
	AdditionalProperties          *MonetizationSchema       `json:"additionalProperties" form:"name=additionalProperties,json"`
	AdditionalPropertiesAsBoolean *bool                     `json:"additionalPropertiesAsBoolean" form:"name=additionalPropertiesAsBoolean"`
	Default                       *interface{}              `json:"default" form:"name=default,json"`    // The default value represents what would be assumed by the consumer of the input as the value of the schema if one is not provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object defined at the same level. For example, if type is string, then default can be "foo" but cannot be 1
	Deprecated                    *bool                     `json:"deprecated" form:"name=deprecated"`   // Specifies that a schema is deprecated and SHOULD be transitioned out of usage. Default value is false
	Description                   *string                   `json:"description" form:"name=description"` // Provide a more lengthy explanation about the purpose of the data described by the schema
	Enum                          []*interface{}            `json:"enum" form:"name=enum,json"`
	Example                       *interface{}              `json:"example" form:"name=example,json"`              // A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary
	ExclusiveMaximum              *bool                     `json:"exclusiveMaximum" form:"name=exclusiveMaximum"` // Indicate whether maximum are exclusive of the value
	ExclusiveMinimum              *bool                     `json:"exclusiveMinimum" form:"name=exclusiveMinimum"` // Indicate whether minimum are exclusive of the value
	ExternalDocs                  *MonetizationExternalDocs `json:"externalDocs" form:"name=externalDocs,json"`
	Format                        *string                   `json:"format" form:"name=format"` // The format keyword allows for basic semantic validation on certain kinds of string values that are commonly used
	Getref                        *string                   `json:"get$ref" form:"name=get$ref"`
	MaxItems                      *int32                    `json:"maxItems" form:"name=maxItems"`           // The maximum length of the array can be specified
	MaxLength                     *int32                    `json:"maxLength" form:"name=maxLength"`         // The maximum length of a string can be constrained using the minLength
	MaxProperties                 *int32                    `json:"maxProperties" form:"name=maxProperties"` // The maximum number of properties on an object can be restricted
	Maximum                       *float64                  `json:"maximum" form:"name=maximum"`             // Upper limit in the ranges of numbers, (or exclusiveMinimum and exclusiveMaximum for expressing exclusive range)
	MinItems                      *int32                    `json:"minItems" form:"name=minItems"`           // The minimum length of the array can be specified
	MinLength                     *int32                    `json:"minLength" form:"name=minLength"`         // The minimum length of a string can be constrained using the minLength
	MinProperties                 *int32                    `json:"minProperties" form:"name=minProperties"` // The minimum number of properties on an object can be restricted
	Minimum                       *float64                  `json:"minimum" form:"name=minimum"`             // Lower limit in the ranges of numbers
	MultipleOf                    *float64                  `json:"multipleOf" form:"name=multipleOf"`       // Numbers can be restricted to a multiple of a given number, using the multipleOf keyword. It may be set to any positive number.
	Name                          *string                   `json:"name" form:"name=name"`                   // User defined name for the property
	Not                           *MonetizationSchema       `json:"not" form:"name=not,json"`
	Nullable                      *bool                     `json:"nullable" form:"name=nullable"`          // Allows sending a null value for the defined schema. Default value is false
	Pattern                       *string                   `json:"pattern" form:"name=pattern"`            // The pattern keyword is used to restrict a string to a particular regular expression. The regular expression syntax is the one defined in JavaScript (ECMA 262 specifically)
	Properties                    *Properties               `json:"properties" form:"name=properties,json"` // The properties (key-value pairs) on an object are defined using the properties keyword. The value of properties is an object, where each key is the name of a property and each value is of type schema used to validate that property
	ReadOnly                      *bool                     `json:"readOnly" form:"name=readOnly"`          // Relevant only for Schema "properties" definitions. Declares the property as "read only". This means that it MAY be sent as part of a response but SHOULD NOT be sent as part of the request. If the property is marked as readOnly being true and is in the required list, the required will take effect on the response only. A property MUST NOT be marked as both readOnly and writeOnly being true. Default value is false
	Required                      []*string                 `json:"required" form:"name=required,json"`     // By default, the properties defined by the properties keyword are not required. However, one can provide a list of required properties using the required keyword. The required keyword takes an array of zero or more strings. Each of these strings must be unique.
	Title                         *string                   `json:"title" form:"name=title"`                // User defined title for the property
	Type                          *string                   `json:"type" form:"name=type"`                  // It specifies the data type for a schema
	UniqueItems                   *bool                     `json:"uniqueItems" form:"name=uniqueItems"`    // A schema can ensure that each of the items in an array is unique. Simply set the uniqueItems keyword to true
	VendorExtensions              *VendorExtensions         `json:"vendorExtensions" form:"name=vendorExtensions,json"`
	WriteOnly                     *bool                     `json:"writeOnly" form:"name=writeOnly"` // Relevant only for Schema "properties" definitions. Declares the property as "write only". Therefore, it MAY be sent as part of a request but SHOULD NOT be sent as part of the response. If the property is marked as writeOnly being true and is in the required list, the required will take effect on the request only. A property MUST NOT be marked as both readOnly and writeOnly being true. Default value is false
	Xml                           *MonetizationXml          `json:"xml" form:"name=xml,json"`
}
