// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type UpdateAPIKeysExpiryRequest struct {
	Payload *models.ApplicationAccessTokensTypeModel `bodyParam:""` // This parameter specifies the type of access token for which expiry date should be updated. Currently only apiAccessKeyCredentials is supported
}

type UpdateAPIKeysExpiryResponse struct {
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// UpdateAPIKeysExpiry The method updates the expiry date of all the API Keys in the instance. The new expiry date is calculated based on the extended settings property 'apiKeyExpirationPeriod'. If 'apiKeyExpirationPeriod is empty, then the expiration date for all API Keys are set as unlimited.If 'apiKeyExpirationPeriod' is set to some accepted value (say 60min), then the expiry date is calculated as current time when this method is invoked + the expiration period (60min).Since this method updates expiry date for all API keys in the instance, take caution when you invoke this! Invoke this only if absolutely necessary and take necessary precautions!For example, your system might have applications to the scale of 1M or higher - make sure to configure appropriate timeout settings, etc when invoking this!
//
//meta:operation PUT /applications/accessTokens
func UpdateAPIKeysExpiry(client *resty.Client, ctx context.Context, req UpdateAPIKeysExpiryRequest) (*UpdateAPIKeysExpiryResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}

	// send the request
	resp, err := r.Put("/applications/accessTokens")
	if err != nil {
		return nil, err
	}

	return &UpdateAPIKeysExpiryResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
