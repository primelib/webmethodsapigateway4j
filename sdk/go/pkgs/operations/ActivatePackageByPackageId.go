// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type ActivatePackageByPackageIdRequest struct {
	PackageId *string `pathParam:"style=simple,explode=false,name=packageId"` // package id which needs to be activated
}

type ActivatePackageByPackageIdResponse struct {
	// Success response
	Result *models.MonetizationPackageResponseContainer
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// ActivatePackageByPackageId This endpoint is used to activate the package. Once activated it will insert new Authentication policy for all associated APIs with API key as application identification condition. If the authentication policy already available or added to an API after activating the package, the package will add API key to that authentication policy if it is not there. It also make the condition as OR for application identification condition available in the authentication policy
//
//meta:operation PUT /packages/{packageId}/activate
func ActivatePackageByPackageId(client *resty.Client, ctx context.Context, req ActivatePackageByPackageIdRequest) (*ActivatePackageByPackageIdResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.MonetizationPackageResponseContainer)
	r.SetResult(result)

	// send the request
	resp, err := r.Put("/packages/{packageId}/activate")
	if err != nil {
		return nil, err
	}

	return &ActivatePackageByPackageIdResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
