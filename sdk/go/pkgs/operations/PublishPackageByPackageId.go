// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type PublishPackageByPackageIdRequest struct {
	PackageId *string `pathParam:"style=simple,explode=false,name=packageId"` // package id which needs to be published to portal
}

type PublishPackageByPackageIdResponse struct {
	// Success response
	Result *models.MonetizationPackageResponseContainer
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// PublishPackageByPackageId This endpoint is used to publish the packages along with its associated plans to portal. Before publishing the package, the portal configuration should be configured in API gateway. You can use the endpoint /portalGateways to configure the portal configuration. The associated APIs needs to be published before publishing the package.
//
//meta:operation PUT /packages/{packageId}/publish
func PublishPackageByPackageId(client *resty.Client, ctx context.Context, req PublishPackageByPackageIdRequest) (*PublishPackageByPackageIdResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.MonetizationPackageResponseContainer)
	r.SetResult(result)

	// send the request
	resp, err := r.Put("/packages/{packageId}/publish")
	if err != nil {
		return nil, err
	}

	return &PublishPackageByPackageIdResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
