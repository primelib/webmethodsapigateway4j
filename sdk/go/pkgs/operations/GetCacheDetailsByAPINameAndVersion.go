// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
)

type GetCacheDetailsByAPINameAndVersionRequest struct {
	APIName    *string `queryParam:"style=simple,explode=false,name=apiName"`    // This query parameter is used to specify the API name for which the service result cache element size needs to be fetched.
	APIVersion *string `queryParam:"style=simple,explode=false,name=apiVersion"` // The version of the apiName parameter specified
}

type GetCacheDetailsByAPINameAndVersionResponse struct {
	// Success response
	Result *string
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// GetCacheDetailsByAPINameAndVersion You can enable API caching in API Gateway to cache your native service's response. With caching, you can reduce the number of calls made to your endpoint and also improve the latency of the requests to your API. When you enable caching for a stage, API Gateway caches responses from your endpoint for a specified time to live period. API Gateway then responds to the request by looking up the endpoint response from the cache instead of making a request to your endpoint.   Service Result cache can be configured for a API or Resource/method or Operation.   This REST Request is used to get the Service Result cache size for an API using apiName and apiVersion.
//
//meta:operation GET /serviceResultCache
func GetCacheDetailsByAPINameAndVersion(client *resty.Client, ctx context.Context, req GetCacheDetailsByAPINameAndVersionRequest) (*GetCacheDetailsByAPINameAndVersionResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(string)
	r.SetResult(result)

	// send the request
	resp, err := r.Get("/serviceResultCache")
	if err != nil {
		return nil, err
	}

	return &GetCacheDetailsByAPINameAndVersionResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
