// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type CreatePolicyActionRequest struct {
	Payload *models.PolicyMgmtPolicyAction `bodyParam:""` // Contains the policy action details of the newly created policy action
}

type CreatePolicyActionResponse struct {
	// Success response
	Result *models.PolicyMgmtPolicyAction
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// CreatePolicyAction This REST request is used to create policy action. The result of this request is a policy action payload and is available in the response. To know about the policy action template and to create it  you can use the policyActionTemplates/{templateKey} to get the template structure of a policy action. The template key will be available in policyStage resource.  It's also used to create the custom destination using the templateKey 'customDestination'. For more information on custom destination, please refer the postman collections here -  https://github.com/SoftwareAG/webmethods-api-gateway/blob/master/apigatewayservices/postmancollections/apis/custom-destination/CustomDestination.json
//
//meta:operation POST /policyActions
func CreatePolicyAction(client *resty.Client, ctx context.Context, req CreatePolicyActionRequest) (*CreatePolicyActionResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.PolicyMgmtPolicyAction)
	r.SetResult(result)

	// send the request
	resp, err := r.Post("/policyActions")
	if err != nil {
		return nil, err
	}

	return &CreatePolicyActionResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
