// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
)

type ExportAPIGatewayAssetsRequest struct {
	IncludeApplications       *string   `queryParam:"style=simple,explode=false,name=include-applications"`      // This parameter indicates whether you want to export the applications associated with the APIs
	IncludeUsers              *string   `queryParam:"style=simple,explode=false,name=include-users"`             // This parameter indicates whether you want to export users associated with the groups and/or with the password expiry settings
	IncludeGroups             *string   `queryParam:"style=simple,explode=false,name=include-groups"`            // This parameter indicates whether you want to export groups associated with the teams
	IncludeTruststores        *string   `queryParam:"style=simple,explode=false,name=include-truststores"`       // This parameter indicates whether you want to export truststore alias associated with the email configuration
	Policies                  []*string `queryParam:"style=simple,explode=false,name=policies"`                  // This parameter identifies the policies to be exported. The wildcard "*" selects all the policies.  For example a single policy can be exported with its id using the following request: GET /rest/apigateway/archive?policies=07b8d7b7-20b7-422e-8464-4b19d405c41a  Whereas, all the policies can be exported using the following request: GET /rest/apigateway/archive?policies=*
	APIS                      []*string `queryParam:"style=simple,explode=false,name=apis"`                      // This parameter identifies the APIs to be exported. The wildcard "*" selects all the APIs.  For example a single API can be exported using the following request: GET /rest/apigateway/archive?apis=e2996867-af49-4ac6-98e7-cba48837c13e  Whereas, all the APIs can be exported using the following request: GET /rest/apigateway/archive?apis=*
	Aliases                   []*string `queryParam:"style=simple,explode=false,name=aliases"`                   // This parameter identifies the aliases to be exported.  The wildcard "*" selects all aliases. For example, a single alias can be exported using the following requrest: GET /rest/apigateway/archive?aliases=d1885756-9e38-39b5-87d6-ba937726b02d  Whereas, all the APIs can be exported using the following request: GET /rest/apigateway/archive?alias=*
	Applications              []*string `queryParam:"style=simple,explode=false,name=applications"`              // This parameter identifies the applications to be exported.  The wildcard "*" selects all applications. For example, a single application can be exported using the following requrest: GET /rest/apigateway/archive?applications=d1885756-9e38-39b5-87d6-ba937726b02d  Whereas, all the applications can be exported using the following request: GET /rest/apigateway/archive?applications=*
	PolicyActions             []*string `queryParam:"style=simple,explode=false,name=policyActions"`             // This parameter identifies the policy actions to be exported.  The wildcard "*" selects all policy actions. For example, a single policy action can be exported using the following request:  GET /rest/apigateway/archive?policyActions=20ca1e24-d6b2-430d-adf8-7a53a6cbaa53  Whereas, all the policy actions can be exported using the following request: GET /rest/apigateway/archive?policyActions=*
	ApprovalConfigurations    []*string `queryParam:"style=simple,explode=false,name=approvalConfigurations"`    // This parameter identifies the approval configurations to be exported.  The wildcard "*" selects all approval configurations. For example, a single approval configuration can be exported using the following request: GET /rest/apigateway/archive?approvalConfigurations=createApplication  Whereas, all the approval configurations can be exported using the following request:  GET /rest/apigateway/archive?approvalConfigurations=*
	OutboundProxies           []*string `queryParam:"style=simple,explode=false,name=outboundProxies"`           // This parameter identifies the outbound proxy aliases to be exported. outbound proxy aliases are identified with it's name. The wildcard "*" selects all the outbound proxy aliases.  For example a single outbound proxy alias can be exported using the following request: GET /rest/apigateway/archive?outboundProxies=testOutboundProxyAlias  Whereas, all the outbound proxy aliases can be exported using the following request: GET /rest/apigateway/archive?outboundProxies=*
	UrlAliases                []*string `queryParam:"style=simple,explode=false,name=urlAliases"`                // This parameter identifies the URL aliases to be exported. URL aliases are identified with it's name. The wildcard "*" selects all the URL aliases.  For example, a single URL alias can be exported using the following request: GET /rest/apigateway/archive?urlAliases=testUrlAlias  Whereas, all the URL aliases can be exported using the following request: GET /rest/apigateway/archive?testUrlAlias=*
	KeyStores                 []*string `queryParam:"style=simple,explode=false,name=keyStores"`                 // This parameter identifies the keystore aliases to be exported. Keystore aliases are identified with it's name. The wildcard "*" selects all the keystore aliases.  For example, a single keystore alias can be exported using the following request: GET /rest/apigateway/archive?keyStores=test_keystore  Whereas, all the keystore aliases can be exported using the following request: GET /rest/apigateway/archive?keyStores=*
	TrustStores               []*string `queryParam:"style=simple,explode=false,name=trustStores"`               // This parameter identifies the truststore aliases to be exported. Truststore aliases are identified with it's name. The wildcard "*" selects all the truststore aliases.  For example, a single truststore alias can be exported using the following request: GET /rest/apigateway/archive?trustStores=test_truststore  Whereas, all the truststore aliases can be exported using the following request: GET /rest/apigateway/archive?trustStores=*
	JndiprovIDErAliases       []*string `queryParam:"style=simple,explode=false,name=JNDIProviderAliases"`       // This parameter identifies the JNDI provider aliases to be exported. JNDI provider aliases are identified with it's name. The wildcard "*" selects all the JNDI provider aliases.  For example, a single JNDI provider alias can be exported using the following request: GET /rest/apigateway/archive?JNDIProviderAliases=test_jndiProviderAlias  Whereas, all the JNDI provider aliases can be exported using the following request: GET /rest/apigateway/archive?JNDIProviderAliases=*
	JmsconnectionAliases      []*string `queryParam:"style=simple,explode=false,name=JMSConnectionAliases"`      // This parameter identifies the JMS connection aliases to be exported. JMS connection aliases are identified with it's name. The wildcard "*" selects all the JNDI provider aliases.  For example, a single JNDI provider alias can be exported using the following request: GET /rest/apigateway/archive?JMSConnectionAliases=test_jmsConnectionAlias  Whereas, all the JMS connection aliases can be exported using the following request: GET /rest/apigateway/archive?JMSConnectionAliases=*
	Jmstriggers               []*string `queryParam:"style=simple,explode=false,name=JMSTriggers"`               // This parameter identifies the JMS triggers to be exported. JMS triggers are identified with it's name. The wildcard "*" selects all the JMS triggers.  For example, a single JMS trigger can be exported using the following request: GET /rest/apigateway/archive?JMSTriggers=test_jmsTrigger  Whereas, all the JMS triggers can be exported using the following request: GET /rest/apigateway/archive?JMSTriggers=*
	WebserviceEndpointAliases []*string `queryParam:"style=simple,explode=false,name=webserviceEndpointAliases"` // This parameter identifies the 'web service endpoint' aliases to be exported. Web service endpoint aliases are identified with it's name. The wildcard "*" selects all the web service endpoint aliases.  For example, a single web service endpoint alias can be exported using the following request: GET /rest/apigateway/archive?webserviceEndpointAliases=test_wsEndpointAlias  Whereas, all the JMS triggers can be exported using the following request: GET /rest/apigateway/archive?webserviceEndpointAliases=*
	Users                     []*string `queryParam:"style=simple,explode=false,name=users"`                     // This parameter identifies the users to be exported.  The wildcard "*" selects all the users.  For example, a single user can be exported using the following request: GET /rest/apigateway/archive?users=7a6d3d40-44d8-4ab1-83df-5be63cdbae54  Whereas, all the users can be exported using the following request: GET /rest/apigateway/archive?users=*
	Groups                    []*string `queryParam:"style=simple,explode=false,name=groups"`                    // This parameter identifies the groups to be exported.  The wildcard "*" selects all the groups.  For example, a single group can be exported using the following request: GET /rest/apigateway/archive?groups=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48  Whereas, all the groups can be exported using the following request: GET /rest/apigateway/archive?groups=*
	AccessProfiles            []*string `queryParam:"style=simple,explode=false,name=accessProfiles"`            // This parameter identifies the teams to be exported.  The wildcard "*" selects all the teams.  For example, a single team can be exported using the following request: GET /rest/apigateway/archive?accessProfiles=d6b38ff8-59a8-47bf-9fba-0bdb24ee5b48  Whereas, all the teams can be exported using the following request: GET /rest/apigateway/archive?accessProfiles=*
	KerberosSetting           *string   `queryParam:"style=simple,explode=false,name=kerberosSetting"`           // This parameter identifies the kerberos configuration to be exported. The kerberos configuration can be exported using the following request: GET /rest/apigateway/archive?kerberosSetting=kerberosSetting
	Plans                     []*string `queryParam:"style=simple,explode=false,name=plans"`                     // This parameter identifies the plans to be exported.  The wildcard "*" selects all the plans.  For example, a single plan can be exported using the following request: GET /rest/apigateway/archive?plans=86d58023-be4b-4735-a08f-14e78131ce4a  Whereas, all the plans can be exported using the following request: GET /rest/apigateway/archive?plans=*
	Packages                  []*string `queryParam:"style=simple,explode=false,name=packages"`                  // This parameter identifies the packages to be exported.  The wildcard "*" selects all the packages.  For example, a single package can be exported using the following request: GET /rest/apigateway/archive?packages=73c93393-1477-4a99-9e44-c9b3e679de0c  Whereas, all the packages can be exported using the following request: GET /rest/apigateway/archive?packages=*
	PortalGateways            []*string `queryParam:"style=simple,explode=false,name=portalGateways"`            // This parameter identifies the portal configurations to be exported.  The wildcard "*" selects all portal configurations. For example, a single portal configuration can be exported using the following requrest: GET /rest/apigateway/archive?portalGateways=ae196583-d109-4e9e-b593-dd7b984fe8ca  Whereas, all the portal configurations can be exported using the following request: GET /rest/apigateway/archive?portalGateways=*
	Configurations            []*string `queryParam:"style=simple,explode=false,name=configurations"`            // This parameter identifies the configurations to be exported.  The wildcard "*" selects all the configurations.  For example, a single configuration can be exported using the following request: GET /rest/apigateway/archive?configurations=loadBalancer,customContentTypes  Whereas, all the configurations can be exported using the following request: GET /rest/apigateway/archive?configurations=*
	GatewayScopes             []*string `queryParam:"style=simple,explode=false,name=gatewayScopes"`             // This parameter identifies the oauth scopes to be exported.  The wildcard "*" selects all the oauth scopes.  For example, a single oauth scope can be exported using the following request: GET /rest/apigateway/archive?gatewayScopes=73c93393-1477-4a99-9e44-c9b3e679de0c  Whereas, all the oauth scopes can be exported using the following request: GET /rest/apigateway/archive?gatewayScopes=*
}

type ExportAPIGatewayAssetsResponse struct {
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// ExportAPIGatewayAssets The GET method exports an archive. The result of the GET request is an archive in a ZIP format.   This Method supports exporting API, Application, Alias,Policy, Policy Action, Keystore, Truststore, Kerberos, User, Group, Team, JMS Connection, JNDI Provider, JMS Trigger, Webservice Endpoint Alias, Approval Configuration, Outbound Proxy, URL alias, Plan and Package.   This GET method can be used for exporting specific type of assets and its optional/soft dependant assets by specifying the asset name and corresponding include options in query parameter.   For example, for an API, the Application assets (used by the API) are soft dependant of that API. To export the dependant applications of an API use the query param 'include-applications'.If 'include-applications' is not provided, the export archive will contains only the APIs.   Refer 'Parameters' section for the usage of each include parameters.    Use the POST /archive method to export all the assets in API Gateway.
//
//meta:operation GET /archive
func ExportAPIGatewayAssets(client *resty.Client, ctx context.Context, req ExportAPIGatewayAssetsRequest) (*ExportAPIGatewayAssetsResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}

	// send the request
	resp, err := r.Get("/archive")
	if err != nil {
		return nil, err
	}

	return &ExportAPIGatewayAssetsResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
