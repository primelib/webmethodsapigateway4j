// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type AggregationsRequest struct {
	Payload *models.SearchSearchContext `bodyParam:""` // Search Parameters to search for specific set of results on specified types
}

type AggregationsResponse struct {
	// Success response
	Result *models.AggregationsR200
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// Aggregations This REST call is intent to get the aggregation results for the specified scope and types. Supported aggregations are grouping, metrics and timeseries.  Grouping aggregation is used to find the count based on grouping of certain fields.  Metrics aggregation is used to find the average, minimum, maximum and sum of a field.  Timeseries aggregation is used to find the interval based and allowed intervals are second, minute, hour, day, week, month, quarter and year. In addition to the /search payload, aggregations fields like 'name', 'type' and 'fields'. Except types, scope, condition and aggregations other attributes are not considered during the REST API call.
//
//meta:operation POST /search/_aggregations
func Aggregations(client *resty.Client, ctx context.Context, req AggregationsRequest) (*AggregationsResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.AggregationsR200)
	r.SetResult(result)

	// send the request
	resp, err := r.Post("/search/_aggregations")
	if err != nil {
		return nil, err
	}

	return &AggregationsResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
