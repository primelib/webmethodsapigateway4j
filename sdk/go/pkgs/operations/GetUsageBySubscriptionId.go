// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type GetUsageBySubscriptionIdRequest struct {
	ApplicationId *string `pathParam:"style=simple,explode=false,name=applicationId"` // Application id to view the usage details of the application
}

type GetUsageBySubscriptionIdResponse struct {
	// Success response
	Result *models.MonetizationUsage
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// GetUsageBySubscriptionId This end point is used to fetch the aggregated usage of the application id for current cycle. This will return the usage only if the subscription is active. For the historic or detailed transaction wise usage details use /transactionalEvents/_search API.
//
//meta:operation GET /subscriptions/{applicationId}/usage
func GetUsageBySubscriptionId(client *resty.Client, ctx context.Context, req GetUsageBySubscriptionIdRequest) (*GetUsageBySubscriptionIdResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.MonetizationUsage)
	r.SetResult(result)

	// send the request
	resp, err := r.Get("/subscriptions/{applicationId}/usage")
	if err != nil {
		return nil, err
	}

	return &GetUsageBySubscriptionIdResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
