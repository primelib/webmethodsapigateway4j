// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type GetTransactionsRequest struct {
	APIName         *string `queryParam:"style=simple,explode=false,name=apiName"`         // The name of the API  for which the invocation details is required.The exact name must be provided or regular expressions can be used like API_.*
	APIVersion      *string `queryParam:"style=simple,explode=false,name=apiVersion"`      // The version of the API
	APIId           *string `queryParam:"style=simple,explode=false,name=apiId"`           // The system generated id for an API.The id of an can be retrieved from the API details screen
	ApplicationName *string `queryParam:"style=simple,explode=false,name=applicationName"` // The name of the Application for which the invocation details is required.The exact name must be provided or regular expressions can be used like APP_.*
	ApplicationId   *string `queryParam:"style=simple,explode=false,name=applicationId"`   // The system generated id for an Application.The id of an can be retrieved from the Application details screen
	PackageName     *string `queryParam:"style=simple,explode=false,name=packageName"`     // The name of the Package for which the invocation details is required.The exact name must be provided or regular expressions can be used like Package_.*
	PackageId       *string `queryParam:"style=simple,explode=false,name=packageId"`       // The system generated id for a Package.The id of an can be retrieved from the Package details screen
	PlanName        *string `queryParam:"style=simple,explode=false,name=planName"`        // The name of the Plan  for which the invocation details is required.The exact name must be provided or regular expressions can be used like Plan_.*
	PlanId          *string `queryParam:"style=simple,explode=false,name=planId"`          // The system generated id for a Plan.The id of an can be retrieved from the Plan details screen
	From            *int32  `queryParam:"style=simple,explode=false,name=from"`            // This parameter specifies the index from which the data has to be retrieved from the store. It is mainly used during pagination where the data is retrieved in batches
	Size            *int32  `queryParam:"style=simple,explode=false,name=size"`            // This parameter specifies the number of records that should be present in the response. This can be combined with the parameter - from to get the records in batches during pagination.
	FromDate        *string `queryParam:"style=simple,explode=false,name=fromDate"`        // This is the date from which the invocation details has to be retrieved for the matching filter criteria.It is a mandatory parameter and it should be of the format YYYY-MM-DD. Regular expression support is not available for this parameter
	ToDate          *string `queryParam:"style=simple,explode=false,name=toDate"`          // This is the date to which the invocation details has to be retrieved for the matching filter criteria.It is a mandatory parameter and it should be of the format YYYY-MM-DD. Regular expression support is not available for this parameter
}

type GetTransactionsResponse struct {
	// Success response
	Result *models.TransactionMgmtTransactionEvent
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// GetTransactions This method can be used to retrieve the transaction events for a given API/Application/Plan/Package for a specific period of time. Multiple request parameters of this method provide options to specify the request criteria to match the expected result and most of these input parameters supports regular expression in their values. Along with the mandatory parameters - fromDate and toDate, any one of the other filter criteria should be passed in the request.
//
//meta:operation GET /transactionalEvents/_search
func GetTransactions(client *resty.Client, ctx context.Context, req GetTransactionsRequest) (*GetTransactionsResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.TransactionMgmtTransactionEvent)
	r.SetResult(result)

	// send the request
	resp, err := r.Get("/transactionalEvents/_search")
	if err != nil {
		return nil, err
	}

	return &GetTransactionsResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
