// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type GetApplicableAPISForGlobalPolicyByIdRequest struct {
	PolicyId *string `pathParam:"style=simple,explode=false,name=policyId"` // This path parameter is used to specify the global policy id for which we need the list of applicable APIs
	Active   *string `queryParam:"style=simple,explode=false,name=active"`  // This is a query parameter. It is used to retrieve the list of applicable APIs for a global policy. If the value for this parameter is 'false' then it will return all the APIs whether it is active or not for the specified global policy. If the value for this flag is 'true' then it will return only the list of applicable active APIs alone for the specified global policy
}

type GetApplicableAPISForGlobalPolicyByIdResponse struct {
	// Success response
	Result []*models.PolicyMgmtAPIResponseGetAPIS
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// GetApplicableAPISForGlobalPolicyById This REST request is used to get the list of applicable APIs for a global policy.  An API become  applicable API for a global policy only if it satisfies the scope specified in the global policy.  By default it will return the basic API details of all the applicable APIs either if the API is active or inactive for a global policy. User can use the query parameter "active" to retrieve all active APIs for a global policy or all applicable APIs regardless of its status for a global policy.
//
//meta:operation GET /policies/{policyId}/apis
func GetApplicableAPISforGlobalPolicyById(client *resty.Client, ctx context.Context, req GetApplicableAPISforGlobalPolicyByIdRequest) (*GetApplicableAPISforGlobalPolicyByIdResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	var result []*models.PolicyMgmtAPIResponseGetAPIS
	r.SetResult(result)

	// send the request
	resp, err := r.Get("/policies/{policyId}/apis")
	if err != nil {
		return nil, err
	}

	return &GetApplicableAPISforGlobalPolicyByIdResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
