// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type UpdateRegisteredAPISRequest struct {
	ApplicationId *string                             `pathParam:"style=simple,explode=false,name=applicationId"` // This parameter specifies the ID of an application for updating the details of the registered APIs in API Gateway.
	Payload       *models.ApplicationRegisterAPIModel `bodyParam:""`                                              // This parameter specifies the ID of a registered API that is to be updated in API Gateway.
}

type UpdateRegisteredAPISResponse struct {
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// UpdateRegisteredAPIS This method is to be used to update the registered APIs list for an application. To add a new api to an application which is already registered with other APIs, you should send the complete list of apiIds including the old apiIds and the new apiId(s) to be added. To remove all APIs from the application, send an empty array for the apiIds field in the request.
//
//meta:operation PUT /applications/{applicationId}/apis
func UpdateRegisteredAPIS(client *resty.Client, ctx context.Context, req UpdateRegisteredAPISRequest) (*UpdateRegisteredAPISResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}

	// send the request
	resp, err := r.Put("/applications/{applicationId}/apis")
	if err != nil {
		return nil, err
	}

	return &UpdateRegisteredAPISResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
