// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type UpdateSubscriptionRequest struct {
	ApplicationId *string                                       `pathParam:"style=simple,explode=false,name=applicationId"` // Application id to update the subscription details
	Payload       *models.MonetizationSubscriptionUpdateRequest `bodyParam:""`
}

type UpdateSubscriptionResponse struct {
	// Success response
	Result *models.MonetizationApplication
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// UpdateSubscription This is used switch the subscription from one package and plan to another package and plan combination. If approval is enabled, then the request will return old application detail as response and will create a request for approver to approve the switch. Till the request get approved the user can invoke old package APIs only. After the subscription is switched, the quota for the subscription will be reset and will be able to invoke the new APIs using the same API Key. To get the history of the subscription usage use the /transactionalEvents/_search endpoint
//
//meta:operation PUT /subscriptions/{applicationId}
func UpdateSubscription(client *resty.Client, ctx context.Context, req UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.MonetizationApplication)
	r.SetResult(result)

	// send the request
	resp, err := r.Put("/subscriptions/{applicationId}")
	if err != nil {
		return nil, err
	}

	return &UpdateSubscriptionResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
