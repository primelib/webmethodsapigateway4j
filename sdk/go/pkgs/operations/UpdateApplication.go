// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type UpdateApplicationRequest struct {
	ApplicationId *string                        `pathParam:"style=simple,explode=false,name=applicationId"` // This parameter specifies the ID of an application that is to be updated in API Gateway.
	Payload       *models.ApplicationApplication `bodyParam:""`                                              // This parameter describes the request payload of an application that is to be updated in API Gateway.
}

type UpdateApplicationResponse struct {
	// Success response
	Result *models.ApplicationApplication
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// UpdateApplication This HTTP request updates a specified application in API Gateway. You can use this resource to update basic information in application like name, description, version, identifiers, linked authentication strategy ids etc., but you cannot use this method to update the contents of authentication strategies, access tokens or to update associated apis. To regenerate the access tokens (API key), refer the resource /applications/{applicationId}/accessTokens POST. To update the associated apis, refer the resource /applications/{applicationId}/apis PUT. To create new authentication strategies or update the authentication strategies, refer the resource /strategies POST or /strategies/{strategyId} PUT
//
//meta:operation PUT /applications/{applicationId}
func UpdateApplication(client *resty.Client, ctx context.Context, req UpdateApplicationRequest) (*UpdateApplicationResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.ApplicationApplication)
	r.SetResult(result)

	// send the request
	resp, err := r.Put("/applications/{applicationId}")
	if err != nil {
		return nil, err
	}

	return &UpdateApplicationResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
