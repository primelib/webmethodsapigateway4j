// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type DeactivatePackageByPackageIdRequest struct {
	PackageId *string `pathParam:"style=simple,explode=false,name=packageId"` // package id which needs to be deactivated
}

type DeactivatePackageByPackageIdResponse struct {
	// Success response
	Result *models.MonetizationPackageResponseContainer
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// DeactivatePackageByPackageId This request is used to deactivate the package. Once the package is deactivated, it will remove the authentication policy added or revert the authentication policy to original state in the API. If there are multiple packages associated to an API then the IAM policy will have the behaviour of having API key as application identification condition along with other application identification condition if any selected till last associated package is deactivated.
//
//meta:operation PUT /packages/{packageId}/deactivate
func DeactivatePackageByPackageId(client *resty.Client, ctx context.Context, req DeactivatePackageByPackageIdRequest) (*DeactivatePackageByPackageIdResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.MonetizationPackageResponseContainer)
	r.SetResult(result)

	// send the request
	resp, err := r.Put("/packages/{packageId}/deactivate")
	if err != nil {
		return nil, err
	}

	return &DeactivatePackageByPackageIdResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
