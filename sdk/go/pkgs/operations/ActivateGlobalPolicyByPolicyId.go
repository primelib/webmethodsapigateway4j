// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type ActivateGlobalPolicyByPolicyIdRequest struct {
	PolicyId *string `pathParam:"style=simple,explode=false,name=policyId"` // The path parameter should be the policy id of global policy that needs to be activated. If the policy id is not belongs to a global policy then error will be reported
}

type ActivateGlobalPolicyByPolicyIdResponse struct {
	// Success response
	Result *models.PolicyMgmtPolicy
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// ActivateGlobalPolicyByPolicyId This REST request is used to activate a global policy and this request doesn't require any request body. This request will try to activate the global policy and if any error occurs during activation it will be reported as response or if the global policy is activated then its policy details active flag set to true will be sent as response. If the global policy have any conflicts then it cannot be activated the conflicts are manually resolved.
//
//meta:operation PUT /policies/{policyId}/activate
func ActivateGlobalPolicyByPolicyId(client *resty.Client, ctx context.Context, req ActivateGlobalPolicyByPolicyIdRequest) (*ActivateGlobalPolicyByPolicyIdResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.PolicyMgmtPolicy)
	r.SetResult(result)

	// send the request
	resp, err := r.Put("/policies/{policyId}/activate")
	if err != nil {
		return nil, err
	}

	return &ActivateGlobalPolicyByPolicyIdResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
