// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type CreateSubscriptionRequest struct {
	Payload *models.MonetizationSubscriptionRequest `bodyParam:""`
}

type CreateSubscriptionResponse struct {
	// Success response
	Result *models.MonetizationApplication
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// CreateSubscription This endpoint is used to create subscription for specified package and plan in the request. If the approval is enabled, the response will not contain the API key but the application id will be available to retrieve the API key later. A approval request will be created in API gateway to approve the subscription. Once the request is approved the application will be provided with an API key. Then you can use subscriptions/{applicationId} GET HTTP method to get the API key
//
//meta:operation POST /subscriptions
func CreateSubscription(client *resty.Client, ctx context.Context, req CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.MonetizationApplication)
	r.SetResult(result)

	// send the request
	resp, err := r.Post("/subscriptions")
	if err != nil {
		return nil, err
	}

	return &CreateSubscriptionResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
