// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type DownloadProvIDErSpecificationRequest struct {
	APIId  *string `pathParam:"style=simple,explode=false,name=apiId"`   // API Id for the API to retrieve the versions
	Format *string `queryParam:"style=simple,explode=false,name=format"` // Output format of the API specification. For REST APIs the value is 'swagger'; for SOAP APIs use the value as 'wsdl';for GraphQL APIs use the value as 'graphql'
}

type DownloadProvIDErSpecificationResponse struct {
	// Success response
	Result *models.ServiceMgmtAPIResponseGetApi
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// DownloadProvIDErSpecification Downloads the provider specification of REST, SOAP and GraphQL based APIs. Provider specification is nothing but, the specification file (in swagger, graphql or wsdl format) with out the concrete API Gateway endpoint and contains all resources/methods/operation irrespective of whether they are exposed to consumer
//
//meta:operation GET /apis/{apiId}/providerspecification
func DownloadProvIDErSpecification(client *resty.Client, ctx context.Context, req DownloadProvIDErSpecificationRequest) (*DownloadProvIDErSpecificationResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.ServiceMgmtAPIResponseGetApi)
	r.SetResult(result)

	// send the request
	resp, err := r.Get("/apis/{apiId}/providerspecification")
	if err != nil {
		return nil, err
	}

	return &DownloadProvIDErSpecificationResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
