// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type GetAllSubscriptionUsageRequest struct {
	Name        *string `queryParam:"style=simple,explode=false,name=name"`    // Subscription name to search for usage
	PackageProp *string `queryParam:"style=simple,explode=false,name=package"` // Package name to search for usage
	Plan        *string `queryParam:"style=simple,explode=false,name=plan"`    // Plan name to search for usage
	From        *int64  `queryParam:"style=simple,explode=false,name=from"`    // Starting index number of the usage result to fetch
	Size        *int64  `queryParam:"style=simple,explode=false,name=size"`    // Number of results to be fetched for the usage result
	Count       *string `queryParam:"style=simple,explode=false,name=count"`   // true to get the count for the search or all the usages available
}

type GetAllSubscriptionUsageResponse struct {
	// Success response
	Result []*models.MonetizationUsage
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// GetAllSubscriptionUsage This endpoint is used to list the aggregated details of each active subscription for current cycle. This can be used with filters mentioned as query parameter to fine grain the result. For example, if you want to fetch the list of usage of active subscription for package GoldPackage, then you can specify package=GoldPackage in query parameter. The result will contain usage details of subscription belongs to GoldPackage alone. You can either fetch all the records at once or use the from and size query parameter to fetch subset of details.
//
//meta:operation GET /subscriptions/usage
func GetAllSubscriptionUsage(client *resty.Client, ctx context.Context, req GetAllSubscriptionUsageRequest) (*GetAllSubscriptionUsageResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	var result []*models.MonetizationUsage
	r.SetResult(result)

	// send the request
	resp, err := r.Get("/subscriptions/usage")
	if err != nil {
		return nil, err
	}

	return &GetAllSubscriptionUsageResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
