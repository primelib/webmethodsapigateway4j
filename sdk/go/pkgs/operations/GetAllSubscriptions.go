// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type GetAllSubscriptionsRequest struct {
	PackageId *string `queryParam:"style=simple,explode=false,name=packageId"` // Specify the package id for which the subscription details is requested
	PlanId    *string `queryParam:"style=simple,explode=false,name=planId"`    // Specify the plan id for which the subscription details is requested
}

type GetAllSubscriptionsResponse struct {
	// Success response
	Result []*models.MonetizationApplication
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// GetAllSubscriptions The method retrieves all subscriptions or set of subscriptions for the specified package id and plan id specified. The response will contain the list of application details. The API key inside all the application will be masked even though the API invoker have permission to view the key.
//
//meta:operation GET /subscriptions
func GetAllSubscriptions(client *resty.Client, ctx context.Context, req GetAllSubscriptionsRequest) (*GetAllSubscriptionsResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	var result []*models.MonetizationApplication
	r.SetResult(result)

	// send the request
	resp, err := r.Get("/subscriptions")
	if err != nil {
		return nil, err
	}

	return &GetAllSubscriptionsResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
