// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
)

type RegisterAPISRequest struct {
	ApplicationId *string   `pathParam:"style=simple,explode=false,name=applicationId"` // This parameter specifies the ID of an application for registering APIs in API Gateway.
	Payload       []*string `bodyParam:""`                                              // This parameter specifies the IDs of the APIs for registering in an application in API Gateway.
}

type RegisterAPISResponse struct {
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// RegisterAPIS This method is to be used to update the registered APIs list for an application. To add a new api to an application which is already registered with other APIs, you should send the complete list of apiIds including the old apiIds and the new apiId(s) to be added. To remove all APIs from the application, send an empty array for the apiIds field in the request.
//
//meta:operation POST /applications/{applicationId}/apis
func RegisterAPIS(client *resty.Client, ctx context.Context, req RegisterAPISRequest) (*RegisterAPISResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}

	// send the request
	resp, err := r.Post("/applications/{applicationId}/apis")
	if err != nil {
		return nil, err
	}

	return &RegisterAPISResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
