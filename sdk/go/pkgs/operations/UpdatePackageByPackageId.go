// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
	"github.com/primelib/webmethods-api-gateway-client/sdk/go/pkgs/models"
)

type UpdatePackageByPackageIdRequest struct {
	PackageId *string                     `pathParam:"style=simple,explode=false,name=packageId"` // package id to which the update requests is sent
	Payload   *models.MonetizationPackage `bodyParam:""`
}

type UpdatePackageByPackageIdResponse struct {
	// Success response
	Result *models.MonetizationPackageResponseContainer
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// UpdatePackageByPackageId This endpoint is used to update the package metadata and  associate or remove APIs and plans. The package can be active while editing any details of the package. If an API is added to an active package then subscribers can start consuming the API with existing key. Similarly if the API is removed, subscribers wont be able to use the removed APIs. Removal of plan is allowed only if the plan does not have any subscribers. You need to republish the package to portal to make the updated changes available in portal.  Please use /package/{packageId}/active or /package/{packageId}/deactivate to activate or deactivate as this endpoint cannot be used to activate or deactivate package.
//
//meta:operation PUT /packages/{packageId}
func UpdatePackageByPackageId(client *resty.Client, ctx context.Context, req UpdatePackageByPackageIdRequest) (*UpdatePackageByPackageIdResponse, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeader("Content-Type", "application/json")
	r.SetHeader("Accept", "application/json")
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}
	result := new(models.MonetizationPackageResponseContainer)
	r.SetResult(result)

	// send the request
	resp, err := r.Put("/packages/{packageId}")
	if err != nil {
		return nil, err
	}

	return &UpdatePackageByPackageIdResponse{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
		Result:      result,
	}, nil
}
